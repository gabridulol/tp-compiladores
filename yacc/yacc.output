Nonterminals useless in grammar

    vector


Terminals unused in grammar

    KW_NON_SI
    LEX_ERROR


Rules useless in grammar

  153 vector: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  154       | IDENTIFIER SEMICOLON


State 16 conflicts: 1 shift/reduce, 19 reduce/reduce
State 32 conflicts: 1 shift/reduce
State 33 conflicts: 26 reduce/reduce
State 37 conflicts: 1 shift/reduce, 26 reduce/reduce
State 41 conflicts: 1 shift/reduce, 52 reduce/reduce
State 85 conflicts: 2 shift/reduce, 40 reduce/reduce
State 92 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce, 26 reduce/reduce
State 105 conflicts: 1 shift/reduce, 22 reduce/reduce
State 144 conflicts: 1 shift/reduce
State 163 conflicts: 2 shift/reduce, 21 reduce/reduce
State 191 conflicts: 1 shift/reduce, 22 reduce/reduce
State 193 conflicts: 1 shift/reduce
State 203 conflicts: 1 shift/reduce
State 210 conflicts: 19 shift/reduce
State 213 conflicts: 2 shift/reduce, 44 reduce/reduce
State 224 conflicts: 1 shift/reduce, 20 reduce/reduce
State 234 conflicts: 2 shift/reduce, 21 reduce/reduce
State 236 conflicts: 19 shift/reduce
State 238 conflicts: 1 shift/reduce, 44 reduce/reduce
State 254 conflicts: 1 shift/reduce, 19 reduce/reduce
State 293 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: global_statement_list alchemia_statement

    2 global_statement_list: ε
    3                      | global_statement_list global_statement

    4 global_statement: import_statement
    5                 | declaration_statement
    6                 | function_declaration_statement

    7 $@1: ε

    8 block: LBRACE $@1 statement_list RBRACE

    9 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN block

   10 statement_list: ε
   11               | statement_list statement

   12 statement: expression_statement
   13          | iteration_statement
   14          | io_functions
   15          | declaration_statement
   16          | function_call_statement
   17          | conditional_statement
   18          | type_define_statement
   19          | vector_statement
   20          | jump_statement
   21          | causal_statement
   22          | enum_assignment
   23          | assignment_statement

   24 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON
   25                     | expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON

   26 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON

   27 expression_statement: expression SEMICOLON

   28 primary_expression: IDENTIFIER
   29                   | vector_access
   30                   | member_access_direct
   31                   | pointer_statement
   32                   | constant
   33                   | string
   34                   | LPAREN expression RPAREN

   35 unary_expression: primary_expression
   36                 | OP_LOGICAL_NOT unary_expression
   37                 | OP_DEREF_POINTER unary_expression
   38                 | OP_ADDR_OF unary_expression
   39                 | OP_SUBTRACT unary_expression

   40 expression: unary_expression
   41           | expression OP_ASSIGN assing_value
   42           | expression OP_ACCESS_POINTER assing_value
   43           | expression OP_ACCESS_MEMBER assing_value
   44           | expression OP_LOGICAL_XOR unary_expression
   45           | expression OP_LOGICAL_OR unary_expression
   46           | expression OP_LOGICAL_AND unary_expression
   47           | expression OP_EQUAL unary_expression
   48           | expression OP_NOT_EQUAL unary_expression
   49           | expression OP_LESS_THAN unary_expression
   50           | expression OP_GREATER_THAN unary_expression
   51           | expression OP_LESS_EQUAL unary_expression
   52           | expression OP_GREATER_EQUAL unary_expression
   53           | expression OP_ADD unary_expression
   54           | expression OP_SUBTRACT unary_expression
   55           | expression OP_MULTIPLY unary_expression
   56           | expression OP_DIVIDE unary_expression
   57           | expression OP_MODULUS unary_expression
   58           | expression OP_EXP unary_expression
   59           | expression OP_INTEGER_DIVIDE unary_expression

   60 constant: LIT_INT
   61         | LIT_FLOAT
   62         | LIT_FACTUM
   63         | LIT_FICTUM
   64         | LIT_CHAR

   65 string: LIT_STRING

   66 assing_value: IDENTIFIER
   67             | vector_access
   68             | pointer_statement

   69 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON
   70                      | expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   71                      | pointer_declaration

   72 opcional_constant: KW_MOL
   73                  | ε

   74 list_declaration_statement: declaration_statement list_declaration_statement
   75                           | declaration_statement

   76 type_specifier: TYPE_ATOMUS
   77               | TYPE_FRACTIO
   78               | TYPE_FRAGMENTUM
   79               | TYPE_MAGNUS
   80               | TYPE_MINIMUS
   81               | TYPE_QUANTUM
   82               | TYPE_SCRIPTUM
   83               | TYPE_SYMBOLUM
   84               | TYPE_VACUUM
   85               | IDENTIFIER KW_ENUMERARE
   86               | OP_DEREF_POINTER type_specifier

   87 $@2: ε

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

   89 parameter_list: ε
   90               | parameter
   91               | parameter_list PIPE parameter

   92 parameter: IDENTIFIER type_specifier

   93 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON

   94 argument_list: expression
   95              | argument_list PIPE expression

   96 jump_statement: KW_CONTINUUM SEMICOLON
   97               | KW_RUPTIO SEMICOLON
   98               | KW_REDIRE SEMICOLON
   99               | expression KW_REDIRE SEMICOLON

  100 conditional_statement: LPAREN expression RPAREN KW_SI block

  101 $@3: ε

  102 conditional_statement: LPAREN expression RPAREN KW_SI block $@3 conditional_non_statement

  103 $@4: ε

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

  105 conditional_non_statement: KW_NON block
  106                          | KW_NON conditional_statement

  107 causal_statement: KW_CASUS expression COLON statement_list
  108                 | KW_AXIOM COLON statement_list

  109 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block
  110                    | LPAREN expression_statement expression_statement RPAREN KW_ITERARE block
  111                    | LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block
  112                    | LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block
  113                    | LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block

  114 io_functions: function_input_output
  115             | function_magnitudo

  116 function_input_output: identifier_langle_list
  117                      | identifier_rangle_list

  118 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON
  119                       | IDENTIFIER LANGLE identifier_langle_list

  120 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON
  121                       | IDENTIFIER RANGLE identifier_rangle_list

  122 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON

  123 type_expression: type_specifier

  124 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON

  125 $@5: ε

  126 type_define_statement: IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_DESIGNARE KW_HOMUNCULUS SEMICOLON
  127                      | type_define_enum

  128 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

  129 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

  130 enum_list: IDENTIFIER
  131          | IDENTIFIER OP_ASSIGN LIT_INT
  132          | IDENTIFIER OP_ASSIGN LIT_CHAR
  133          | enum_list PIPE IDENTIFIER
  134          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT
  135          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

  136 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  137                 | LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

  138 vector_access: IDENTIFIER LANGLE expression RANGLE

  139 pointer_statement: pointer_assignment
  140                  | pointer_dereference
  141                  | member_access_direct
  142                  | member_access_dereference
  143                  | member_access_pointer

  144 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON
  145                    | expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

  146 pointer_assignment: IDENTIFIER OP_ADDR_OF

  147 pointer_dereference: OP_DEREF_POINTER IDENTIFIER

  148 access_list: IDENTIFIER
  149            | access_list OP_ACCESS_MEMBER IDENTIFIER

  150 member_access_direct: access_list

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list

  152 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER access_list


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_MAIN (258) 9
    KW_CASUS (259) 107
    KW_AXIOM (260) 108
    KW_CONTINUUM (261) 96
    KW_RUPTIO (262) 97
    KW_VERTERE (263) 104
    KW_DESIGNARE (264) 124 126
    KW_ENUMERARE (265) 85 128 129
    KW_EVOCARE (266) 26
    KW_FORMULA (267) 88
    KW_HOMUNCULUS (268) 126
    KW_ITERARE (269) 110 111 112 113
    KW_LECTURA (270) 118
    KW_MAGNITUDO (271) 122
    KW_MOL (272) 72
    KW_NON_SI (273)
    KW_NON (274) 105 106
    KW_PERSISTO (275) 109
    KW_REDIRE (276) 98 99
    KW_REVELARE (277) 120
    KW_SI (278) 100 102
    TYPE_ATOMUS (279) 76
    TYPE_FRACTIO (280) 77
    TYPE_FRAGMENTUM (281) 78
    TYPE_MAGNUS (282) 79
    TYPE_MINIMUS (283) 80
    TYPE_QUANTUM (284) 81
    TYPE_SCRIPTUM (285) 82
    TYPE_SYMBOLUM (286) 83
    TYPE_VACUUM (287) 84
    LIT_FACTUM (288) 62
    LIT_FICTUM (289) 63
    LIT_FLOAT <val_float> (290) 61
    LIT_INT <val_int> (291) 60 131 134
    LIT_CHAR <str> (292) 64 132 135
    LIT_STRING <str> (293) 65
    OP_ACCESS_POINTER (294) 42 152
    OP_ASSIGN (295) 24 25 41 70 88 129 131 132 134 135 137 145
    OP_GREATER_EQUAL (296) 52
    OP_LESS_EQUAL (297) 51
    OP_EQUAL (298) 47
    OP_NOT_EQUAL (299) 48
    OP_INTEGER_DIVIDE (300) 59
    OP_EXP (301) 58
    OP_LOGICAL_AND (302) 46
    OP_LOGICAL_OR (303) 45
    OP_MULTIPLY (304) 55
    OP_ADD (305) 53
    OP_SUBTRACT (306) 39 54
    OP_DIVIDE (307) 56
    OP_MODULUS (308) 57
    OP_ACCESS_MEMBER (309) 43 149 151
    OP_LOGICAL_NOT (310) 36
    OP_GREATER_THAN (311) 50
    OP_LESS_THAN (312) 49
    OP_LOGICAL_XOR (313) 44
    OP_ADDR_OF (314) 38 146
    OP_DEREF_POINTER (315) 37 86 144 145 147 151
    LANGLE (316) 25 118 119 136 138
    RANGLE (317) 25 120 121 136 138
    COLON (318) 107 108
    LPAREN (319) 9 34 88 93 100 102 104 109 110 111 112 113 122 151
    RPAREN (320) 9 34 88 93 100 102 104 109 110 111 112 113 122 151
    LBRACKET (321) 137
    RBRACKET (322) 137
    LBRACE (323) 8 88 104 126 128
    RBRACE (324) 8 88 104 126 128
    PIPE (325) 91 95 133 134 135
    SEMICOLON (326) 24 25 26 27 69 70 93 96 97 98 99 118 120 122 124 126 128 129 136 137 144 145
    IDENTIFIER <str> (327) 9 24 25 26 28 66 69 70 85 88 92 93 118 119 120 121 124 126 128 129 130 131 132 133 134 135 136 137 138 144 145 146 147 148 149 151 152
    LEX_ERROR (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    translation_unit (75)
        on left: 1
        on right: 0
    global_statement_list (76)
        on left: 2 3
        on right: 1 3
    global_statement (77)
        on left: 4 5 6
        on right: 3
    block (78)
        on left: 8
        on right: 9 100 102 105 109 110 111 112 113
    $@1 (79)
        on left: 7
        on right: 8
    alchemia_statement (80)
        on left: 9
        on right: 1
    statement_list (81)
        on left: 10 11
        on right: 8 11 88 107 108
    statement (82)
        on left: 12 13 14 15 16 17 18 19 20 21 22 23
        on right: 11
    assignment_statement (83)
        on left: 24 25
        on right: 23
    import_statement (84)
        on left: 26
        on right: 4
    expression_statement (85)
        on left: 27
        on right: 12 110 111 112 113
    primary_expression <ptr> (86)
        on left: 28 29 30 31 32 33 34
        on right: 35
    unary_expression <ptr> (87)
        on left: 35 36 37 38 39
        on right: 36 37 38 39 40 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    expression <ptr> (88)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 24 25 27 34 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 70 94 95 99 100 102 104 107 109 111 113 136 138 145
    constant <ptr> (89)
        on left: 60 61 62 63 64
        on right: 32
    string <ptr> (90)
        on left: 65
        on right: 33
    assing_value (91)
        on left: 66 67 68
        on right: 41 42 43
    declaration_statement (92)
        on left: 69 70 71
        on right: 5 15 74 75 112 113
    opcional_constant (93)
        on left: 72 73
        on right: 69 70
    list_declaration_statement (94)
        on left: 74 75
        on right: 74 126
    type_specifier <str> (95)
        on left: 76 77 78 79 80 81 82 83 84 85 86
        on right: 69 70 86 88 92 123 124 136 144 145
    function_declaration_statement (96)
        on left: 88
        on right: 6
    $@2 (97)
        on left: 87
        on right: 88
    parameter_list (98)
        on left: 89 90 91
        on right: 88 91
    parameter (99)
        on left: 92
        on right: 90 91
    function_call_statement (100)
        on left: 93
        on right: 16
    argument_list <arg_list> (101)
        on left: 94 95
        on right: 93 95 137
    jump_statement (102)
        on left: 96 97 98 99
        on right: 20
    conditional_statement (103)
        on left: 100 102 104
        on right: 17 106
    $@3 (104)
        on left: 101
        on right: 102
    $@4 (105)
        on left: 103
        on right: 104
    conditional_non_statement (106)
        on left: 105 106
        on right: 102
    causal_statement (107)
        on left: 107 108
        on right: 21 104
    iteration_statement (108)
        on left: 109 110 111 112 113
        on right: 13
    io_functions (109)
        on left: 114 115
        on right: 14
    function_input_output (110)
        on left: 116 117
        on right: 114
    identifier_langle_list (111)
        on left: 118 119
        on right: 116 119
    identifier_rangle_list (112)
        on left: 120 121
        on right: 117 121
    function_magnitudo (113)
        on left: 122
        on right: 115
    type_expression (114)
        on left: 123
        on right: 122
    type_define_statement (115)
        on left: 124 126 127
        on right: 18
    $@5 (116)
        on left: 125
        on right: 126
    type_define_enum (117)
        on left: 128
        on right: 127
    enum_assignment (118)
        on left: 129
        on right: 22
    enum_list (119)
        on left: 130 131 132 133 134 135
        on right: 128 133 134 135
    vector_statement (120)
        on left: 136 137
        on right: 19
    vector_access <ptr> (121)
        on left: 138
        on right: 29 67
    pointer_statement <ptr> (122)
        on left: 139 140 141 142 143
        on right: 31 68
    pointer_declaration (123)
        on left: 144 145
        on right: 71
    pointer_assignment <ptr> (124)
        on left: 146
        on right: 139
    pointer_dereference <ptr> (125)
        on left: 147
        on right: 140
    access_list <ptr> (126)
        on left: 148 149
        on right: 149 150 151 152
    member_access_direct <ptr> (127)
        on left: 150
        on right: 30 141
    member_access_dereference <ptr> (128)
        on left: 151
        on right: 142
    member_access_pointer <ptr> (129)
        on left: 152
        on right: 143


State 0

    0 $accept: • translation_unit $end

    $default  reduce using rule 2 (global_statement_list)

    translation_unit       go to state 1
    global_statement_list  go to state 2


State 1

    0 $accept: translation_unit • $end

    $end  shift, and go to state 3


State 2

    1 translation_unit: global_statement_list • alchemia_statement
    3 global_statement_list: global_statement_list • global_statement

    KW_FORMULA        shift, and go to state 4
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 16

    global_statement                go to state 17
    alchemia_statement              go to state 18
    import_statement                go to state 19
    primary_expression              go to state 20
    unary_expression                go to state 21
    expression                      go to state 22
    constant                        go to state 23
    string                          go to state 24
    declaration_statement           go to state 25
    function_declaration_statement  go to state 26
    vector_access                   go to state 27
    pointer_statement               go to state 28
    pointer_declaration             go to state 29
    pointer_assignment              go to state 30
    pointer_dereference             go to state 31
    access_list                     go to state 32
    member_access_direct            go to state 33
    member_access_dereference       go to state 34
    member_access_pointer           go to state 35


State 3

    0 $accept: translation_unit $end •

    $default  accept


State 4

   88 function_declaration_statement: KW_FORMULA • LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    LPAREN  shift, and go to state 36


State 5

   62 constant: LIT_FACTUM •

    $default  reduce using rule 62 (constant)


State 6

   63 constant: LIT_FICTUM •

    $default  reduce using rule 63 (constant)


State 7

   61 constant: LIT_FLOAT •

    $default  reduce using rule 61 (constant)


State 8

   60 constant: LIT_INT •

    $default  reduce using rule 60 (constant)


State 9

   64 constant: LIT_CHAR •

    $default  reduce using rule 64 (constant)


State 10

   65 string: LIT_STRING •

    $default  reduce using rule 65 (string)


State 11

   39 unary_expression: OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 38
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 12

   36 unary_expression: OP_LOGICAL_NOT • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 39
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 13

   38 unary_expression: OP_ADDR_OF • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 40
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 14

   37 unary_expression: OP_DEREF_POINTER • unary_expression
  147 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 41

    primary_expression         go to state 20
    unary_expression           go to state 42
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 15

   34 primary_expression: LPAREN • expression RPAREN
  151 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 43
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 44
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 16

    9 alchemia_statement: IDENTIFIER • LPAREN RPAREN KW_MAIN block
   26 import_statement: IDENTIFIER • KW_EVOCARE SEMICOLON
   28 primary_expression: IDENTIFIER •
   69 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  144 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    KW_EVOCARE         shift, and go to state 45
    TYPE_ATOMUS        shift, and go to state 46
    TYPE_FRACTIO       shift, and go to state 47
    TYPE_FRAGMENTUM    shift, and go to state 48
    TYPE_MAGNUS        shift, and go to state 49
    TYPE_MINIMUS       shift, and go to state 50
    TYPE_QUANTUM       shift, and go to state 51
    TYPE_SCRIPTUM      shift, and go to state 52
    TYPE_SYMBOLUM      shift, and go to state 53
    TYPE_VACUUM        shift, and go to state 54
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    OP_DEREF_POINTER   shift, and go to state 57
    LANGLE             shift, and go to state 58
    LPAREN             shift, and go to state 59
    IDENTIFIER         shift, and go to state 60

    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)

    type_specifier  go to state 61


State 17

    3 global_statement_list: global_statement_list global_statement •

    $default  reduce using rule 3 (global_statement_list)


State 18

    1 translation_unit: global_statement_list alchemia_statement •

    $default  reduce using rule 1 (translation_unit)


State 19

    4 global_statement: import_statement •

    $default  reduce using rule 4 (global_statement)


State 20

   35 unary_expression: primary_expression •

    $default  reduce using rule 35 (unary_expression)


State 21

   40 expression: unary_expression •

    $default  reduce using rule 40 (expression)


State 22

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
   70 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  145 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 63
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80


State 23

   32 primary_expression: constant •

    $default  reduce using rule 32 (primary_expression)


State 24

   33 primary_expression: string •

    $default  reduce using rule 33 (primary_expression)


State 25

    5 global_statement: declaration_statement •

    $default  reduce using rule 5 (global_statement)


State 26

    6 global_statement: function_declaration_statement •

    $default  reduce using rule 6 (global_statement)


State 27

   29 primary_expression: vector_access •

    $default  reduce using rule 29 (primary_expression)


State 28

   31 primary_expression: pointer_statement •

    $default  reduce using rule 31 (primary_expression)


State 29

   71 declaration_statement: pointer_declaration •

    $default  reduce using rule 71 (declaration_statement)


State 30

  139 pointer_statement: pointer_assignment •

    $default  reduce using rule 139 (pointer_statement)


State 31

  140 pointer_statement: pointer_dereference •

    $default  reduce using rule 140 (pointer_statement)


State 32

  149 access_list: access_list • OP_ACCESS_MEMBER IDENTIFIER
  150 member_access_direct: access_list •

    OP_ACCESS_MEMBER  shift, and go to state 81

    OP_ACCESS_MEMBER  [reduce using rule 150 (member_access_direct)]
    $default          reduce using rule 150 (member_access_direct)


State 33

   30 primary_expression: member_access_direct •
  141 pointer_statement: member_access_direct •

    KW_REDIRE          reduce using rule 30 (primary_expression)
    KW_REDIRE          [reduce using rule 141 (pointer_statement)]
    OP_ACCESS_POINTER  reduce using rule 30 (primary_expression)
    OP_ACCESS_POINTER  [reduce using rule 141 (pointer_statement)]
    OP_ASSIGN          reduce using rule 30 (primary_expression)
    OP_ASSIGN          [reduce using rule 141 (pointer_statement)]
    OP_GREATER_EQUAL   reduce using rule 30 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 141 (pointer_statement)]
    OP_LESS_EQUAL      reduce using rule 30 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 141 (pointer_statement)]
    OP_EQUAL           reduce using rule 30 (primary_expression)
    OP_EQUAL           [reduce using rule 141 (pointer_statement)]
    OP_NOT_EQUAL       reduce using rule 30 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 141 (pointer_statement)]
    OP_INTEGER_DIVIDE  reduce using rule 30 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 141 (pointer_statement)]
    OP_EXP             reduce using rule 30 (primary_expression)
    OP_EXP             [reduce using rule 141 (pointer_statement)]
    OP_LOGICAL_AND     reduce using rule 30 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 141 (pointer_statement)]
    OP_LOGICAL_OR      reduce using rule 30 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 141 (pointer_statement)]
    OP_MULTIPLY        reduce using rule 30 (primary_expression)
    OP_MULTIPLY        [reduce using rule 141 (pointer_statement)]
    OP_ADD             reduce using rule 30 (primary_expression)
    OP_ADD             [reduce using rule 141 (pointer_statement)]
    OP_SUBTRACT        reduce using rule 30 (primary_expression)
    OP_SUBTRACT        [reduce using rule 141 (pointer_statement)]
    OP_DIVIDE          reduce using rule 30 (primary_expression)
    OP_DIVIDE          [reduce using rule 141 (pointer_statement)]
    OP_MODULUS         reduce using rule 30 (primary_expression)
    OP_MODULUS         [reduce using rule 141 (pointer_statement)]
    OP_ACCESS_MEMBER   reduce using rule 30 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 141 (pointer_statement)]
    OP_GREATER_THAN    reduce using rule 30 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 141 (pointer_statement)]
    OP_LESS_THAN       reduce using rule 30 (primary_expression)
    OP_LESS_THAN       [reduce using rule 141 (pointer_statement)]
    OP_LOGICAL_XOR     reduce using rule 30 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 141 (pointer_statement)]
    RANGLE             reduce using rule 30 (primary_expression)
    RANGLE             [reduce using rule 141 (pointer_statement)]
    COLON              reduce using rule 30 (primary_expression)
    COLON              [reduce using rule 141 (pointer_statement)]
    RPAREN             reduce using rule 30 (primary_expression)
    RPAREN             [reduce using rule 141 (pointer_statement)]
    RBRACKET           reduce using rule 30 (primary_expression)
    RBRACKET           [reduce using rule 141 (pointer_statement)]
    PIPE               reduce using rule 30 (primary_expression)
    PIPE               [reduce using rule 141 (pointer_statement)]
    SEMICOLON          reduce using rule 30 (primary_expression)
    SEMICOLON          [reduce using rule 141 (pointer_statement)]
    $default           reduce using rule 30 (primary_expression)


State 34

  142 pointer_statement: member_access_dereference •

    $default  reduce using rule 142 (pointer_statement)


State 35

  143 pointer_statement: member_access_pointer •

    $default  reduce using rule 143 (pointer_statement)


State 36

   88 function_declaration_statement: KW_FORMULA LPAREN • parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 82

    $default  reduce using rule 89 (parameter_list)

    parameter_list  go to state 83
    parameter       go to state 84


State 37

   28 primary_expression: IDENTIFIER •
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    LANGLE             shift, and go to state 58

    KW_REDIRE          reduce using rule 28 (primary_expression)
    KW_REDIRE          [reduce using rule 148 (access_list)]
    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RANGLE             reduce using rule 28 (primary_expression)
    RANGLE             [reduce using rule 148 (access_list)]
    COLON              reduce using rule 28 (primary_expression)
    COLON              [reduce using rule 148 (access_list)]
    RPAREN             reduce using rule 28 (primary_expression)
    RPAREN             [reduce using rule 148 (access_list)]
    RBRACKET           reduce using rule 28 (primary_expression)
    RBRACKET           [reduce using rule 148 (access_list)]
    PIPE               reduce using rule 28 (primary_expression)
    PIPE               [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 28 (primary_expression)
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)


State 38

   39 unary_expression: OP_SUBTRACT unary_expression •

    $default  reduce using rule 39 (unary_expression)


State 39

   36 unary_expression: OP_LOGICAL_NOT unary_expression •

    $default  reduce using rule 36 (unary_expression)


State 40

   38 unary_expression: OP_ADDR_OF unary_expression •

    $default  reduce using rule 38 (unary_expression)


State 41

   28 primary_expression: IDENTIFIER •
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  147 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    LANGLE             shift, and go to state 58

    KW_REDIRE          reduce using rule 28 (primary_expression)
    KW_REDIRE          [reduce using rule 147 (pointer_dereference)]
    KW_REDIRE          [reduce using rule 148 (access_list)]
    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 147 (pointer_dereference)]
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 147 (pointer_dereference)]
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 147 (pointer_dereference)]
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 147 (pointer_dereference)]
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 147 (pointer_dereference)]
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 147 (pointer_dereference)]
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 147 (pointer_dereference)]
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 147 (pointer_dereference)]
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 147 (pointer_dereference)]
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 147 (pointer_dereference)]
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 147 (pointer_dereference)]
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 147 (pointer_dereference)]
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RANGLE             reduce using rule 28 (primary_expression)
    RANGLE             [reduce using rule 147 (pointer_dereference)]
    RANGLE             [reduce using rule 148 (access_list)]
    COLON              reduce using rule 28 (primary_expression)
    COLON              [reduce using rule 147 (pointer_dereference)]
    COLON              [reduce using rule 148 (access_list)]
    RPAREN             reduce using rule 28 (primary_expression)
    RPAREN             [reduce using rule 147 (pointer_dereference)]
    RPAREN             [reduce using rule 148 (access_list)]
    RBRACKET           reduce using rule 28 (primary_expression)
    RBRACKET           [reduce using rule 147 (pointer_dereference)]
    RBRACKET           [reduce using rule 148 (access_list)]
    PIPE               reduce using rule 28 (primary_expression)
    PIPE               [reduce using rule 147 (pointer_dereference)]
    PIPE               [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 28 (primary_expression)
    SEMICOLON          [reduce using rule 147 (pointer_dereference)]
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)


State 42

   37 unary_expression: OP_DEREF_POINTER unary_expression •

    $default  reduce using rule 37 (unary_expression)


State 43

   37 unary_expression: OP_DEREF_POINTER • unary_expression
  147 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  151 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 85

    primary_expression         go to state 20
    unary_expression           go to state 42
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 44

   34 primary_expression: LPAREN expression • RPAREN
   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RPAREN             shift, and go to state 87


State 45

   26 import_statement: IDENTIFIER KW_EVOCARE • SEMICOLON

    SEMICOLON  shift, and go to state 88


State 46

   76 type_specifier: TYPE_ATOMUS •

    $default  reduce using rule 76 (type_specifier)


State 47

   77 type_specifier: TYPE_FRACTIO •

    $default  reduce using rule 77 (type_specifier)


State 48

   78 type_specifier: TYPE_FRAGMENTUM •

    $default  reduce using rule 78 (type_specifier)


State 49

   79 type_specifier: TYPE_MAGNUS •

    $default  reduce using rule 79 (type_specifier)


State 50

   80 type_specifier: TYPE_MINIMUS •

    $default  reduce using rule 80 (type_specifier)


State 51

   81 type_specifier: TYPE_QUANTUM •

    $default  reduce using rule 81 (type_specifier)


State 52

   82 type_specifier: TYPE_SCRIPTUM •

    $default  reduce using rule 82 (type_specifier)


State 53

   83 type_specifier: TYPE_SYMBOLUM •

    $default  reduce using rule 83 (type_specifier)


State 54

   84 type_specifier: TYPE_VACUUM •

    $default  reduce using rule 84 (type_specifier)


State 55

  152 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER • access_list

    IDENTIFIER  shift, and go to state 89

    access_list  go to state 90


State 56

  146 pointer_assignment: IDENTIFIER OP_ADDR_OF •

    $default  reduce using rule 146 (pointer_assignment)


State 57

   86 type_specifier: OP_DEREF_POINTER • type_specifier
  144 pointer_declaration: IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    OP_DEREF_POINTER  shift, and go to state 91
    IDENTIFIER        shift, and go to state 60

    type_specifier  go to state 92


State 58

  138 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 93
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 59

    9 alchemia_statement: IDENTIFIER LPAREN • RPAREN KW_MAIN block

    RPAREN  shift, and go to state 94


State 60

   85 type_specifier: IDENTIFIER • KW_ENUMERARE

    KW_ENUMERARE  shift, and go to state 95


State 61

   69 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 96

    $default  reduce using rule 73 (opcional_constant)

    opcional_constant  go to state 97


State 62

   42 expression: expression OP_ACCESS_POINTER • assing_value

    OP_DEREF_POINTER  shift, and go to state 98
    LPAREN            shift, and go to state 99
    IDENTIFIER        shift, and go to state 100

    assing_value               go to state 101
    vector_access              go to state 102
    pointer_statement          go to state 103
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 104
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 63

   41 expression: expression OP_ASSIGN • assing_value
   70 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  145 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_DEREF_POINTER  shift, and go to state 98
    LPAREN            shift, and go to state 99
    IDENTIFIER        shift, and go to state 105

    assing_value               go to state 106
    vector_access              go to state 102
    pointer_statement          go to state 103
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 104
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 64

   52 expression: expression OP_GREATER_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 107
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 65

   51 expression: expression OP_LESS_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 108
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 66

   47 expression: expression OP_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 109
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 67

   48 expression: expression OP_NOT_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 110
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 68

   59 expression: expression OP_INTEGER_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 111
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 69

   58 expression: expression OP_EXP • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 112
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 70

   46 expression: expression OP_LOGICAL_AND • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 113
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 71

   45 expression: expression OP_LOGICAL_OR • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 114
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 72

   55 expression: expression OP_MULTIPLY • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 115
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 73

   53 expression: expression OP_ADD • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 116
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 74

   54 expression: expression OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 117
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 75

   56 expression: expression OP_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 118
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 76

   57 expression: expression OP_MODULUS • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 119
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 77

   43 expression: expression OP_ACCESS_MEMBER • assing_value

    OP_DEREF_POINTER  shift, and go to state 98
    LPAREN            shift, and go to state 99
    IDENTIFIER        shift, and go to state 100

    assing_value               go to state 120
    vector_access              go to state 102
    pointer_statement          go to state 103
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 104
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 78

   50 expression: expression OP_GREATER_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 121
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 79

   49 expression: expression OP_LESS_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 122
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 80

   44 expression: expression OP_LOGICAL_XOR • unary_expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 123
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 81

  149 access_list: access_list OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 124


State 82

   92 parameter: IDENTIFIER • type_specifier

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    OP_DEREF_POINTER  shift, and go to state 91
    IDENTIFIER        shift, and go to state 60

    type_specifier  go to state 125


State 83

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list • RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE
   91 parameter_list: parameter_list • PIPE parameter

    RPAREN  shift, and go to state 126
    PIPE    shift, and go to state 127


State 84

   90 parameter_list: parameter •

    $default  reduce using rule 90 (parameter_list)


State 85

   28 primary_expression: IDENTIFIER •
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  147 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  148 access_list: IDENTIFIER •
  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER access_list
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    LANGLE             shift, and go to state 58
    RPAREN             shift, and go to state 128

    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 147 (pointer_dereference)]
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 147 (pointer_dereference)]
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 147 (pointer_dereference)]
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 147 (pointer_dereference)]
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 147 (pointer_dereference)]
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 147 (pointer_dereference)]
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 147 (pointer_dereference)]
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 147 (pointer_dereference)]
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 147 (pointer_dereference)]
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 147 (pointer_dereference)]
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 147 (pointer_dereference)]
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 147 (pointer_dereference)]
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RPAREN             [reduce using rule 28 (primary_expression)]
    RPAREN             [reduce using rule 147 (pointer_dereference)]
    RPAREN             [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)


State 86

   41 expression: expression OP_ASSIGN • assing_value

    OP_DEREF_POINTER  shift, and go to state 98
    LPAREN            shift, and go to state 99
    IDENTIFIER        shift, and go to state 100

    assing_value               go to state 106
    vector_access              go to state 102
    pointer_statement          go to state 103
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 104
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 87

   34 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 34 (primary_expression)


State 88

   26 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON •

    $default  reduce using rule 26 (import_statement)


State 89

  148 access_list: IDENTIFIER •

    $default  reduce using rule 148 (access_list)


State 90

  149 access_list: access_list • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER access_list •

    $default  reduce using rule 152 (member_access_pointer)


State 91

   86 type_specifier: OP_DEREF_POINTER • type_specifier

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    OP_DEREF_POINTER  shift, and go to state 91
    IDENTIFIER        shift, and go to state 60

    type_specifier  go to state 129


State 92

   86 type_specifier: OP_DEREF_POINTER type_specifier •
  144 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 130

    SEMICOLON  [reduce using rule 86 (type_specifier)]
    $default   reduce using rule 86 (type_specifier)


State 93

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
  138 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RANGLE             shift, and go to state 131


State 94

    9 alchemia_statement: IDENTIFIER LPAREN RPAREN • KW_MAIN block

    KW_MAIN  shift, and go to state 132


State 95

   85 type_specifier: IDENTIFIER KW_ENUMERARE •

    $default  reduce using rule 85 (type_specifier)


State 96

   72 opcional_constant: KW_MOL •

    $default  reduce using rule 72 (opcional_constant)


State 97

   69 declaration_statement: IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 133


State 98

  147 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 134


State 99

  151 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list

    OP_DEREF_POINTER  shift, and go to state 135


State 100

   66 assing_value: IDENTIFIER •
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    LANGLE             shift, and go to state 58

    KW_REDIRE          reduce using rule 66 (assing_value)
    KW_REDIRE          [reduce using rule 148 (access_list)]
    OP_ACCESS_POINTER  [reduce using rule 66 (assing_value)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 66 (assing_value)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 66 (assing_value)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 66 (assing_value)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 66 (assing_value)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 66 (assing_value)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 66 (assing_value)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 66 (assing_value)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 66 (assing_value)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 66 (assing_value)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 66 (assing_value)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 66 (assing_value)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 66 (assing_value)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 66 (assing_value)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 66 (assing_value)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 66 (assing_value)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 66 (assing_value)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 66 (assing_value)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 66 (assing_value)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RANGLE             reduce using rule 66 (assing_value)
    RANGLE             [reduce using rule 148 (access_list)]
    COLON              reduce using rule 66 (assing_value)
    COLON              [reduce using rule 148 (access_list)]
    RPAREN             reduce using rule 66 (assing_value)
    RPAREN             [reduce using rule 148 (access_list)]
    RBRACKET           reduce using rule 66 (assing_value)
    RBRACKET           [reduce using rule 148 (access_list)]
    PIPE               reduce using rule 66 (assing_value)
    PIPE               [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 66 (assing_value)
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 66 (assing_value)


State 101

   42 expression: expression OP_ACCESS_POINTER assing_value •

    $default  reduce using rule 42 (expression)


State 102

   67 assing_value: vector_access •

    $default  reduce using rule 67 (assing_value)


State 103

   68 assing_value: pointer_statement •

    $default  reduce using rule 68 (assing_value)


State 104

  141 pointer_statement: member_access_direct •

    $default  reduce using rule 141 (pointer_statement)


State 105

   66 assing_value: IDENTIFIER •
   70 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  145 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    TYPE_ATOMUS        shift, and go to state 46
    TYPE_FRACTIO       shift, and go to state 47
    TYPE_FRAGMENTUM    shift, and go to state 48
    TYPE_MAGNUS        shift, and go to state 49
    TYPE_MINIMUS       shift, and go to state 50
    TYPE_QUANTUM       shift, and go to state 51
    TYPE_SCRIPTUM      shift, and go to state 52
    TYPE_SYMBOLUM      shift, and go to state 53
    TYPE_VACUUM        shift, and go to state 54
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    OP_DEREF_POINTER   shift, and go to state 136
    LANGLE             shift, and go to state 58
    IDENTIFIER         shift, and go to state 60

    OP_ACCESS_POINTER  [reduce using rule 66 (assing_value)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 66 (assing_value)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 66 (assing_value)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 66 (assing_value)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 66 (assing_value)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 66 (assing_value)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 66 (assing_value)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 66 (assing_value)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 66 (assing_value)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 66 (assing_value)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 66 (assing_value)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 66 (assing_value)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 66 (assing_value)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 66 (assing_value)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 66 (assing_value)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 66 (assing_value)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 66 (assing_value)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 66 (assing_value)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 66 (assing_value)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RPAREN             reduce using rule 66 (assing_value)
    RPAREN             [reduce using rule 148 (access_list)]
    PIPE               reduce using rule 66 (assing_value)
    PIPE               [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 66 (assing_value)
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 66 (assing_value)

    type_specifier  go to state 137


State 106

   41 expression: expression OP_ASSIGN assing_value •

    $default  reduce using rule 41 (expression)


State 107

   52 expression: expression OP_GREATER_EQUAL unary_expression •

    $default  reduce using rule 52 (expression)


State 108

   51 expression: expression OP_LESS_EQUAL unary_expression •

    $default  reduce using rule 51 (expression)


State 109

   47 expression: expression OP_EQUAL unary_expression •

    $default  reduce using rule 47 (expression)


State 110

   48 expression: expression OP_NOT_EQUAL unary_expression •

    $default  reduce using rule 48 (expression)


State 111

   59 expression: expression OP_INTEGER_DIVIDE unary_expression •

    $default  reduce using rule 59 (expression)


State 112

   58 expression: expression OP_EXP unary_expression •

    $default  reduce using rule 58 (expression)


State 113

   46 expression: expression OP_LOGICAL_AND unary_expression •

    $default  reduce using rule 46 (expression)


State 114

   45 expression: expression OP_LOGICAL_OR unary_expression •

    $default  reduce using rule 45 (expression)


State 115

   55 expression: expression OP_MULTIPLY unary_expression •

    $default  reduce using rule 55 (expression)


State 116

   53 expression: expression OP_ADD unary_expression •

    $default  reduce using rule 53 (expression)


State 117

   54 expression: expression OP_SUBTRACT unary_expression •

    $default  reduce using rule 54 (expression)


State 118

   56 expression: expression OP_DIVIDE unary_expression •

    $default  reduce using rule 56 (expression)


State 119

   57 expression: expression OP_MODULUS unary_expression •

    $default  reduce using rule 57 (expression)


State 120

   43 expression: expression OP_ACCESS_MEMBER assing_value •

    $default  reduce using rule 43 (expression)


State 121

   50 expression: expression OP_GREATER_THAN unary_expression •

    $default  reduce using rule 50 (expression)


State 122

   49 expression: expression OP_LESS_THAN unary_expression •

    $default  reduce using rule 49 (expression)


State 123

   44 expression: expression OP_LOGICAL_XOR unary_expression •

    $default  reduce using rule 44 (expression)


State 124

  149 access_list: access_list OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 149 (access_list)


State 125

   92 parameter: IDENTIFIER type_specifier •

    $default  reduce using rule 92 (parameter)


State 126

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN • IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 138


State 127

   91 parameter_list: parameter_list PIPE • parameter

    IDENTIFIER  shift, and go to state 82

    parameter  go to state 139


State 128

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN • OP_ACCESS_MEMBER access_list

    OP_ACCESS_MEMBER  shift, and go to state 140


State 129

   86 type_specifier: OP_DEREF_POINTER type_specifier •

    $default  reduce using rule 86 (type_specifier)


State 130

  144 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 144 (pointer_declaration)


State 131

  138 vector_access: IDENTIFIER LANGLE expression RANGLE •

    $default  reduce using rule 138 (vector_access)


State 132

    9 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN • block

    LBRACE  shift, and go to state 141

    block  go to state 142


State 133

   69 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 69 (declaration_statement)


State 134

  147 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •

    $default  reduce using rule 147 (pointer_dereference)


State 135

  151 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list

    IDENTIFIER  shift, and go to state 143


State 136

   86 type_specifier: OP_DEREF_POINTER • type_specifier
  145 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    OP_DEREF_POINTER  shift, and go to state 91
    IDENTIFIER        shift, and go to state 60

    type_specifier  go to state 144


State 137

   70 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 96

    $default  reduce using rule 73 (opcional_constant)

    opcional_constant  go to state 145


State 138

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER • OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    OP_ASSIGN  shift, and go to state 146


State 139

   91 parameter_list: parameter_list PIPE parameter •

    $default  reduce using rule 91 (parameter_list)


State 140

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER • access_list

    IDENTIFIER  shift, and go to state 89

    access_list  go to state 147


State 141

    8 block: LBRACE • $@1 statement_list RBRACE

    $default  reduce using rule 7 ($@1)

    $@1  go to state 148


State 142

    9 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN block •

    $default  reduce using rule 9 (alchemia_statement)


State 143

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER access_list

    RPAREN  shift, and go to state 128


State 144

   86 type_specifier: OP_DEREF_POINTER type_specifier •
  145 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 149

    SEMICOLON  [reduce using rule 86 (type_specifier)]
    $default   reduce using rule 86 (type_specifier)


State 145

   70 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 150


State 146

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN • type_specifier $@2 LBRACE statement_list RBRACE

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    OP_DEREF_POINTER  shift, and go to state 91
    IDENTIFIER        shift, and go to state 60

    type_specifier  go to state 151


State 147

  149 access_list: access_list • OP_ACCESS_MEMBER IDENTIFIER
  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list •

    $default  reduce using rule 151 (member_access_dereference)


State 148

    8 block: LBRACE $@1 • statement_list RBRACE

    $default  reduce using rule 10 (statement_list)

    statement_list  go to state 152


State 149

  145 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 145 (pointer_declaration)


State 150

   70 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 70 (declaration_statement)


State 151

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier • $@2 LBRACE statement_list RBRACE

    $default  reduce using rule 87 ($@2)

    $@2  go to state 153


State 152

    8 block: LBRACE $@1 statement_list • RBRACE
   11 statement_list: statement_list • statement

    KW_CASUS          shift, and go to state 154
    KW_AXIOM          shift, and go to state 155
    KW_CONTINUUM      shift, and go to state 156
    KW_RUPTIO         shift, and go to state 157
    KW_DESIGNARE      shift, and go to state 158
    KW_REDIRE         shift, and go to state 159
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 160
    LBRACKET          shift, and go to state 161
    RBRACE            shift, and go to state 162
    IDENTIFIER        shift, and go to state 163

    statement                  go to state 164
    assignment_statement       go to state 165
    expression_statement       go to state 166
    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 167
    constant                   go to state 23
    string                     go to state 24
    declaration_statement      go to state 168
    function_call_statement    go to state 169
    jump_statement             go to state 170
    conditional_statement      go to state 171
    causal_statement           go to state 172
    iteration_statement        go to state 173
    io_functions               go to state 174
    function_input_output      go to state 175
    identifier_langle_list     go to state 176
    identifier_rangle_list     go to state 177
    function_magnitudo         go to state 178
    type_define_statement      go to state 179
    type_define_enum           go to state 180
    enum_assignment            go to state 181
    vector_statement           go to state 182
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_declaration        go to state 29
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 153

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 • LBRACE statement_list RBRACE

    LBRACE  shift, and go to state 183


State 154

  107 causal_statement: KW_CASUS • expression COLON statement_list

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 184
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 155

  108 causal_statement: KW_AXIOM • COLON statement_list

    COLON  shift, and go to state 185


State 156

   96 jump_statement: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 186


State 157

   97 jump_statement: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 187


State 158

  124 type_define_statement: KW_DESIGNARE • type_specifier IDENTIFIER SEMICOLON

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    OP_DEREF_POINTER  shift, and go to state 91
    IDENTIFIER        shift, and go to state 60

    type_specifier  go to state 188


State 159

   98 jump_statement: KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 189


State 160

   34 primary_expression: LPAREN • expression RPAREN
   93 function_call_statement: LPAREN • argument_list RPAREN IDENTIFIER SEMICOLON
  100 conditional_statement: LPAREN • expression RPAREN KW_SI block
  102                      | LPAREN • expression RPAREN KW_SI block $@3 conditional_non_statement
  104                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  109 iteration_statement: LPAREN • expression RPAREN KW_PERSISTO block
  110                    | LPAREN • expression_statement expression_statement RPAREN KW_ITERARE block
  111                    | LPAREN • expression_statement expression_statement expression RPAREN KW_ITERARE block
  112                    | LPAREN • declaration_statement expression_statement RPAREN KW_ITERARE block
  113                    | LPAREN • declaration_statement expression_statement expression RPAREN KW_ITERARE block
  122 function_magnitudo: LPAREN • type_expression RPAREN KW_MAGNITUDO SEMICOLON
  151 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 190
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 191

    expression_statement       go to state 192
    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 193
    constant                   go to state 23
    string                     go to state 24
    declaration_statement      go to state 194
    type_specifier             go to state 195
    argument_list              go to state 196
    type_expression            go to state 197
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_declaration        go to state 29
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 161

  137 vector_statement: LBRACKET • argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 198
    constant                   go to state 23
    string                     go to state 24
    argument_list              go to state 199
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 162

    8 block: LBRACE $@1 statement_list RBRACE •

    $default  reduce using rule 8 (block)


State 163

   28 primary_expression: IDENTIFIER •
   69 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  118 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  119                       | IDENTIFIER • LANGLE identifier_langle_list
  120 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  121                       | IDENTIFIER • RANGLE identifier_rangle_list
  126 type_define_statement: IDENTIFIER • LBRACE $@5 list_declaration_statement RBRACE KW_DESIGNARE KW_HOMUNCULUS SEMICOLON
  128 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  129 enum_assignment: IDENTIFIER • OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON
  136 vector_statement: IDENTIFIER • type_specifier LANGLE expression RANGLE SEMICOLON
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  144 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    TYPE_ATOMUS        shift, and go to state 46
    TYPE_FRACTIO       shift, and go to state 47
    TYPE_FRAGMENTUM    shift, and go to state 48
    TYPE_MAGNUS        shift, and go to state 49
    TYPE_MINIMUS       shift, and go to state 50
    TYPE_QUANTUM       shift, and go to state 51
    TYPE_SCRIPTUM      shift, and go to state 52
    TYPE_SYMBOLUM      shift, and go to state 53
    TYPE_VACUUM        shift, and go to state 54
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ASSIGN          shift, and go to state 200
    OP_ADDR_OF         shift, and go to state 56
    OP_DEREF_POINTER   shift, and go to state 57
    LANGLE             shift, and go to state 201
    RANGLE             shift, and go to state 202
    LBRACE             shift, and go to state 203
    IDENTIFIER         shift, and go to state 60

    KW_REDIRE          reduce using rule 28 (primary_expression)
    KW_REDIRE          [reduce using rule 148 (access_list)]
    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          [reduce using rule 28 (primary_expression)]
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 28 (primary_expression)
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)

    type_specifier  go to state 204


State 164

   11 statement_list: statement_list statement •

    $default  reduce using rule 11 (statement_list)


State 165

   23 statement: assignment_statement •

    $default  reduce using rule 23 (statement)


State 166

   12 statement: expression_statement •

    $default  reduce using rule 12 (statement)


State 167

   24 assignment_statement: expression • OP_ASSIGN IDENTIFIER SEMICOLON
   25                     | expression • OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   27 expression_statement: expression • SEMICOLON
   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
   70 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   99 jump_statement: expression • KW_REDIRE SEMICOLON
  145 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    KW_REDIRE          shift, and go to state 205
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 206
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    SEMICOLON          shift, and go to state 207


State 168

   15 statement: declaration_statement •

    $default  reduce using rule 15 (statement)


State 169

   16 statement: function_call_statement •

    $default  reduce using rule 16 (statement)


State 170

   20 statement: jump_statement •

    $default  reduce using rule 20 (statement)


State 171

   17 statement: conditional_statement •

    $default  reduce using rule 17 (statement)


State 172

   21 statement: causal_statement •

    $default  reduce using rule 21 (statement)


State 173

   13 statement: iteration_statement •

    $default  reduce using rule 13 (statement)


State 174

   14 statement: io_functions •

    $default  reduce using rule 14 (statement)


State 175

  114 io_functions: function_input_output •

    $default  reduce using rule 114 (io_functions)


State 176

  116 function_input_output: identifier_langle_list •

    $default  reduce using rule 116 (function_input_output)


State 177

  117 function_input_output: identifier_rangle_list •

    $default  reduce using rule 117 (function_input_output)


State 178

  115 io_functions: function_magnitudo •

    $default  reduce using rule 115 (io_functions)


State 179

   18 statement: type_define_statement •

    $default  reduce using rule 18 (statement)


State 180

  127 type_define_statement: type_define_enum •

    $default  reduce using rule 127 (type_define_statement)


State 181

   22 statement: enum_assignment •

    $default  reduce using rule 22 (statement)


State 182

   19 statement: vector_statement •

    $default  reduce using rule 19 (statement)


State 183

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE • statement_list RBRACE

    $default  reduce using rule 10 (statement_list)

    statement_list  go to state 208


State 184

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
  107 causal_statement: KW_CASUS expression • COLON statement_list

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    COLON              shift, and go to state 209


State 185

  108 causal_statement: KW_AXIOM COLON • statement_list

    $default  reduce using rule 10 (statement_list)

    statement_list  go to state 210


State 186

   96 jump_statement: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 96 (jump_statement)


State 187

   97 jump_statement: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 97 (jump_statement)


State 188

  124 type_define_statement: KW_DESIGNARE type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 211


State 189

   98 jump_statement: KW_REDIRE SEMICOLON •

    $default  reduce using rule 98 (jump_statement)


State 190

   37 unary_expression: OP_DEREF_POINTER • unary_expression
   86 type_specifier: OP_DEREF_POINTER • type_specifier
  147 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  151 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER access_list

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 212
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 213

    primary_expression         go to state 20
    unary_expression           go to state 42
    constant                   go to state 23
    string                     go to state 24
    type_specifier             go to state 129
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 191

   28 primary_expression: IDENTIFIER •
   69 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
   85 type_specifier: IDENTIFIER • KW_ENUMERARE
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  144 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    KW_ENUMERARE       shift, and go to state 95
    TYPE_ATOMUS        shift, and go to state 46
    TYPE_FRACTIO       shift, and go to state 47
    TYPE_FRAGMENTUM    shift, and go to state 48
    TYPE_MAGNUS        shift, and go to state 49
    TYPE_MINIMUS       shift, and go to state 50
    TYPE_QUANTUM       shift, and go to state 51
    TYPE_SCRIPTUM      shift, and go to state 52
    TYPE_SYMBOLUM      shift, and go to state 53
    TYPE_VACUUM        shift, and go to state 54
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    OP_DEREF_POINTER   shift, and go to state 57
    LANGLE             shift, and go to state 58
    IDENTIFIER         shift, and go to state 60

    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RPAREN             reduce using rule 28 (primary_expression)
    RPAREN             [reduce using rule 148 (access_list)]
    PIPE               reduce using rule 28 (primary_expression)
    PIPE               [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 28 (primary_expression)
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)

    type_specifier  go to state 61


State 192

  110 iteration_statement: LPAREN expression_statement • expression_statement RPAREN KW_ITERARE block
  111                    | LPAREN expression_statement • expression_statement expression RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    expression_statement       go to state 214
    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 215
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 193

   27 expression_statement: expression • SEMICOLON
   34 primary_expression: LPAREN expression • RPAREN
   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
   70 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   94 argument_list: expression •
  100 conditional_statement: LPAREN expression • RPAREN KW_SI block
  102                      | LPAREN expression • RPAREN KW_SI block $@3 conditional_non_statement
  104                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  109 iteration_statement: LPAREN expression • RPAREN KW_PERSISTO block
  145 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 63
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RPAREN             shift, and go to state 216
    SEMICOLON          shift, and go to state 207

    RPAREN    [reduce using rule 94 (argument_list)]
    $default  reduce using rule 94 (argument_list)


State 194

  112 iteration_statement: LPAREN declaration_statement • expression_statement RPAREN KW_ITERARE block
  113                    | LPAREN declaration_statement • expression_statement expression RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    expression_statement       go to state 217
    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 215
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 195

  123 type_expression: type_specifier •

    $default  reduce using rule 123 (type_expression)


State 196

   93 function_call_statement: LPAREN argument_list • RPAREN IDENTIFIER SEMICOLON
   95 argument_list: argument_list • PIPE expression

    RPAREN  shift, and go to state 218
    PIPE    shift, and go to state 219


State 197

  122 function_magnitudo: LPAREN type_expression • RPAREN KW_MAGNITUDO SEMICOLON

    RPAREN  shift, and go to state 220


State 198

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
   94 argument_list: expression •

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80

    $default  reduce using rule 94 (argument_list)


State 199

   95 argument_list: argument_list • PIPE expression
  137 vector_statement: LBRACKET argument_list • RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    RBRACKET  shift, and go to state 221
    PIPE      shift, and go to state 219


State 200

  129 enum_assignment: IDENTIFIER OP_ASSIGN • IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 222


State 201

  118 identifier_langle_list: IDENTIFIER LANGLE • KW_LECTURA SEMICOLON
  119                       | IDENTIFIER LANGLE • identifier_langle_list
  138 vector_access: IDENTIFIER LANGLE • expression RANGLE

    KW_LECTURA        shift, and go to state 223
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 224

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 93
    constant                   go to state 23
    string                     go to state 24
    identifier_langle_list     go to state 225
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 202

  120 identifier_rangle_list: IDENTIFIER RANGLE • KW_REVELARE SEMICOLON
  121                       | IDENTIFIER RANGLE • identifier_rangle_list

    KW_REVELARE  shift, and go to state 226
    IDENTIFIER   shift, and go to state 227

    identifier_rangle_list  go to state 228


State 203

  126 type_define_statement: IDENTIFIER LBRACE • $@5 list_declaration_statement RBRACE KW_DESIGNARE KW_HOMUNCULUS SEMICOLON
  128 type_define_enum: IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 229

    IDENTIFIER  [reduce using rule 125 ($@5)]
    $default    reduce using rule 125 ($@5)

    $@5        go to state 230
    enum_list  go to state 231


State 204

   69 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON
  136 vector_statement: IDENTIFIER type_specifier • LANGLE expression RANGLE SEMICOLON

    KW_MOL  shift, and go to state 96
    LANGLE  shift, and go to state 232

    $default  reduce using rule 73 (opcional_constant)

    opcional_constant  go to state 97


State 205

   99 jump_statement: expression KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 233


State 206

   24 assignment_statement: expression OP_ASSIGN • IDENTIFIER SEMICOLON
   25                     | expression OP_ASSIGN • IDENTIFIER LANGLE expression RANGLE SEMICOLON
   41 expression: expression OP_ASSIGN • assing_value
   70 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  145 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_DEREF_POINTER  shift, and go to state 98
    LPAREN            shift, and go to state 99
    IDENTIFIER        shift, and go to state 234

    assing_value               go to state 106
    vector_access              go to state 102
    pointer_statement          go to state 103
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 104
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 207

   27 expression_statement: expression SEMICOLON •

    $default  reduce using rule 27 (expression_statement)


State 208

   11 statement_list: statement_list • statement
   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list • RBRACE

    KW_CASUS          shift, and go to state 154
    KW_AXIOM          shift, and go to state 155
    KW_CONTINUUM      shift, and go to state 156
    KW_RUPTIO         shift, and go to state 157
    KW_DESIGNARE      shift, and go to state 158
    KW_REDIRE         shift, and go to state 159
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 160
    LBRACKET          shift, and go to state 161
    RBRACE            shift, and go to state 235
    IDENTIFIER        shift, and go to state 163

    statement                  go to state 164
    assignment_statement       go to state 165
    expression_statement       go to state 166
    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 167
    constant                   go to state 23
    string                     go to state 24
    declaration_statement      go to state 168
    function_call_statement    go to state 169
    jump_statement             go to state 170
    conditional_statement      go to state 171
    causal_statement           go to state 172
    iteration_statement        go to state 173
    io_functions               go to state 174
    function_input_output      go to state 175
    identifier_langle_list     go to state 176
    identifier_rangle_list     go to state 177
    function_magnitudo         go to state 178
    type_define_statement      go to state 179
    type_define_enum           go to state 180
    enum_assignment            go to state 181
    vector_statement           go to state 182
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_declaration        go to state 29
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 209

  107 causal_statement: KW_CASUS expression COLON • statement_list

    $default  reduce using rule 10 (statement_list)

    statement_list  go to state 236


State 210

   11 statement_list: statement_list • statement
  108 causal_statement: KW_AXIOM COLON statement_list •

    KW_CASUS          shift, and go to state 154
    KW_AXIOM          shift, and go to state 155
    KW_CONTINUUM      shift, and go to state 156
    KW_RUPTIO         shift, and go to state 157
    KW_DESIGNARE      shift, and go to state 158
    KW_REDIRE         shift, and go to state 159
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 160
    LBRACKET          shift, and go to state 161
    IDENTIFIER        shift, and go to state 163

    KW_CASUS          [reduce using rule 108 (causal_statement)]
    KW_AXIOM          [reduce using rule 108 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 108 (causal_statement)]
    KW_RUPTIO         [reduce using rule 108 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 108 (causal_statement)]
    KW_REDIRE         [reduce using rule 108 (causal_statement)]
    LIT_FACTUM        [reduce using rule 108 (causal_statement)]
    LIT_FICTUM        [reduce using rule 108 (causal_statement)]
    LIT_FLOAT         [reduce using rule 108 (causal_statement)]
    LIT_INT           [reduce using rule 108 (causal_statement)]
    LIT_CHAR          [reduce using rule 108 (causal_statement)]
    LIT_STRING        [reduce using rule 108 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 108 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 108 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 108 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 108 (causal_statement)]
    LPAREN            [reduce using rule 108 (causal_statement)]
    LBRACKET          [reduce using rule 108 (causal_statement)]
    IDENTIFIER        [reduce using rule 108 (causal_statement)]
    $default          reduce using rule 108 (causal_statement)

    statement                  go to state 164
    assignment_statement       go to state 165
    expression_statement       go to state 166
    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 167
    constant                   go to state 23
    string                     go to state 24
    declaration_statement      go to state 168
    function_call_statement    go to state 169
    jump_statement             go to state 170
    conditional_statement      go to state 171
    causal_statement           go to state 172
    iteration_statement        go to state 173
    io_functions               go to state 174
    function_input_output      go to state 175
    identifier_langle_list     go to state 176
    identifier_rangle_list     go to state 177
    function_magnitudo         go to state 178
    type_define_statement      go to state 179
    type_define_enum           go to state 180
    enum_assignment            go to state 181
    vector_statement           go to state 182
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_declaration        go to state 29
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 211

  124 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 237


State 212

   37 unary_expression: OP_DEREF_POINTER • unary_expression
   86 type_specifier: OP_DEREF_POINTER • type_specifier
  147 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    TYPE_ATOMUS       shift, and go to state 46
    TYPE_FRACTIO      shift, and go to state 47
    TYPE_FRAGMENTUM   shift, and go to state 48
    TYPE_MAGNUS       shift, and go to state 49
    TYPE_MINIMUS      shift, and go to state 50
    TYPE_QUANTUM      shift, and go to state 51
    TYPE_SCRIPTUM     shift, and go to state 52
    TYPE_SYMBOLUM     shift, and go to state 53
    TYPE_VACUUM       shift, and go to state 54
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 212
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 238

    primary_expression         go to state 20
    unary_expression           go to state 42
    constant                   go to state 23
    string                     go to state 24
    type_specifier             go to state 129
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 213

   28 primary_expression: IDENTIFIER •
   85 type_specifier: IDENTIFIER • KW_ENUMERARE
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  147 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  148 access_list: IDENTIFIER •
  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER access_list
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    KW_ENUMERARE       shift, and go to state 95
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    LANGLE             shift, and go to state 58
    RPAREN             shift, and go to state 128

    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 147 (pointer_dereference)]
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 147 (pointer_dereference)]
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 147 (pointer_dereference)]
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 147 (pointer_dereference)]
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 147 (pointer_dereference)]
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 147 (pointer_dereference)]
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 147 (pointer_dereference)]
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 147 (pointer_dereference)]
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 147 (pointer_dereference)]
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 147 (pointer_dereference)]
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 147 (pointer_dereference)]
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 147 (pointer_dereference)]
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RPAREN             [reduce using rule 28 (primary_expression)]
    RPAREN             [reduce using rule 147 (pointer_dereference)]
    RPAREN             [reduce using rule 148 (access_list)]
    PIPE               reduce using rule 28 (primary_expression)
    PIPE               [reduce using rule 147 (pointer_dereference)]
    PIPE               [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 28 (primary_expression)
    SEMICOLON          [reduce using rule 147 (pointer_dereference)]
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)


State 214

  110 iteration_statement: LPAREN expression_statement expression_statement • RPAREN KW_ITERARE block
  111                    | LPAREN expression_statement expression_statement • expression RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    RPAREN            shift, and go to state 239
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 240
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 215

   27 expression_statement: expression • SEMICOLON
   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    SEMICOLON          shift, and go to state 207


State 216

   34 primary_expression: LPAREN expression RPAREN •
  100 conditional_statement: LPAREN expression RPAREN • KW_SI block
  102                      | LPAREN expression RPAREN • KW_SI block $@3 conditional_non_statement
  104                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE
  109 iteration_statement: LPAREN expression RPAREN • KW_PERSISTO block

    KW_VERTERE   shift, and go to state 241
    KW_PERSISTO  shift, and go to state 242
    KW_SI        shift, and go to state 243

    $default  reduce using rule 34 (primary_expression)


State 217

  112 iteration_statement: LPAREN declaration_statement expression_statement • RPAREN KW_ITERARE block
  113                    | LPAREN declaration_statement expression_statement • expression RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    RPAREN            shift, and go to state 244
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 245
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 218

   93 function_call_statement: LPAREN argument_list RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 246


State 219

   95 argument_list: argument_list PIPE • expression

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 247
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 220

  122 function_magnitudo: LPAREN type_expression RPAREN • KW_MAGNITUDO SEMICOLON

    KW_MAGNITUDO  shift, and go to state 248


State 221

  137 vector_statement: LBRACKET argument_list RBRACKET • OP_ASSIGN IDENTIFIER SEMICOLON

    OP_ASSIGN  shift, and go to state 249


State 222

  129 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER • IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 250


State 223

  118 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 251


State 224

   28 primary_expression: IDENTIFIER •
  118 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  119                       | IDENTIFIER • LANGLE identifier_langle_list
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    LANGLE             shift, and go to state 201

    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RANGLE             reduce using rule 28 (primary_expression)
    RANGLE             [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)


State 225

  119 identifier_langle_list: IDENTIFIER LANGLE identifier_langle_list •

    $default  reduce using rule 119 (identifier_langle_list)


State 226

  120 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 252


State 227

  120 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  121                       | IDENTIFIER • RANGLE identifier_rangle_list

    RANGLE  shift, and go to state 202


State 228

  121 identifier_rangle_list: IDENTIFIER RANGLE identifier_rangle_list •

    $default  reduce using rule 121 (identifier_rangle_list)


State 229

  130 enum_list: IDENTIFIER •
  131          | IDENTIFIER • OP_ASSIGN LIT_INT
  132          | IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 253

    $default  reduce using rule 130 (enum_list)


State 230

  126 type_define_statement: IDENTIFIER LBRACE $@5 • list_declaration_statement RBRACE KW_DESIGNARE KW_HOMUNCULUS SEMICOLON

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 254

    primary_expression          go to state 20
    unary_expression            go to state 21
    expression                  go to state 22
    constant                    go to state 23
    string                      go to state 24
    declaration_statement       go to state 255
    list_declaration_statement  go to state 256
    vector_access               go to state 27
    pointer_statement           go to state 28
    pointer_declaration         go to state 29
    pointer_assignment          go to state 30
    pointer_dereference         go to state 31
    access_list                 go to state 32
    member_access_direct        go to state 33
    member_access_dereference   go to state 34
    member_access_pointer       go to state 35


State 231

  128 type_define_enum: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
  133 enum_list: enum_list • PIPE IDENTIFIER
  134          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_INT
  135          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

    RBRACE  shift, and go to state 257
    PIPE    shift, and go to state 258


State 232

  136 vector_statement: IDENTIFIER type_specifier LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 259
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 233

   99 jump_statement: expression KW_REDIRE SEMICOLON •

    $default  reduce using rule 99 (jump_statement)


State 234

   24 assignment_statement: expression OP_ASSIGN IDENTIFIER • SEMICOLON
   25                     | expression OP_ASSIGN IDENTIFIER • LANGLE expression RANGLE SEMICOLON
   66 assing_value: IDENTIFIER •
   70 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  145 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    TYPE_ATOMUS        shift, and go to state 46
    TYPE_FRACTIO       shift, and go to state 47
    TYPE_FRAGMENTUM    shift, and go to state 48
    TYPE_MAGNUS        shift, and go to state 49
    TYPE_MINIMUS       shift, and go to state 50
    TYPE_QUANTUM       shift, and go to state 51
    TYPE_SCRIPTUM      shift, and go to state 52
    TYPE_SYMBOLUM      shift, and go to state 53
    TYPE_VACUUM        shift, and go to state 54
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    OP_DEREF_POINTER   shift, and go to state 136
    LANGLE             shift, and go to state 260
    SEMICOLON          shift, and go to state 261
    IDENTIFIER         shift, and go to state 60

    KW_REDIRE          reduce using rule 66 (assing_value)
    KW_REDIRE          [reduce using rule 148 (access_list)]
    OP_ACCESS_POINTER  [reduce using rule 66 (assing_value)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 66 (assing_value)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 66 (assing_value)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 66 (assing_value)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 66 (assing_value)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 66 (assing_value)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 66 (assing_value)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 66 (assing_value)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 66 (assing_value)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 66 (assing_value)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 66 (assing_value)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 66 (assing_value)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 66 (assing_value)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 66 (assing_value)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 66 (assing_value)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 66 (assing_value)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 66 (assing_value)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 66 (assing_value)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 66 (assing_value)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    SEMICOLON          [reduce using rule 66 (assing_value)]
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 66 (assing_value)

    type_specifier  go to state 137


State 235

   88 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE •

    $default  reduce using rule 88 (function_declaration_statement)


State 236

   11 statement_list: statement_list • statement
  107 causal_statement: KW_CASUS expression COLON statement_list •

    KW_CASUS          shift, and go to state 154
    KW_AXIOM          shift, and go to state 155
    KW_CONTINUUM      shift, and go to state 156
    KW_RUPTIO         shift, and go to state 157
    KW_DESIGNARE      shift, and go to state 158
    KW_REDIRE         shift, and go to state 159
    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 160
    LBRACKET          shift, and go to state 161
    IDENTIFIER        shift, and go to state 163

    KW_CASUS          [reduce using rule 107 (causal_statement)]
    KW_AXIOM          [reduce using rule 107 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 107 (causal_statement)]
    KW_RUPTIO         [reduce using rule 107 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 107 (causal_statement)]
    KW_REDIRE         [reduce using rule 107 (causal_statement)]
    LIT_FACTUM        [reduce using rule 107 (causal_statement)]
    LIT_FICTUM        [reduce using rule 107 (causal_statement)]
    LIT_FLOAT         [reduce using rule 107 (causal_statement)]
    LIT_INT           [reduce using rule 107 (causal_statement)]
    LIT_CHAR          [reduce using rule 107 (causal_statement)]
    LIT_STRING        [reduce using rule 107 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 107 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 107 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 107 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 107 (causal_statement)]
    LPAREN            [reduce using rule 107 (causal_statement)]
    LBRACKET          [reduce using rule 107 (causal_statement)]
    IDENTIFIER        [reduce using rule 107 (causal_statement)]
    $default          reduce using rule 107 (causal_statement)

    statement                  go to state 164
    assignment_statement       go to state 165
    expression_statement       go to state 166
    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 167
    constant                   go to state 23
    string                     go to state 24
    declaration_statement      go to state 168
    function_call_statement    go to state 169
    jump_statement             go to state 170
    conditional_statement      go to state 171
    causal_statement           go to state 172
    iteration_statement        go to state 173
    io_functions               go to state 174
    function_input_output      go to state 175
    identifier_langle_list     go to state 176
    identifier_rangle_list     go to state 177
    function_magnitudo         go to state 178
    type_define_statement      go to state 179
    type_define_enum           go to state 180
    enum_assignment            go to state 181
    vector_statement           go to state 182
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_declaration        go to state 29
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 237

  124 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 124 (type_define_statement)


State 238

   28 primary_expression: IDENTIFIER •
   85 type_specifier: IDENTIFIER • KW_ENUMERARE
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  147 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    KW_ENUMERARE       shift, and go to state 95
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    LANGLE             shift, and go to state 58

    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 147 (pointer_dereference)]
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 147 (pointer_dereference)]
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 147 (pointer_dereference)]
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 147 (pointer_dereference)]
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 147 (pointer_dereference)]
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 147 (pointer_dereference)]
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 147 (pointer_dereference)]
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 147 (pointer_dereference)]
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 147 (pointer_dereference)]
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 147 (pointer_dereference)]
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 147 (pointer_dereference)]
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 147 (pointer_dereference)]
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 147 (pointer_dereference)]
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 147 (pointer_dereference)]
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 147 (pointer_dereference)]
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    RPAREN             reduce using rule 28 (primary_expression)
    RPAREN             [reduce using rule 147 (pointer_dereference)]
    RPAREN             [reduce using rule 148 (access_list)]
    PIPE               reduce using rule 28 (primary_expression)
    PIPE               [reduce using rule 147 (pointer_dereference)]
    PIPE               [reduce using rule 148 (access_list)]
    SEMICOLON          reduce using rule 28 (primary_expression)
    SEMICOLON          [reduce using rule 147 (pointer_dereference)]
    SEMICOLON          [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)


State 239

  110 iteration_statement: LPAREN expression_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 262


State 240

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
  111 iteration_statement: LPAREN expression_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RPAREN             shift, and go to state 263


State 241

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE • LBRACE $@4 causal_statement RBRACE

    LBRACE  shift, and go to state 264


State 242

  109 iteration_statement: LPAREN expression RPAREN KW_PERSISTO • block

    LBRACE  shift, and go to state 141

    block  go to state 265


State 243

  100 conditional_statement: LPAREN expression RPAREN KW_SI • block
  102                      | LPAREN expression RPAREN KW_SI • block $@3 conditional_non_statement

    LBRACE  shift, and go to state 141

    block  go to state 266


State 244

  112 iteration_statement: LPAREN declaration_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 267


State 245

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
  113 iteration_statement: LPAREN declaration_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RPAREN             shift, and go to state 268


State 246

   93 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 269


State 247

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
   95 argument_list: argument_list PIPE expression •

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80

    $default  reduce using rule 95 (argument_list)


State 248

  122 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO • SEMICOLON

    SEMICOLON  shift, and go to state 270


State 249

  137 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 271


State 250

  129 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 272


State 251

  118 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON •

    $default  reduce using rule 118 (identifier_langle_list)


State 252

  120 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON •

    $default  reduce using rule 120 (identifier_rangle_list)


State 253

  131 enum_list: IDENTIFIER OP_ASSIGN • LIT_INT
  132          | IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 273
    LIT_CHAR  shift, and go to state 274


State 254

   28 primary_expression: IDENTIFIER •
   69 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  138 vector_access: IDENTIFIER • LANGLE expression RANGLE
  144 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  146 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  148 access_list: IDENTIFIER •
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER access_list

    TYPE_ATOMUS        shift, and go to state 46
    TYPE_FRACTIO       shift, and go to state 47
    TYPE_FRAGMENTUM    shift, and go to state 48
    TYPE_MAGNUS        shift, and go to state 49
    TYPE_MINIMUS       shift, and go to state 50
    TYPE_QUANTUM       shift, and go to state 51
    TYPE_SCRIPTUM      shift, and go to state 52
    TYPE_SYMBOLUM      shift, and go to state 53
    TYPE_VACUUM        shift, and go to state 54
    OP_ACCESS_POINTER  shift, and go to state 55
    OP_ADDR_OF         shift, and go to state 56
    OP_DEREF_POINTER   shift, and go to state 57
    LANGLE             shift, and go to state 58
    IDENTIFIER         shift, and go to state 60

    OP_ACCESS_POINTER  [reduce using rule 28 (primary_expression)]
    OP_ACCESS_POINTER  [reduce using rule 148 (access_list)]
    OP_ASSIGN          reduce using rule 28 (primary_expression)
    OP_ASSIGN          [reduce using rule 148 (access_list)]
    OP_GREATER_EQUAL   reduce using rule 28 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 148 (access_list)]
    OP_LESS_EQUAL      reduce using rule 28 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 148 (access_list)]
    OP_EQUAL           reduce using rule 28 (primary_expression)
    OP_EQUAL           [reduce using rule 148 (access_list)]
    OP_NOT_EQUAL       reduce using rule 28 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 148 (access_list)]
    OP_INTEGER_DIVIDE  reduce using rule 28 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (access_list)]
    OP_EXP             reduce using rule 28 (primary_expression)
    OP_EXP             [reduce using rule 148 (access_list)]
    OP_LOGICAL_AND     reduce using rule 28 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 148 (access_list)]
    OP_LOGICAL_OR      reduce using rule 28 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 148 (access_list)]
    OP_MULTIPLY        reduce using rule 28 (primary_expression)
    OP_MULTIPLY        [reduce using rule 148 (access_list)]
    OP_ADD             reduce using rule 28 (primary_expression)
    OP_ADD             [reduce using rule 148 (access_list)]
    OP_SUBTRACT        reduce using rule 28 (primary_expression)
    OP_SUBTRACT        [reduce using rule 148 (access_list)]
    OP_DIVIDE          reduce using rule 28 (primary_expression)
    OP_DIVIDE          [reduce using rule 148 (access_list)]
    OP_MODULUS         reduce using rule 28 (primary_expression)
    OP_MODULUS         [reduce using rule 148 (access_list)]
    OP_ACCESS_MEMBER   reduce using rule 28 (primary_expression)
    OP_ACCESS_MEMBER   [reduce using rule 148 (access_list)]
    OP_GREATER_THAN    reduce using rule 28 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 148 (access_list)]
    OP_LESS_THAN       reduce using rule 28 (primary_expression)
    OP_LESS_THAN       [reduce using rule 148 (access_list)]
    OP_LOGICAL_XOR     reduce using rule 28 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 148 (access_list)]
    $default           reduce using rule 28 (primary_expression)

    type_specifier  go to state 61


State 255

   74 list_declaration_statement: declaration_statement • list_declaration_statement
   75                           | declaration_statement •

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 254

    $default  reduce using rule 75 (list_declaration_statement)

    primary_expression          go to state 20
    unary_expression            go to state 21
    expression                  go to state 22
    constant                    go to state 23
    string                      go to state 24
    declaration_statement       go to state 255
    list_declaration_statement  go to state 275
    vector_access               go to state 27
    pointer_statement           go to state 28
    pointer_declaration         go to state 29
    pointer_assignment          go to state 30
    pointer_dereference         go to state 31
    access_list                 go to state 32
    member_access_direct        go to state 33
    member_access_dereference   go to state 34
    member_access_pointer       go to state 35


State 256

  126 type_define_statement: IDENTIFIER LBRACE $@5 list_declaration_statement • RBRACE KW_DESIGNARE KW_HOMUNCULUS SEMICOLON

    RBRACE  shift, and go to state 276


State 257

  128 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 277


State 258

  133 enum_list: enum_list PIPE • IDENTIFIER
  134          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_INT
  135          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_CHAR

    IDENTIFIER  shift, and go to state 278


State 259

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
  136 vector_statement: IDENTIFIER type_specifier LANGLE expression • RANGLE SEMICOLON

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RANGLE             shift, and go to state 279


State 260

   25 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE • expression RANGLE SEMICOLON
  138 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 280
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 261

   24 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 24 (assignment_statement)


State 262

  110 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 141

    block  go to state 281


State 263

  111 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 282


State 264

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE • $@4 causal_statement RBRACE

    $default  reduce using rule 103 ($@4)

    $@4  go to state 283


State 265

  109 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block •

    $default  reduce using rule 109 (iteration_statement)


State 266

  100 conditional_statement: LPAREN expression RPAREN KW_SI block •
  102                      | LPAREN expression RPAREN KW_SI block • $@3 conditional_non_statement

    KW_NON    reduce using rule 101 ($@3)
    $default  reduce using rule 100 (conditional_statement)

    $@3  go to state 284


State 267

  112 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 141

    block  go to state 285


State 268

  113 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 286


State 269

   93 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 93 (function_call_statement)


State 270

  122 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON •

    $default  reduce using rule 122 (function_magnitudo)


State 271

  137 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 287


State 272

  129 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 288


State 273

  131 enum_list: IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 131 (enum_list)


State 274

  132 enum_list: IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 132 (enum_list)


State 275

   74 list_declaration_statement: declaration_statement list_declaration_statement •

    $default  reduce using rule 74 (list_declaration_statement)


State 276

  126 type_define_statement: IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE • KW_DESIGNARE KW_HOMUNCULUS SEMICOLON

    KW_DESIGNARE  shift, and go to state 289


State 277

  128 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 290


State 278

  133 enum_list: enum_list PIPE IDENTIFIER •
  134          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_INT
  135          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 291

    $default  reduce using rule 133 (enum_list)


State 279

  136 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 292


State 280

   25 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression • RANGLE SEMICOLON
   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
  138 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RANGLE             shift, and go to state 293


State 281

  110 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 110 (iteration_statement)


State 282

  111 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 141

    block  go to state 294


State 283

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 • causal_statement RBRACE

    KW_CASUS  shift, and go to state 154
    KW_AXIOM  shift, and go to state 155

    causal_statement  go to state 295


State 284

  102 conditional_statement: LPAREN expression RPAREN KW_SI block $@3 • conditional_non_statement

    KW_NON  shift, and go to state 296

    conditional_non_statement  go to state 297


State 285

  112 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 112 (iteration_statement)


State 286

  113 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 141

    block  go to state 298


State 287

  137 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 137 (vector_statement)


State 288

  129 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 129 (enum_assignment)


State 289

  126 type_define_statement: IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_DESIGNARE • KW_HOMUNCULUS SEMICOLON

    KW_HOMUNCULUS  shift, and go to state 299


State 290

  128 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 128 (type_define_enum)


State 291

  134 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_INT
  135          | enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 300
    LIT_CHAR  shift, and go to state 301


State 292

  136 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 136 (vector_statement)


State 293

   25 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE • SEMICOLON
  138 vector_access: IDENTIFIER LANGLE expression RANGLE •

    SEMICOLON  shift, and go to state 302

    SEMICOLON  [reduce using rule 138 (vector_access)]
    $default   reduce using rule 138 (vector_access)


State 294

  111 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 111 (iteration_statement)


State 295

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement • RBRACE

    RBRACE  shift, and go to state 303


State 296

  105 conditional_non_statement: KW_NON • block
  106                          | KW_NON • conditional_statement

    LPAREN  shift, and go to state 304
    LBRACE  shift, and go to state 141

    block                  go to state 305
    conditional_statement  go to state 306


State 297

  102 conditional_statement: LPAREN expression RPAREN KW_SI block $@3 conditional_non_statement •

    $default  reduce using rule 102 (conditional_statement)


State 298

  113 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 113 (iteration_statement)


State 299

  126 type_define_statement: IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_DESIGNARE KW_HOMUNCULUS • SEMICOLON

    SEMICOLON  shift, and go to state 307


State 300

  134 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 134 (enum_list)


State 301

  135 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 135 (enum_list)


State 302

   25 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 25 (assignment_statement)


State 303

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE •

    $default  reduce using rule 104 (conditional_statement)


State 304

  100 conditional_statement: LPAREN • expression RPAREN KW_SI block
  102                      | LPAREN • expression RPAREN KW_SI block $@3 conditional_non_statement
  104                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    LIT_FACTUM        shift, and go to state 5
    LIT_FICTUM        shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    LIT_INT           shift, and go to state 8
    LIT_CHAR          shift, and go to state 9
    LIT_STRING        shift, and go to state 10
    OP_SUBTRACT       shift, and go to state 11
    OP_LOGICAL_NOT    shift, and go to state 12
    OP_ADDR_OF        shift, and go to state 13
    OP_DEREF_POINTER  shift, and go to state 14
    LPAREN            shift, and go to state 15
    IDENTIFIER        shift, and go to state 37

    primary_expression         go to state 20
    unary_expression           go to state 21
    expression                 go to state 308
    constant                   go to state 23
    string                     go to state 24
    vector_access              go to state 27
    pointer_statement          go to state 28
    pointer_assignment         go to state 30
    pointer_dereference        go to state 31
    access_list                go to state 32
    member_access_direct       go to state 33
    member_access_dereference  go to state 34
    member_access_pointer      go to state 35


State 305

  105 conditional_non_statement: KW_NON block •

    $default  reduce using rule 105 (conditional_non_statement)


State 306

  106 conditional_non_statement: KW_NON conditional_statement •

    $default  reduce using rule 106 (conditional_non_statement)


State 307

  126 type_define_statement: IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_DESIGNARE KW_HOMUNCULUS SEMICOLON •

    $default  reduce using rule 126 (type_define_statement)


State 308

   41 expression: expression • OP_ASSIGN assing_value
   42           | expression • OP_ACCESS_POINTER assing_value
   43           | expression • OP_ACCESS_MEMBER assing_value
   44           | expression • OP_LOGICAL_XOR unary_expression
   45           | expression • OP_LOGICAL_OR unary_expression
   46           | expression • OP_LOGICAL_AND unary_expression
   47           | expression • OP_EQUAL unary_expression
   48           | expression • OP_NOT_EQUAL unary_expression
   49           | expression • OP_LESS_THAN unary_expression
   50           | expression • OP_GREATER_THAN unary_expression
   51           | expression • OP_LESS_EQUAL unary_expression
   52           | expression • OP_GREATER_EQUAL unary_expression
   53           | expression • OP_ADD unary_expression
   54           | expression • OP_SUBTRACT unary_expression
   55           | expression • OP_MULTIPLY unary_expression
   56           | expression • OP_DIVIDE unary_expression
   57           | expression • OP_MODULUS unary_expression
   58           | expression • OP_EXP unary_expression
   59           | expression • OP_INTEGER_DIVIDE unary_expression
  100 conditional_statement: LPAREN expression • RPAREN KW_SI block
  102                      | LPAREN expression • RPAREN KW_SI block $@3 conditional_non_statement
  104                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ASSIGN          shift, and go to state 86
    OP_GREATER_EQUAL   shift, and go to state 64
    OP_LESS_EQUAL      shift, and go to state 65
    OP_EQUAL           shift, and go to state 66
    OP_NOT_EQUAL       shift, and go to state 67
    OP_INTEGER_DIVIDE  shift, and go to state 68
    OP_EXP             shift, and go to state 69
    OP_LOGICAL_AND     shift, and go to state 70
    OP_LOGICAL_OR      shift, and go to state 71
    OP_MULTIPLY        shift, and go to state 72
    OP_ADD             shift, and go to state 73
    OP_SUBTRACT        shift, and go to state 74
    OP_DIVIDE          shift, and go to state 75
    OP_MODULUS         shift, and go to state 76
    OP_ACCESS_MEMBER   shift, and go to state 77
    OP_GREATER_THAN    shift, and go to state 78
    OP_LESS_THAN       shift, and go to state 79
    OP_LOGICAL_XOR     shift, and go to state 80
    RPAREN             shift, and go to state 309


State 309

  100 conditional_statement: LPAREN expression RPAREN • KW_SI block
  102                      | LPAREN expression RPAREN • KW_SI block $@3 conditional_non_statement
  104                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 241
    KW_SI       shift, and go to state 243
