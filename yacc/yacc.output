Nonterminals useless in grammar

    list_declaration_statement
    vector


Terminals unused in grammar

    KW_HOMUNCULUS
    KW_NON_SI
    LEX_ERROR


Rules useless in grammar

  146 list_declaration_statement: ε
  147                           | declaration_statement list_declaration_statement
  148                           | declaration_statement

  149 vector: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  150       | IDENTIFIER SEMICOLON


State 35 conflicts: 24 reduce/reduce
State 54 conflicts: 24 reduce/reduce
State 56 conflicts: 24 reduce/reduce
State 91 conflicts: 1 shift/reduce, 18 reduce/reduce
State 97 conflicts: 1 shift/reduce
State 156 conflicts: 1 shift/reduce
State 178 conflicts: 1 shift/reduce
State 206 conflicts: 1 shift/reduce
State 222 conflicts: 19 shift/reduce
State 224 conflicts: 1 shift/reduce, 20 reduce/reduce
State 242 conflicts: 1 shift/reduce
State 244 conflicts: 19 shift/reduce
State 245 conflicts: 20 reduce/reduce
State 285 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: global_statement_list alchemia_statement

    2 global_statement_list: ε
    3                      | global_statement_list global_statement

    4 global_statement: import_statement
    5                 | declaration_statement
    6                 | function_declaration_statement
    7                 | type_define_statement

    8 $@1: ε

    9 block: LBRACE $@1 statement_list RBRACE

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN block

   11 statement_list: ε
   12               | statement_list statement

   13 statement: expression_statement
   14          | iteration_statement
   15          | io_functions
   16          | declaration_statement
   17          | function_call_statement
   18          | conditional_statement
   19          | type_define_statement
   20          | vector_statement
   21          | jump_statement
   22          | causal_statement
   23          | enum_assignment
   24          | assignment_statement

   25 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON
   26                     | expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON

   27 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON

   28 expression_statement: expression SEMICOLON

   29 primary_expression: IDENTIFIER
   30                   | constant
   31                   | string
   32                   | LPAREN expression RPAREN
   33                   | vector_access
   34                   | member_access_direct
   35                   | pointer_statement

   36 unary_expression: primary_expression
   37                 | OP_LOGICAL_NOT unary_expression
   38                 | OP_DEREF_POINTER unary_expression
   39                 | OP_ADDR_OF unary_expression
   40                 | OP_SUBTRACT unary_expression

   41 expression: unary_expression
   42           | expression OP_ADD unary_expression
   43           | expression OP_SUBTRACT unary_expression
   44           | expression OP_MULTIPLY unary_expression
   45           | expression OP_DIVIDE unary_expression
   46           | expression OP_MODULUS unary_expression
   47           | expression OP_EXP unary_expression
   48           | expression OP_INTEGER_DIVIDE unary_expression
   49           | expression OP_EQUAL unary_expression
   50           | expression OP_NOT_EQUAL unary_expression
   51           | expression OP_LESS_THAN unary_expression
   52           | expression OP_GREATER_THAN unary_expression
   53           | expression OP_LESS_EQUAL unary_expression
   54           | expression OP_GREATER_EQUAL unary_expression
   55           | expression OP_LOGICAL_AND unary_expression
   56           | expression OP_LOGICAL_OR unary_expression
   57           | expression OP_LOGICAL_XOR unary_expression
   58           | expression OP_ASSIGN assing_value

   59 constant: LIT_INT
   60         | LIT_FLOAT
   61         | LIT_FACTUM
   62         | LIT_FICTUM
   63         | LIT_CHAR

   64 string: LIT_STRING

   65 assing_value: IDENTIFIER
   66             | vector_access
   67             | pointer_statement

   68 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON
   69                      | expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   70                      | pointer_declaration

   71 opcional_constant: KW_MOL
   72                  | ε

   73 type_specifier: KW_TYPE_ATOMUS
   74               | KW_TYPE_FRACTIO
   75               | KW_TYPE_FRAGMENTUM
   76               | KW_TYPE_MAGNUS
   77               | KW_TYPE_MINIMUS
   78               | KW_TYPE_QUANTUM
   79               | KW_TYPE_SCRIPTUM
   80               | KW_TYPE_SYMBOLUM
   81               | KW_TYPE_VACUUM
   82               | IDENTIFIER KW_ENUMERARE
   83               | OP_DEREF_POINTER type_specifier

   84 $@2: ε

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

   86 parameter_list: ε
   87               | parameter
   88               | parameter_list PIPE parameter

   89 parameter: IDENTIFIER type_specifier

   90 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON

   91 argument_list: expression
   92              | argument_list PIPE expression

   93 jump_statement: KW_CONTINUUM SEMICOLON
   94               | KW_RUPTIO SEMICOLON
   95               | KW_REDIRE SEMICOLON
   96               | expression KW_REDIRE SEMICOLON

   97 conditional_statement: LPAREN expression RPAREN KW_SI block

   98 $@3: ε

   99 conditional_statement: LPAREN expression RPAREN KW_SI block $@3 conditional_non_statement

  100 $@4: ε

  101 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

  102 conditional_non_statement: KW_NON block
  103                          | KW_NON conditional_statement

  104 causal_statement: KW_CASUS expression COLON statement_list
  105                 | KW_AXIOM COLON statement_list

  106 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block
  107                    | LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block
  108                    | LPAREN expression_statement expression_statement RPAREN KW_ITERARE block
  109                    | LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block
  110                    | LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block

  111 io_functions: function_input_output
  112             | function_magnitudo

  113 function_input_output: identifier_langle_list
  114                      | identifier_rangle_list

  115 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON
  116                       | IDENTIFIER LANGLE identifier_langle_list

  117 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON
  118                       | IDENTIFIER RANGLE identifier_rangle_list

  119 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON

  120 type_expression: type_specifier

  121 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON
  122                      | type_define_enum

  123 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

  124 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

  125 enum_list: IDENTIFIER
  126          | IDENTIFIER OP_ASSIGN LIT_INT
  127          | IDENTIFIER OP_ASSIGN LIT_CHAR
  128          | enum_list PIPE IDENTIFIER
  129          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT
  130          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

  131 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  132                 | LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

  133 vector_access: IDENTIFIER LANGLE expression RANGLE

  134 pointer_statement: pointer_assignment
  135                  | pointer_dereference
  136                  | member_access_direct
  137                  | member_access_dereference
  138                  | member_access_pointer

  139 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON
  140                    | expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

  141 pointer_assignment: OP_ADDR_OF IDENTIFIER

  142 pointer_dereference: OP_DEREF_POINTER IDENTIFIER

  143 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

  144 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

  145 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_MAIN (258) 10
    KW_CASUS (259) 104
    KW_AXIOM (260) 105
    KW_CONTINUUM (261) 93
    KW_RUPTIO (262) 94
    KW_VERTERE (263) 101
    KW_DESIGNARE (264) 121
    KW_ENUMERARE (265) 82 123 124
    KW_EVOCARE (266) 27
    KW_FORMULA (267) 85
    KW_HOMUNCULUS (268)
    KW_ITERARE (269) 107 108 109 110
    KW_LECTURA (270) 115
    KW_MAGNITUDO (271) 119
    KW_MOL (272) 71
    KW_NON_SI (273)
    KW_NON (274) 102 103
    KW_PERSISTO (275) 106
    KW_REDIRE (276) 95 96
    KW_REVELARE (277) 117
    KW_SI (278) 97 99
    KW_TYPE_ATOMUS (279) 73
    KW_TYPE_FRACTIO (280) 74
    KW_TYPE_FRAGMENTUM (281) 75
    KW_TYPE_MAGNUS (282) 76
    KW_TYPE_MINIMUS (283) 77
    KW_TYPE_QUANTUM (284) 78
    KW_TYPE_SCRIPTUM (285) 79
    KW_TYPE_SYMBOLUM (286) 80
    KW_TYPE_VACUUM (287) 81
    LIT_FACTUM (288) 61
    LIT_FICTUM (289) 62
    LIT_FLOAT <val_float> (290) 60
    LIT_INT <val_int> (291) 59 126 129
    LIT_CHAR <str> (292) 63 127 130
    LIT_STRING <str> (293) 64
    OP_ACCESS_POINTER (294) 145
    OP_ASSIGN (295) 25 26 58 69 85 124 126 127 129 130 132 140
    OP_GREATER_EQUAL (296) 54
    OP_LESS_EQUAL (297) 53
    OP_EQUAL (298) 49
    OP_NOT_EQUAL (299) 50
    OP_INTEGER_DIVIDE (300) 48
    OP_EXP (301) 47
    OP_LOGICAL_AND (302) 55
    OP_LOGICAL_OR (303) 56
    OP_MULTIPLY (304) 44
    OP_ADD (305) 42
    OP_SUBTRACT (306) 40 43
    OP_DIVIDE (307) 45
    OP_MODULUS (308) 46
    OP_ACCESS_MEMBER (309) 143 144
    OP_LOGICAL_NOT (310) 37
    OP_GREATER_THAN (311) 52
    OP_LESS_THAN (312) 51
    OP_LOGICAL_XOR (313) 57
    OP_ADDR_OF (314) 39 141
    OP_DEREF_POINTER (315) 38 83 139 140 142 144
    LANGLE (316) 26 115 116 131 133
    RANGLE (317) 26 117 118 131 133
    COLON (318) 104 105
    LPAREN (319) 10 32 85 90 97 99 101 106 107 108 109 110 119 144
    RPAREN (320) 10 32 85 90 97 99 101 106 107 108 109 110 119 144
    LBRACKET (321) 132
    RBRACKET (322) 132
    LBRACE (323) 9 85 101 123
    RBRACE (324) 9 85 101 123
    PIPE (325) 88 92 128 129 130
    SEMICOLON (326) 25 26 27 28 68 69 90 93 94 95 96 115 117 119 121 123 124 131 132 139 140
    IDENTIFIER <str> (327) 10 25 26 27 29 65 68 69 82 85 89 90 115 116 117 118 121 123 124 125 126 127 128 129 130 131 132 133 139 140 141 142 143 144 145
    LEX_ERROR (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    translation_unit (75)
        on left: 1
        on right: 0
    global_statement_list (76)
        on left: 2 3
        on right: 1 3
    global_statement (77)
        on left: 4 5 6 7
        on right: 3
    block <ptr> (78)
        on left: 9
        on right: 10 97 99 102 106 107 108 109 110
    $@1 (79)
        on left: 8
        on right: 9
    alchemia_statement (80)
        on left: 10
        on right: 1
    statement_list (81)
        on left: 11 12
        on right: 9 12 85 104 105
    statement (82)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24
        on right: 12
    assignment_statement (83)
        on left: 25 26
        on right: 24
    import_statement (84)
        on left: 27
        on right: 4
    expression_statement <expr> (85)
        on left: 28
        on right: 13 107 108 109 110
    primary_expression <expr> (86)
        on left: 29 30 31 32 33 34 35
        on right: 36
    unary_expression <expr> (87)
        on left: 36 37 38 39 40
        on right: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
    expression <expr> (88)
        on left: 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
        on right: 25 26 28 32 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 69 91 92 96 97 99 101 104 106 107 109 131 133 140
    constant <expr> (89)
        on left: 59 60 61 62 63
        on right: 30
    string <expr> (90)
        on left: 64
        on right: 31
    assing_value (91)
        on left: 65 66 67
        on right: 58
    declaration_statement <ptr> (92)
        on left: 68 69 70
        on right: 5 16 109 110
    opcional_constant (93)
        on left: 71 72
        on right: 68 69
    type_specifier <str> (94)
        on left: 73 74 75 76 77 78 79 80 81 82 83
        on right: 68 69 83 85 89 120 121 131 139 140
    function_declaration_statement (95)
        on left: 85
        on right: 6
    $@2 (96)
        on left: 84
        on right: 85
    parameter_list (97)
        on left: 86 87 88
        on right: 85 88
    parameter (98)
        on left: 89
        on right: 87 88
    function_call_statement (99)
        on left: 90
        on right: 17
    argument_list <arg_list> (100)
        on left: 91 92
        on right: 90 92 132
    jump_statement (101)
        on left: 93 94 95 96
        on right: 21
    conditional_statement (102)
        on left: 97 99 101
        on right: 18 103
    $@3 (103)
        on left: 98
        on right: 99
    $@4 (104)
        on left: 100
        on right: 101
    conditional_non_statement (105)
        on left: 102 103
        on right: 99
    causal_statement (106)
        on left: 104 105
        on right: 22 101
    iteration_statement (107)
        on left: 106 107 108 109 110
        on right: 14
    io_functions (108)
        on left: 111 112
        on right: 15
    function_input_output (109)
        on left: 113 114
        on right: 111
    identifier_langle_list (110)
        on left: 115 116
        on right: 113 116
    identifier_rangle_list (111)
        on left: 117 118
        on right: 114 118
    function_magnitudo (112)
        on left: 119
        on right: 112
    type_expression (113)
        on left: 120
        on right: 119
    type_define_statement (114)
        on left: 121 122
        on right: 7 19
    type_define_enum (115)
        on left: 123
        on right: 122
    enum_assignment (116)
        on left: 124
        on right: 23
    enum_list (117)
        on left: 125 126 127 128 129 130
        on right: 123 128 129 130
    vector_statement (118)
        on left: 131 132
        on right: 20
    vector_access <expr> (119)
        on left: 133
        on right: 33 66
    pointer_statement <expr> (120)
        on left: 134 135 136 137 138
        on right: 35 67
    pointer_declaration (121)
        on left: 139 140
        on right: 70
    pointer_assignment <expr> (122)
        on left: 141
        on right: 134
    pointer_dereference <expr> (123)
        on left: 142
        on right: 135
    member_access_direct <expr> (124)
        on left: 143
        on right: 34 136
    member_access_dereference <expr> (125)
        on left: 144
        on right: 137
    member_access_pointer <expr> (126)
        on left: 145
        on right: 138


State 0

    0 $accept: • translation_unit $end

    $default  reduce using rule 2 (global_statement_list)

    translation_unit       go to state 1
    global_statement_list  go to state 2


State 1

    0 $accept: translation_unit • $end

    $end  shift, and go to state 3


State 2

    1 translation_unit: global_statement_list • alchemia_statement
    3 global_statement_list: global_statement_list • global_statement

    KW_DESIGNARE      shift, and go to state 4
    KW_FORMULA        shift, and go to state 5
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 17

    global_statement                go to state 18
    alchemia_statement              go to state 19
    import_statement                go to state 20
    primary_expression              go to state 21
    unary_expression                go to state 22
    expression                      go to state 23
    constant                        go to state 24
    string                          go to state 25
    declaration_statement           go to state 26
    function_declaration_statement  go to state 27
    type_define_statement           go to state 28
    type_define_enum                go to state 29
    vector_access                   go to state 30
    pointer_statement               go to state 31
    pointer_declaration             go to state 32
    pointer_assignment              go to state 33
    pointer_dereference             go to state 34
    member_access_direct            go to state 35
    member_access_dereference       go to state 36
    member_access_pointer           go to state 37


State 3

    0 $accept: translation_unit $end •

    $default  accept


State 4

  121 type_define_statement: KW_DESIGNARE • type_specifier IDENTIFIER SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_DEREF_POINTER    shift, and go to state 47
    IDENTIFIER          shift, and go to state 48

    type_specifier  go to state 49


State 5

   85 function_declaration_statement: KW_FORMULA • LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    LPAREN  shift, and go to state 50


State 6

   61 constant: LIT_FACTUM •

    $default  reduce using rule 61 (constant)


State 7

   62 constant: LIT_FICTUM •

    $default  reduce using rule 62 (constant)


State 8

   60 constant: LIT_FLOAT •

    $default  reduce using rule 60 (constant)


State 9

   59 constant: LIT_INT •

    $default  reduce using rule 59 (constant)


State 10

   63 constant: LIT_CHAR •

    $default  reduce using rule 63 (constant)


State 11

   64 string: LIT_STRING •

    $default  reduce using rule 64 (string)


State 12

   40 unary_expression: OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 52
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 13

   37 unary_expression: OP_LOGICAL_NOT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 53
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 14

   39 unary_expression: OP_ADDR_OF • unary_expression
  141 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 54

    primary_expression         go to state 21
    unary_expression           go to state 55
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 15

   38 unary_expression: OP_DEREF_POINTER • unary_expression
  142 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 56

    primary_expression         go to state 21
    unary_expression           go to state 57
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 16

   32 primary_expression: LPAREN • expression RPAREN
  144 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 58
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 59
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 17

   10 alchemia_statement: IDENTIFIER • LPAREN RPAREN KW_MAIN block
   27 import_statement: IDENTIFIER • KW_EVOCARE SEMICOLON
   29 primary_expression: IDENTIFIER •
   68 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  123 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  139 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_EVOCARE          shift, and go to state 60
    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_ACCESS_POINTER   shift, and go to state 61
    OP_ACCESS_MEMBER    shift, and go to state 62
    OP_DEREF_POINTER    shift, and go to state 63
    LANGLE              shift, and go to state 64
    LPAREN              shift, and go to state 65
    LBRACE              shift, and go to state 66
    IDENTIFIER          shift, and go to state 48

    $default  reduce using rule 29 (primary_expression)

    type_specifier  go to state 67


State 18

    3 global_statement_list: global_statement_list global_statement •

    $default  reduce using rule 3 (global_statement_list)


State 19

    1 translation_unit: global_statement_list alchemia_statement •

    $default  reduce using rule 1 (translation_unit)


State 20

    4 global_statement: import_statement •

    $default  reduce using rule 4 (global_statement)


State 21

   36 unary_expression: primary_expression •

    $default  reduce using rule 36 (unary_expression)


State 22

   41 expression: unary_expression •

    $default  reduce using rule 41 (expression)


State 23

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
   69 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  140 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 68
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84


State 24

   30 primary_expression: constant •

    $default  reduce using rule 30 (primary_expression)


State 25

   31 primary_expression: string •

    $default  reduce using rule 31 (primary_expression)


State 26

    5 global_statement: declaration_statement •

    $default  reduce using rule 5 (global_statement)


State 27

    6 global_statement: function_declaration_statement •

    $default  reduce using rule 6 (global_statement)


State 28

    7 global_statement: type_define_statement •

    $default  reduce using rule 7 (global_statement)


State 29

  122 type_define_statement: type_define_enum •

    $default  reduce using rule 122 (type_define_statement)


State 30

   33 primary_expression: vector_access •

    $default  reduce using rule 33 (primary_expression)


State 31

   35 primary_expression: pointer_statement •

    $default  reduce using rule 35 (primary_expression)


State 32

   70 declaration_statement: pointer_declaration •

    $default  reduce using rule 70 (declaration_statement)


State 33

  134 pointer_statement: pointer_assignment •

    $default  reduce using rule 134 (pointer_statement)


State 34

  135 pointer_statement: pointer_dereference •

    $default  reduce using rule 135 (pointer_statement)


State 35

   34 primary_expression: member_access_direct •
  136 pointer_statement: member_access_direct •

    KW_REDIRE          reduce using rule 34 (primary_expression)
    KW_REDIRE          [reduce using rule 136 (pointer_statement)]
    OP_ASSIGN          reduce using rule 34 (primary_expression)
    OP_ASSIGN          [reduce using rule 136 (pointer_statement)]
    OP_GREATER_EQUAL   reduce using rule 34 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 136 (pointer_statement)]
    OP_LESS_EQUAL      reduce using rule 34 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 136 (pointer_statement)]
    OP_EQUAL           reduce using rule 34 (primary_expression)
    OP_EQUAL           [reduce using rule 136 (pointer_statement)]
    OP_NOT_EQUAL       reduce using rule 34 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 136 (pointer_statement)]
    OP_INTEGER_DIVIDE  reduce using rule 34 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 136 (pointer_statement)]
    OP_EXP             reduce using rule 34 (primary_expression)
    OP_EXP             [reduce using rule 136 (pointer_statement)]
    OP_LOGICAL_AND     reduce using rule 34 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 136 (pointer_statement)]
    OP_LOGICAL_OR      reduce using rule 34 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 136 (pointer_statement)]
    OP_MULTIPLY        reduce using rule 34 (primary_expression)
    OP_MULTIPLY        [reduce using rule 136 (pointer_statement)]
    OP_ADD             reduce using rule 34 (primary_expression)
    OP_ADD             [reduce using rule 136 (pointer_statement)]
    OP_SUBTRACT        reduce using rule 34 (primary_expression)
    OP_SUBTRACT        [reduce using rule 136 (pointer_statement)]
    OP_DIVIDE          reduce using rule 34 (primary_expression)
    OP_DIVIDE          [reduce using rule 136 (pointer_statement)]
    OP_MODULUS         reduce using rule 34 (primary_expression)
    OP_MODULUS         [reduce using rule 136 (pointer_statement)]
    OP_GREATER_THAN    reduce using rule 34 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 136 (pointer_statement)]
    OP_LESS_THAN       reduce using rule 34 (primary_expression)
    OP_LESS_THAN       [reduce using rule 136 (pointer_statement)]
    OP_LOGICAL_XOR     reduce using rule 34 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 136 (pointer_statement)]
    RANGLE             reduce using rule 34 (primary_expression)
    RANGLE             [reduce using rule 136 (pointer_statement)]
    COLON              reduce using rule 34 (primary_expression)
    COLON              [reduce using rule 136 (pointer_statement)]
    RPAREN             reduce using rule 34 (primary_expression)
    RPAREN             [reduce using rule 136 (pointer_statement)]
    RBRACKET           reduce using rule 34 (primary_expression)
    RBRACKET           [reduce using rule 136 (pointer_statement)]
    PIPE               reduce using rule 34 (primary_expression)
    PIPE               [reduce using rule 136 (pointer_statement)]
    SEMICOLON          reduce using rule 34 (primary_expression)
    SEMICOLON          [reduce using rule 136 (pointer_statement)]
    $default           reduce using rule 34 (primary_expression)


State 36

  137 pointer_statement: member_access_dereference •

    $default  reduce using rule 137 (pointer_statement)


State 37

  138 pointer_statement: member_access_pointer •

    $default  reduce using rule 138 (pointer_statement)


State 38

   73 type_specifier: KW_TYPE_ATOMUS •

    $default  reduce using rule 73 (type_specifier)


State 39

   74 type_specifier: KW_TYPE_FRACTIO •

    $default  reduce using rule 74 (type_specifier)


State 40

   75 type_specifier: KW_TYPE_FRAGMENTUM •

    $default  reduce using rule 75 (type_specifier)


State 41

   76 type_specifier: KW_TYPE_MAGNUS •

    $default  reduce using rule 76 (type_specifier)


State 42

   77 type_specifier: KW_TYPE_MINIMUS •

    $default  reduce using rule 77 (type_specifier)


State 43

   78 type_specifier: KW_TYPE_QUANTUM •

    $default  reduce using rule 78 (type_specifier)


State 44

   79 type_specifier: KW_TYPE_SCRIPTUM •

    $default  reduce using rule 79 (type_specifier)


State 45

   80 type_specifier: KW_TYPE_SYMBOLUM •

    $default  reduce using rule 80 (type_specifier)


State 46

   81 type_specifier: KW_TYPE_VACUUM •

    $default  reduce using rule 81 (type_specifier)


State 47

   83 type_specifier: OP_DEREF_POINTER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_DEREF_POINTER    shift, and go to state 47
    IDENTIFIER          shift, and go to state 48

    type_specifier  go to state 85


State 48

   82 type_specifier: IDENTIFIER • KW_ENUMERARE

    KW_ENUMERARE  shift, and go to state 86


State 49

  121 type_define_statement: KW_DESIGNARE type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 87


State 50

   85 function_declaration_statement: KW_FORMULA LPAREN • parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 88

    $default  reduce using rule 86 (parameter_list)

    parameter_list  go to state 89
    parameter       go to state 90


State 51

   29 primary_expression: IDENTIFIER •
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 64

    $default  reduce using rule 29 (primary_expression)


State 52

   40 unary_expression: OP_SUBTRACT unary_expression •

    $default  reduce using rule 40 (unary_expression)


State 53

   37 unary_expression: OP_LOGICAL_NOT unary_expression •

    $default  reduce using rule 37 (unary_expression)


State 54

   29 primary_expression: IDENTIFIER •
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  141 pointer_assignment: OP_ADDR_OF IDENTIFIER •
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 64

    KW_REDIRE          reduce using rule 29 (primary_expression)
    KW_REDIRE          [reduce using rule 141 (pointer_assignment)]
    OP_ASSIGN          reduce using rule 29 (primary_expression)
    OP_ASSIGN          [reduce using rule 141 (pointer_assignment)]
    OP_GREATER_EQUAL   reduce using rule 29 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 141 (pointer_assignment)]
    OP_LESS_EQUAL      reduce using rule 29 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 141 (pointer_assignment)]
    OP_EQUAL           reduce using rule 29 (primary_expression)
    OP_EQUAL           [reduce using rule 141 (pointer_assignment)]
    OP_NOT_EQUAL       reduce using rule 29 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 141 (pointer_assignment)]
    OP_INTEGER_DIVIDE  reduce using rule 29 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 141 (pointer_assignment)]
    OP_EXP             reduce using rule 29 (primary_expression)
    OP_EXP             [reduce using rule 141 (pointer_assignment)]
    OP_LOGICAL_AND     reduce using rule 29 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 141 (pointer_assignment)]
    OP_LOGICAL_OR      reduce using rule 29 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 141 (pointer_assignment)]
    OP_MULTIPLY        reduce using rule 29 (primary_expression)
    OP_MULTIPLY        [reduce using rule 141 (pointer_assignment)]
    OP_ADD             reduce using rule 29 (primary_expression)
    OP_ADD             [reduce using rule 141 (pointer_assignment)]
    OP_SUBTRACT        reduce using rule 29 (primary_expression)
    OP_SUBTRACT        [reduce using rule 141 (pointer_assignment)]
    OP_DIVIDE          reduce using rule 29 (primary_expression)
    OP_DIVIDE          [reduce using rule 141 (pointer_assignment)]
    OP_MODULUS         reduce using rule 29 (primary_expression)
    OP_MODULUS         [reduce using rule 141 (pointer_assignment)]
    OP_GREATER_THAN    reduce using rule 29 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 141 (pointer_assignment)]
    OP_LESS_THAN       reduce using rule 29 (primary_expression)
    OP_LESS_THAN       [reduce using rule 141 (pointer_assignment)]
    OP_LOGICAL_XOR     reduce using rule 29 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 141 (pointer_assignment)]
    RANGLE             reduce using rule 29 (primary_expression)
    RANGLE             [reduce using rule 141 (pointer_assignment)]
    COLON              reduce using rule 29 (primary_expression)
    COLON              [reduce using rule 141 (pointer_assignment)]
    RPAREN             reduce using rule 29 (primary_expression)
    RPAREN             [reduce using rule 141 (pointer_assignment)]
    RBRACKET           reduce using rule 29 (primary_expression)
    RBRACKET           [reduce using rule 141 (pointer_assignment)]
    PIPE               reduce using rule 29 (primary_expression)
    PIPE               [reduce using rule 141 (pointer_assignment)]
    SEMICOLON          reduce using rule 29 (primary_expression)
    SEMICOLON          [reduce using rule 141 (pointer_assignment)]
    $default           reduce using rule 29 (primary_expression)


State 55

   39 unary_expression: OP_ADDR_OF unary_expression •

    $default  reduce using rule 39 (unary_expression)


State 56

   29 primary_expression: IDENTIFIER •
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  142 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 64

    KW_REDIRE          reduce using rule 29 (primary_expression)
    KW_REDIRE          [reduce using rule 142 (pointer_dereference)]
    OP_ASSIGN          reduce using rule 29 (primary_expression)
    OP_ASSIGN          [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 29 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 142 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 29 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 142 (pointer_dereference)]
    OP_EQUAL           reduce using rule 29 (primary_expression)
    OP_EQUAL           [reduce using rule 142 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 29 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 142 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 29 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 142 (pointer_dereference)]
    OP_EXP             reduce using rule 29 (primary_expression)
    OP_EXP             [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 29 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 29 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 142 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 29 (primary_expression)
    OP_MULTIPLY        [reduce using rule 142 (pointer_dereference)]
    OP_ADD             reduce using rule 29 (primary_expression)
    OP_ADD             [reduce using rule 142 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 29 (primary_expression)
    OP_SUBTRACT        [reduce using rule 142 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 29 (primary_expression)
    OP_DIVIDE          [reduce using rule 142 (pointer_dereference)]
    OP_MODULUS         reduce using rule 29 (primary_expression)
    OP_MODULUS         [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 29 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 142 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 29 (primary_expression)
    OP_LESS_THAN       [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 29 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 142 (pointer_dereference)]
    RANGLE             reduce using rule 29 (primary_expression)
    RANGLE             [reduce using rule 142 (pointer_dereference)]
    COLON              reduce using rule 29 (primary_expression)
    COLON              [reduce using rule 142 (pointer_dereference)]
    RPAREN             reduce using rule 29 (primary_expression)
    RPAREN             [reduce using rule 142 (pointer_dereference)]
    RBRACKET           reduce using rule 29 (primary_expression)
    RBRACKET           [reduce using rule 142 (pointer_dereference)]
    PIPE               reduce using rule 29 (primary_expression)
    PIPE               [reduce using rule 142 (pointer_dereference)]
    SEMICOLON          reduce using rule 29 (primary_expression)
    SEMICOLON          [reduce using rule 142 (pointer_dereference)]
    $default           reduce using rule 29 (primary_expression)


State 57

   38 unary_expression: OP_DEREF_POINTER unary_expression •

    $default  reduce using rule 38 (unary_expression)


State 58

   38 unary_expression: OP_DEREF_POINTER • unary_expression
  142 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  144 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 91

    primary_expression         go to state 21
    unary_expression           go to state 57
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 59

   32 primary_expression: LPAREN expression • RPAREN
   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RPAREN             shift, and go to state 93


State 60

   27 import_statement: IDENTIFIER KW_EVOCARE • SEMICOLON

    SEMICOLON  shift, and go to state 94


State 61

  145 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 95


State 62

  143 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 96


State 63

   83 type_specifier: OP_DEREF_POINTER • type_specifier
  139 pointer_declaration: IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_DEREF_POINTER    shift, and go to state 47
    IDENTIFIER          shift, and go to state 48

    type_specifier  go to state 97


State 64

  133 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 98
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 65

   10 alchemia_statement: IDENTIFIER LPAREN • RPAREN KW_MAIN block

    RPAREN  shift, and go to state 99


State 66

  123 type_define_enum: IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 100

    enum_list  go to state 101


State 67

   68 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 102

    $default  reduce using rule 72 (opcional_constant)

    opcional_constant  go to state 103


State 68

   58 expression: expression OP_ASSIGN • assing_value
   69 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  140 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ADDR_OF        shift, and go to state 104
    OP_DEREF_POINTER  shift, and go to state 105
    LPAREN            shift, and go to state 106
    IDENTIFIER        shift, and go to state 107

    assing_value               go to state 108
    vector_access              go to state 109
    pointer_statement          go to state 110
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 111
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 69

   54 expression: expression OP_GREATER_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 112
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 70

   53 expression: expression OP_LESS_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 113
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 71

   49 expression: expression OP_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 114
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 72

   50 expression: expression OP_NOT_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 115
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 73

   48 expression: expression OP_INTEGER_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 116
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 74

   47 expression: expression OP_EXP • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 117
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 75

   55 expression: expression OP_LOGICAL_AND • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 118
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 76

   56 expression: expression OP_LOGICAL_OR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 119
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 77

   44 expression: expression OP_MULTIPLY • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 120
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 78

   42 expression: expression OP_ADD • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 121
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 79

   43 expression: expression OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 122
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 80

   45 expression: expression OP_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 123
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 81

   46 expression: expression OP_MODULUS • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 124
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 82

   52 expression: expression OP_GREATER_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 125
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 83

   51 expression: expression OP_LESS_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 126
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 84

   57 expression: expression OP_LOGICAL_XOR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 127
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 85

   83 type_specifier: OP_DEREF_POINTER type_specifier •

    $default  reduce using rule 83 (type_specifier)


State 86

   82 type_specifier: IDENTIFIER KW_ENUMERARE •

    $default  reduce using rule 82 (type_specifier)


State 87

  121 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 128


State 88

   89 parameter: IDENTIFIER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_DEREF_POINTER    shift, and go to state 47
    IDENTIFIER          shift, and go to state 48

    type_specifier  go to state 129


State 89

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list • RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE
   88 parameter_list: parameter_list • PIPE parameter

    RPAREN  shift, and go to state 130
    PIPE    shift, and go to state 131


State 90

   87 parameter_list: parameter •

    $default  reduce using rule 87 (parameter_list)


State 91

   29 primary_expression: IDENTIFIER •
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  142 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  144 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 64
    RPAREN             shift, and go to state 132

    OP_ASSIGN          reduce using rule 29 (primary_expression)
    OP_ASSIGN          [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 29 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 142 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 29 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 142 (pointer_dereference)]
    OP_EQUAL           reduce using rule 29 (primary_expression)
    OP_EQUAL           [reduce using rule 142 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 29 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 142 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 29 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 142 (pointer_dereference)]
    OP_EXP             reduce using rule 29 (primary_expression)
    OP_EXP             [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 29 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 29 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 142 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 29 (primary_expression)
    OP_MULTIPLY        [reduce using rule 142 (pointer_dereference)]
    OP_ADD             reduce using rule 29 (primary_expression)
    OP_ADD             [reduce using rule 142 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 29 (primary_expression)
    OP_SUBTRACT        [reduce using rule 142 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 29 (primary_expression)
    OP_DIVIDE          [reduce using rule 142 (pointer_dereference)]
    OP_MODULUS         reduce using rule 29 (primary_expression)
    OP_MODULUS         [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 29 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 142 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 29 (primary_expression)
    OP_LESS_THAN       [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 29 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 142 (pointer_dereference)]
    RPAREN             [reduce using rule 29 (primary_expression)]
    RPAREN             [reduce using rule 142 (pointer_dereference)]
    $default           reduce using rule 29 (primary_expression)


State 92

   58 expression: expression OP_ASSIGN • assing_value

    OP_ADDR_OF        shift, and go to state 104
    OP_DEREF_POINTER  shift, and go to state 105
    LPAREN            shift, and go to state 106
    IDENTIFIER        shift, and go to state 133

    assing_value               go to state 108
    vector_access              go to state 109
    pointer_statement          go to state 110
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 111
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 93

   32 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 32 (primary_expression)


State 94

   27 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON •

    $default  reduce using rule 27 (import_statement)


State 95

  145 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER •

    $default  reduce using rule 145 (member_access_pointer)


State 96

  143 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 143 (member_access_direct)


State 97

   83 type_specifier: OP_DEREF_POINTER type_specifier •
  139 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 134

    SEMICOLON  [reduce using rule 83 (type_specifier)]
    $default   reduce using rule 83 (type_specifier)


State 98

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
  133 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RANGLE             shift, and go to state 135


State 99

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN • KW_MAIN block

    KW_MAIN  shift, and go to state 136


State 100

  125 enum_list: IDENTIFIER •
  126          | IDENTIFIER • OP_ASSIGN LIT_INT
  127          | IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 137

    $default  reduce using rule 125 (enum_list)


State 101

  123 type_define_enum: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
  128 enum_list: enum_list • PIPE IDENTIFIER
  129          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_INT
  130          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

    RBRACE  shift, and go to state 138
    PIPE    shift, and go to state 139


State 102

   71 opcional_constant: KW_MOL •

    $default  reduce using rule 71 (opcional_constant)


State 103

   68 declaration_statement: IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 140


State 104

  141 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    IDENTIFIER  shift, and go to state 141


State 105

  142 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 142


State 106

  144 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    OP_DEREF_POINTER  shift, and go to state 143


State 107

   65 assing_value: IDENTIFIER •
   69 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  140 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_ACCESS_POINTER   shift, and go to state 61
    OP_ACCESS_MEMBER    shift, and go to state 62
    OP_DEREF_POINTER    shift, and go to state 144
    LANGLE              shift, and go to state 64
    IDENTIFIER          shift, and go to state 48

    $default  reduce using rule 65 (assing_value)

    type_specifier  go to state 145


State 108

   58 expression: expression OP_ASSIGN assing_value •

    $default  reduce using rule 58 (expression)


State 109

   66 assing_value: vector_access •

    $default  reduce using rule 66 (assing_value)


State 110

   67 assing_value: pointer_statement •

    $default  reduce using rule 67 (assing_value)


State 111

  136 pointer_statement: member_access_direct •

    $default  reduce using rule 136 (pointer_statement)


State 112

   54 expression: expression OP_GREATER_EQUAL unary_expression •

    $default  reduce using rule 54 (expression)


State 113

   53 expression: expression OP_LESS_EQUAL unary_expression •

    $default  reduce using rule 53 (expression)


State 114

   49 expression: expression OP_EQUAL unary_expression •

    $default  reduce using rule 49 (expression)


State 115

   50 expression: expression OP_NOT_EQUAL unary_expression •

    $default  reduce using rule 50 (expression)


State 116

   48 expression: expression OP_INTEGER_DIVIDE unary_expression •

    $default  reduce using rule 48 (expression)


State 117

   47 expression: expression OP_EXP unary_expression •

    $default  reduce using rule 47 (expression)


State 118

   55 expression: expression OP_LOGICAL_AND unary_expression •

    $default  reduce using rule 55 (expression)


State 119

   56 expression: expression OP_LOGICAL_OR unary_expression •

    $default  reduce using rule 56 (expression)


State 120

   44 expression: expression OP_MULTIPLY unary_expression •

    $default  reduce using rule 44 (expression)


State 121

   42 expression: expression OP_ADD unary_expression •

    $default  reduce using rule 42 (expression)


State 122

   43 expression: expression OP_SUBTRACT unary_expression •

    $default  reduce using rule 43 (expression)


State 123

   45 expression: expression OP_DIVIDE unary_expression •

    $default  reduce using rule 45 (expression)


State 124

   46 expression: expression OP_MODULUS unary_expression •

    $default  reduce using rule 46 (expression)


State 125

   52 expression: expression OP_GREATER_THAN unary_expression •

    $default  reduce using rule 52 (expression)


State 126

   51 expression: expression OP_LESS_THAN unary_expression •

    $default  reduce using rule 51 (expression)


State 127

   57 expression: expression OP_LOGICAL_XOR unary_expression •

    $default  reduce using rule 57 (expression)


State 128

  121 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 121 (type_define_statement)


State 129

   89 parameter: IDENTIFIER type_specifier •

    $default  reduce using rule 89 (parameter)


State 130

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN • IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 146


State 131

   88 parameter_list: parameter_list PIPE • parameter

    IDENTIFIER  shift, and go to state 88

    parameter  go to state 147


State 132

  144 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN • OP_ACCESS_MEMBER IDENTIFIER

    OP_ACCESS_MEMBER  shift, and go to state 148


State 133

   65 assing_value: IDENTIFIER •
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 64

    $default  reduce using rule 65 (assing_value)


State 134

  139 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 139 (pointer_declaration)


State 135

  133 vector_access: IDENTIFIER LANGLE expression RANGLE •

    $default  reduce using rule 133 (vector_access)


State 136

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN • block

    LBRACE  shift, and go to state 149

    block  go to state 150


State 137

  126 enum_list: IDENTIFIER OP_ASSIGN • LIT_INT
  127          | IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 151
    LIT_CHAR  shift, and go to state 152


State 138

  123 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 153


State 139

  128 enum_list: enum_list PIPE • IDENTIFIER
  129          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_INT
  130          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_CHAR

    IDENTIFIER  shift, and go to state 154


State 140

   68 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 68 (declaration_statement)


State 141

  141 pointer_assignment: OP_ADDR_OF IDENTIFIER •

    $default  reduce using rule 141 (pointer_assignment)


State 142

  142 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •

    $default  reduce using rule 142 (pointer_dereference)


State 143

  144 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    IDENTIFIER  shift, and go to state 155


State 144

   83 type_specifier: OP_DEREF_POINTER • type_specifier
  140 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_DEREF_POINTER    shift, and go to state 47
    IDENTIFIER          shift, and go to state 48

    type_specifier  go to state 156


State 145

   69 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 102

    $default  reduce using rule 72 (opcional_constant)

    opcional_constant  go to state 157


State 146

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER • OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    OP_ASSIGN  shift, and go to state 158


State 147

   88 parameter_list: parameter_list PIPE parameter •

    $default  reduce using rule 88 (parameter_list)


State 148

  144 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 159


State 149

    9 block: LBRACE • $@1 statement_list RBRACE

    $default  reduce using rule 8 ($@1)

    $@1  go to state 160


State 150

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN block •

    $default  reduce using rule 10 (alchemia_statement)


State 151

  126 enum_list: IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 126 (enum_list)


State 152

  127 enum_list: IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 127 (enum_list)


State 153

  123 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 161


State 154

  128 enum_list: enum_list PIPE IDENTIFIER •
  129          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_INT
  130          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 162

    $default  reduce using rule 128 (enum_list)


State 155

  144 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER

    RPAREN  shift, and go to state 132


State 156

   83 type_specifier: OP_DEREF_POINTER type_specifier •
  140 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 163

    SEMICOLON  [reduce using rule 83 (type_specifier)]
    $default   reduce using rule 83 (type_specifier)


State 157

   69 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 164


State 158

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN • type_specifier $@2 LBRACE statement_list RBRACE

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_DEREF_POINTER    shift, and go to state 47
    IDENTIFIER          shift, and go to state 48

    type_specifier  go to state 165


State 159

  144 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 144 (member_access_dereference)


State 160

    9 block: LBRACE $@1 • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 166


State 161

  123 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 123 (type_define_enum)


State 162

  129 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_INT
  130          | enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 167
    LIT_CHAR  shift, and go to state 168


State 163

  140 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 140 (pointer_declaration)


State 164

   69 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 69 (declaration_statement)


State 165

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier • $@2 LBRACE statement_list RBRACE

    $default  reduce using rule 84 ($@2)

    $@2  go to state 169


State 166

    9 block: LBRACE $@1 statement_list • RBRACE
   12 statement_list: statement_list • statement

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 175
    LBRACKET          shift, and go to state 176
    RBRACE            shift, and go to state 177
    IDENTIFIER        shift, and go to state 178

    statement                  go to state 179
    assignment_statement       go to state 180
    expression_statement       go to state 181
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 182
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 183
    function_call_statement    go to state 184
    jump_statement             go to state 185
    conditional_statement      go to state 186
    causal_statement           go to state 187
    iteration_statement        go to state 188
    io_functions               go to state 189
    function_input_output      go to state 190
    identifier_langle_list     go to state 191
    identifier_rangle_list     go to state 192
    function_magnitudo         go to state 193
    type_define_statement      go to state 194
    type_define_enum           go to state 29
    enum_assignment            go to state 195
    vector_statement           go to state 196
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_declaration        go to state 32
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 167

  129 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 129 (enum_list)


State 168

  130 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 130 (enum_list)


State 169

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 • LBRACE statement_list RBRACE

    LBRACE  shift, and go to state 197


State 170

  104 causal_statement: KW_CASUS • expression COLON statement_list

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 198
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 171

  105 causal_statement: KW_AXIOM • COLON statement_list

    COLON  shift, and go to state 199


State 172

   93 jump_statement: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 200


State 173

   94 jump_statement: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 201


State 174

   95 jump_statement: KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 202


State 175

   32 primary_expression: LPAREN • expression RPAREN
   90 function_call_statement: LPAREN • argument_list RPAREN IDENTIFIER SEMICOLON
   97 conditional_statement: LPAREN • expression RPAREN KW_SI block
   99                      | LPAREN • expression RPAREN KW_SI block $@3 conditional_non_statement
  101                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  106 iteration_statement: LPAREN • expression RPAREN KW_PERSISTO block
  107                    | LPAREN • expression_statement expression_statement expression RPAREN KW_ITERARE block
  108                    | LPAREN • expression_statement expression_statement RPAREN KW_ITERARE block
  109                    | LPAREN • declaration_statement expression_statement expression RPAREN KW_ITERARE block
  110                    | LPAREN • declaration_statement expression_statement RPAREN KW_ITERARE block
  119 function_magnitudo: LPAREN • type_expression RPAREN KW_MAGNITUDO SEMICOLON
  144 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 203
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 204

    expression_statement       go to state 205
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 206
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 207
    type_specifier             go to state 208
    argument_list              go to state 209
    type_expression            go to state 210
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_declaration        go to state 32
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 176

  132 vector_statement: LBRACKET • argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 211
    constant                   go to state 24
    string                     go to state 25
    argument_list              go to state 212
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 177

    9 block: LBRACE $@1 statement_list RBRACE •

    $default  reduce using rule 9 (block)


State 178

   29 primary_expression: IDENTIFIER •
   68 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  115 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  116                       | IDENTIFIER • LANGLE identifier_langle_list
  117 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  118                       | IDENTIFIER • RANGLE identifier_rangle_list
  123 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  124 enum_assignment: IDENTIFIER • OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON
  131 vector_statement: IDENTIFIER • type_specifier LANGLE expression RANGLE SEMICOLON
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  139 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_ACCESS_POINTER   shift, and go to state 61
    OP_ASSIGN           shift, and go to state 213
    OP_ACCESS_MEMBER    shift, and go to state 62
    OP_DEREF_POINTER    shift, and go to state 63
    LANGLE              shift, and go to state 214
    RANGLE              shift, and go to state 215
    LBRACE              shift, and go to state 66
    IDENTIFIER          shift, and go to state 48

    OP_ASSIGN  [reduce using rule 29 (primary_expression)]
    $default   reduce using rule 29 (primary_expression)

    type_specifier  go to state 216


State 179

   12 statement_list: statement_list statement •

    $default  reduce using rule 12 (statement_list)


State 180

   24 statement: assignment_statement •

    $default  reduce using rule 24 (statement)


State 181

   13 statement: expression_statement •

    $default  reduce using rule 13 (statement)


State 182

   25 assignment_statement: expression • OP_ASSIGN IDENTIFIER SEMICOLON
   26                     | expression • OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   28 expression_statement: expression • SEMICOLON
   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
   69 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   96 jump_statement: expression • KW_REDIRE SEMICOLON
  140 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    KW_REDIRE          shift, and go to state 217
    OP_ASSIGN          shift, and go to state 218
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    SEMICOLON          shift, and go to state 219


State 183

   16 statement: declaration_statement •

    $default  reduce using rule 16 (statement)


State 184

   17 statement: function_call_statement •

    $default  reduce using rule 17 (statement)


State 185

   21 statement: jump_statement •

    $default  reduce using rule 21 (statement)


State 186

   18 statement: conditional_statement •

    $default  reduce using rule 18 (statement)


State 187

   22 statement: causal_statement •

    $default  reduce using rule 22 (statement)


State 188

   14 statement: iteration_statement •

    $default  reduce using rule 14 (statement)


State 189

   15 statement: io_functions •

    $default  reduce using rule 15 (statement)


State 190

  111 io_functions: function_input_output •

    $default  reduce using rule 111 (io_functions)


State 191

  113 function_input_output: identifier_langle_list •

    $default  reduce using rule 113 (function_input_output)


State 192

  114 function_input_output: identifier_rangle_list •

    $default  reduce using rule 114 (function_input_output)


State 193

  112 io_functions: function_magnitudo •

    $default  reduce using rule 112 (io_functions)


State 194

   19 statement: type_define_statement •

    $default  reduce using rule 19 (statement)


State 195

   23 statement: enum_assignment •

    $default  reduce using rule 23 (statement)


State 196

   20 statement: vector_statement •

    $default  reduce using rule 20 (statement)


State 197

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 220


State 198

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
  104 causal_statement: KW_CASUS expression • COLON statement_list

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    COLON              shift, and go to state 221


State 199

  105 causal_statement: KW_AXIOM COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 222


State 200

   93 jump_statement: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 93 (jump_statement)


State 201

   94 jump_statement: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 94 (jump_statement)


State 202

   95 jump_statement: KW_REDIRE SEMICOLON •

    $default  reduce using rule 95 (jump_statement)


State 203

   38 unary_expression: OP_DEREF_POINTER • unary_expression
   83 type_specifier: OP_DEREF_POINTER • type_specifier
  142 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  144 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 223
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 224

    primary_expression         go to state 21
    unary_expression           go to state 57
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 85
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 204

   29 primary_expression: IDENTIFIER •
   68 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
   82 type_specifier: IDENTIFIER • KW_ENUMERARE
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  139 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE        shift, and go to state 86
    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_ACCESS_POINTER   shift, and go to state 61
    OP_ACCESS_MEMBER    shift, and go to state 62
    OP_DEREF_POINTER    shift, and go to state 63
    LANGLE              shift, and go to state 64
    IDENTIFIER          shift, and go to state 48

    $default  reduce using rule 29 (primary_expression)

    type_specifier  go to state 67


State 205

  107 iteration_statement: LPAREN expression_statement • expression_statement expression RPAREN KW_ITERARE block
  108                    | LPAREN expression_statement • expression_statement RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    expression_statement       go to state 225
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 226
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 206

   28 expression_statement: expression • SEMICOLON
   32 primary_expression: LPAREN expression • RPAREN
   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
   69 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   91 argument_list: expression •
   97 conditional_statement: LPAREN expression • RPAREN KW_SI block
   99                      | LPAREN expression • RPAREN KW_SI block $@3 conditional_non_statement
  101                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  106 iteration_statement: LPAREN expression • RPAREN KW_PERSISTO block
  140 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 68
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RPAREN             shift, and go to state 227
    SEMICOLON          shift, and go to state 219

    RPAREN    [reduce using rule 91 (argument_list)]
    $default  reduce using rule 91 (argument_list)


State 207

  109 iteration_statement: LPAREN declaration_statement • expression_statement expression RPAREN KW_ITERARE block
  110                    | LPAREN declaration_statement • expression_statement RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    expression_statement       go to state 228
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 226
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 208

  120 type_expression: type_specifier •

    $default  reduce using rule 120 (type_expression)


State 209

   90 function_call_statement: LPAREN argument_list • RPAREN IDENTIFIER SEMICOLON
   92 argument_list: argument_list • PIPE expression

    RPAREN  shift, and go to state 229
    PIPE    shift, and go to state 230


State 210

  119 function_magnitudo: LPAREN type_expression • RPAREN KW_MAGNITUDO SEMICOLON

    RPAREN  shift, and go to state 231


State 211

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
   91 argument_list: expression •

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84

    $default  reduce using rule 91 (argument_list)


State 212

   92 argument_list: argument_list • PIPE expression
  132 vector_statement: LBRACKET argument_list • RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    RBRACKET  shift, and go to state 232
    PIPE      shift, and go to state 230


State 213

  124 enum_assignment: IDENTIFIER OP_ASSIGN • IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 233


State 214

  115 identifier_langle_list: IDENTIFIER LANGLE • KW_LECTURA SEMICOLON
  116                       | IDENTIFIER LANGLE • identifier_langle_list
  133 vector_access: IDENTIFIER LANGLE • expression RANGLE

    KW_LECTURA        shift, and go to state 234
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 235

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 98
    constant                   go to state 24
    string                     go to state 25
    identifier_langle_list     go to state 236
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 215

  117 identifier_rangle_list: IDENTIFIER RANGLE • KW_REVELARE SEMICOLON
  118                       | IDENTIFIER RANGLE • identifier_rangle_list

    KW_REVELARE  shift, and go to state 237
    IDENTIFIER   shift, and go to state 238

    identifier_rangle_list  go to state 239


State 216

   68 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON
  131 vector_statement: IDENTIFIER type_specifier • LANGLE expression RANGLE SEMICOLON

    KW_MOL  shift, and go to state 102
    LANGLE  shift, and go to state 240

    $default  reduce using rule 72 (opcional_constant)

    opcional_constant  go to state 103


State 217

   96 jump_statement: expression KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 241


State 218

   25 assignment_statement: expression OP_ASSIGN • IDENTIFIER SEMICOLON
   26                     | expression OP_ASSIGN • IDENTIFIER LANGLE expression RANGLE SEMICOLON
   58 expression: expression OP_ASSIGN • assing_value
   69 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  140 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ADDR_OF        shift, and go to state 104
    OP_DEREF_POINTER  shift, and go to state 105
    LPAREN            shift, and go to state 106
    IDENTIFIER        shift, and go to state 242

    assing_value               go to state 108
    vector_access              go to state 109
    pointer_statement          go to state 110
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 111
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 219

   28 expression_statement: expression SEMICOLON •

    $default  reduce using rule 28 (expression_statement)


State 220

   12 statement_list: statement_list • statement
   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list • RBRACE

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 175
    LBRACKET          shift, and go to state 176
    RBRACE            shift, and go to state 243
    IDENTIFIER        shift, and go to state 178

    statement                  go to state 179
    assignment_statement       go to state 180
    expression_statement       go to state 181
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 182
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 183
    function_call_statement    go to state 184
    jump_statement             go to state 185
    conditional_statement      go to state 186
    causal_statement           go to state 187
    iteration_statement        go to state 188
    io_functions               go to state 189
    function_input_output      go to state 190
    identifier_langle_list     go to state 191
    identifier_rangle_list     go to state 192
    function_magnitudo         go to state 193
    type_define_statement      go to state 194
    type_define_enum           go to state 29
    enum_assignment            go to state 195
    vector_statement           go to state 196
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_declaration        go to state 32
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 221

  104 causal_statement: KW_CASUS expression COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 244


State 222

   12 statement_list: statement_list • statement
  105 causal_statement: KW_AXIOM COLON statement_list •

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 175
    LBRACKET          shift, and go to state 176
    IDENTIFIER        shift, and go to state 178

    KW_CASUS          [reduce using rule 105 (causal_statement)]
    KW_AXIOM          [reduce using rule 105 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 105 (causal_statement)]
    KW_RUPTIO         [reduce using rule 105 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 105 (causal_statement)]
    KW_REDIRE         [reduce using rule 105 (causal_statement)]
    LIT_FACTUM        [reduce using rule 105 (causal_statement)]
    LIT_FICTUM        [reduce using rule 105 (causal_statement)]
    LIT_FLOAT         [reduce using rule 105 (causal_statement)]
    LIT_INT           [reduce using rule 105 (causal_statement)]
    LIT_CHAR          [reduce using rule 105 (causal_statement)]
    LIT_STRING        [reduce using rule 105 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 105 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 105 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 105 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 105 (causal_statement)]
    LPAREN            [reduce using rule 105 (causal_statement)]
    LBRACKET          [reduce using rule 105 (causal_statement)]
    IDENTIFIER        [reduce using rule 105 (causal_statement)]
    $default          reduce using rule 105 (causal_statement)

    statement                  go to state 179
    assignment_statement       go to state 180
    expression_statement       go to state 181
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 182
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 183
    function_call_statement    go to state 184
    jump_statement             go to state 185
    conditional_statement      go to state 186
    causal_statement           go to state 187
    iteration_statement        go to state 188
    io_functions               go to state 189
    function_input_output      go to state 190
    identifier_langle_list     go to state 191
    identifier_rangle_list     go to state 192
    function_magnitudo         go to state 193
    type_define_statement      go to state 194
    type_define_enum           go to state 29
    enum_assignment            go to state 195
    vector_statement           go to state 196
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_declaration        go to state 32
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 223

   38 unary_expression: OP_DEREF_POINTER • unary_expression
   83 type_specifier: OP_DEREF_POINTER • type_specifier
  142 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 223
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 245

    primary_expression         go to state 21
    unary_expression           go to state 57
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 85
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 224

   29 primary_expression: IDENTIFIER •
   82 type_specifier: IDENTIFIER • KW_ENUMERARE
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  142 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  144 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 86
    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 64
    RPAREN             shift, and go to state 132

    OP_ASSIGN          reduce using rule 29 (primary_expression)
    OP_ASSIGN          [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 29 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 142 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 29 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 142 (pointer_dereference)]
    OP_EQUAL           reduce using rule 29 (primary_expression)
    OP_EQUAL           [reduce using rule 142 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 29 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 142 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 29 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 142 (pointer_dereference)]
    OP_EXP             reduce using rule 29 (primary_expression)
    OP_EXP             [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 29 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 29 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 142 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 29 (primary_expression)
    OP_MULTIPLY        [reduce using rule 142 (pointer_dereference)]
    OP_ADD             reduce using rule 29 (primary_expression)
    OP_ADD             [reduce using rule 142 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 29 (primary_expression)
    OP_SUBTRACT        [reduce using rule 142 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 29 (primary_expression)
    OP_DIVIDE          [reduce using rule 142 (pointer_dereference)]
    OP_MODULUS         reduce using rule 29 (primary_expression)
    OP_MODULUS         [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 29 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 142 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 29 (primary_expression)
    OP_LESS_THAN       [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 29 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 142 (pointer_dereference)]
    RPAREN             [reduce using rule 29 (primary_expression)]
    RPAREN             [reduce using rule 142 (pointer_dereference)]
    PIPE               reduce using rule 29 (primary_expression)
    PIPE               [reduce using rule 142 (pointer_dereference)]
    SEMICOLON          reduce using rule 29 (primary_expression)
    SEMICOLON          [reduce using rule 142 (pointer_dereference)]
    $default           reduce using rule 29 (primary_expression)


State 225

  107 iteration_statement: LPAREN expression_statement expression_statement • expression RPAREN KW_ITERARE block
  108                    | LPAREN expression_statement expression_statement • RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 246
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 247
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 226

   28 expression_statement: expression • SEMICOLON
   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    SEMICOLON          shift, and go to state 219


State 227

   32 primary_expression: LPAREN expression RPAREN •
   97 conditional_statement: LPAREN expression RPAREN • KW_SI block
   99                      | LPAREN expression RPAREN • KW_SI block $@3 conditional_non_statement
  101                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE
  106 iteration_statement: LPAREN expression RPAREN • KW_PERSISTO block

    KW_VERTERE   shift, and go to state 248
    KW_PERSISTO  shift, and go to state 249
    KW_SI        shift, and go to state 250

    $default  reduce using rule 32 (primary_expression)


State 228

  109 iteration_statement: LPAREN declaration_statement expression_statement • expression RPAREN KW_ITERARE block
  110                    | LPAREN declaration_statement expression_statement • RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 251
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 252
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 229

   90 function_call_statement: LPAREN argument_list RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 253


State 230

   92 argument_list: argument_list PIPE • expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 254
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 231

  119 function_magnitudo: LPAREN type_expression RPAREN • KW_MAGNITUDO SEMICOLON

    KW_MAGNITUDO  shift, and go to state 255


State 232

  132 vector_statement: LBRACKET argument_list RBRACKET • OP_ASSIGN IDENTIFIER SEMICOLON

    OP_ASSIGN  shift, and go to state 256


State 233

  124 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER • IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 257


State 234

  115 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 258


State 235

   29 primary_expression: IDENTIFIER •
  115 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  116                       | IDENTIFIER • LANGLE identifier_langle_list
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 214

    $default  reduce using rule 29 (primary_expression)


State 236

  116 identifier_langle_list: IDENTIFIER LANGLE identifier_langle_list •

    $default  reduce using rule 116 (identifier_langle_list)


State 237

  117 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 259


State 238

  117 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  118                       | IDENTIFIER • RANGLE identifier_rangle_list

    RANGLE  shift, and go to state 215


State 239

  118 identifier_rangle_list: IDENTIFIER RANGLE identifier_rangle_list •

    $default  reduce using rule 118 (identifier_rangle_list)


State 240

  131 vector_statement: IDENTIFIER type_specifier LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 260
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 241

   96 jump_statement: expression KW_REDIRE SEMICOLON •

    $default  reduce using rule 96 (jump_statement)


State 242

   25 assignment_statement: expression OP_ASSIGN IDENTIFIER • SEMICOLON
   26                     | expression OP_ASSIGN IDENTIFIER • LANGLE expression RANGLE SEMICOLON
   65 assing_value: IDENTIFIER •
   69 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  140 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 38
    KW_TYPE_FRACTIO     shift, and go to state 39
    KW_TYPE_FRAGMENTUM  shift, and go to state 40
    KW_TYPE_MAGNUS      shift, and go to state 41
    KW_TYPE_MINIMUS     shift, and go to state 42
    KW_TYPE_QUANTUM     shift, and go to state 43
    KW_TYPE_SCRIPTUM    shift, and go to state 44
    KW_TYPE_SYMBOLUM    shift, and go to state 45
    KW_TYPE_VACUUM      shift, and go to state 46
    OP_ACCESS_POINTER   shift, and go to state 61
    OP_ACCESS_MEMBER    shift, and go to state 62
    OP_DEREF_POINTER    shift, and go to state 144
    LANGLE              shift, and go to state 261
    SEMICOLON           shift, and go to state 262
    IDENTIFIER          shift, and go to state 48

    SEMICOLON  [reduce using rule 65 (assing_value)]
    $default   reduce using rule 65 (assing_value)

    type_specifier  go to state 145


State 243

   85 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE •

    $default  reduce using rule 85 (function_declaration_statement)


State 244

   12 statement_list: statement_list • statement
  104 causal_statement: KW_CASUS expression COLON statement_list •

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 175
    LBRACKET          shift, and go to state 176
    IDENTIFIER        shift, and go to state 178

    KW_CASUS          [reduce using rule 104 (causal_statement)]
    KW_AXIOM          [reduce using rule 104 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 104 (causal_statement)]
    KW_RUPTIO         [reduce using rule 104 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 104 (causal_statement)]
    KW_REDIRE         [reduce using rule 104 (causal_statement)]
    LIT_FACTUM        [reduce using rule 104 (causal_statement)]
    LIT_FICTUM        [reduce using rule 104 (causal_statement)]
    LIT_FLOAT         [reduce using rule 104 (causal_statement)]
    LIT_INT           [reduce using rule 104 (causal_statement)]
    LIT_CHAR          [reduce using rule 104 (causal_statement)]
    LIT_STRING        [reduce using rule 104 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 104 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 104 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 104 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 104 (causal_statement)]
    LPAREN            [reduce using rule 104 (causal_statement)]
    LBRACKET          [reduce using rule 104 (causal_statement)]
    IDENTIFIER        [reduce using rule 104 (causal_statement)]
    $default          reduce using rule 104 (causal_statement)

    statement                  go to state 179
    assignment_statement       go to state 180
    expression_statement       go to state 181
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 182
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 183
    function_call_statement    go to state 184
    jump_statement             go to state 185
    conditional_statement      go to state 186
    causal_statement           go to state 187
    iteration_statement        go to state 188
    io_functions               go to state 189
    function_input_output      go to state 190
    identifier_langle_list     go to state 191
    identifier_rangle_list     go to state 192
    function_magnitudo         go to state 193
    type_define_statement      go to state 194
    type_define_enum           go to state 29
    enum_assignment            go to state 195
    vector_statement           go to state 196
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_declaration        go to state 32
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 245

   29 primary_expression: IDENTIFIER •
   82 type_specifier: IDENTIFIER • KW_ENUMERARE
  133 vector_access: IDENTIFIER • LANGLE expression RANGLE
  142 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  143 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  145 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 86
    OP_ACCESS_POINTER  shift, and go to state 61
    OP_ACCESS_MEMBER   shift, and go to state 62
    LANGLE             shift, and go to state 64

    OP_ASSIGN          reduce using rule 29 (primary_expression)
    OP_ASSIGN          [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 29 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 142 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 29 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 142 (pointer_dereference)]
    OP_EQUAL           reduce using rule 29 (primary_expression)
    OP_EQUAL           [reduce using rule 142 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 29 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 142 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 29 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 142 (pointer_dereference)]
    OP_EXP             reduce using rule 29 (primary_expression)
    OP_EXP             [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 29 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 29 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 142 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 29 (primary_expression)
    OP_MULTIPLY        [reduce using rule 142 (pointer_dereference)]
    OP_ADD             reduce using rule 29 (primary_expression)
    OP_ADD             [reduce using rule 142 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 29 (primary_expression)
    OP_SUBTRACT        [reduce using rule 142 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 29 (primary_expression)
    OP_DIVIDE          [reduce using rule 142 (pointer_dereference)]
    OP_MODULUS         reduce using rule 29 (primary_expression)
    OP_MODULUS         [reduce using rule 142 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 29 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 142 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 29 (primary_expression)
    OP_LESS_THAN       [reduce using rule 142 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 29 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 142 (pointer_dereference)]
    RPAREN             reduce using rule 29 (primary_expression)
    RPAREN             [reduce using rule 142 (pointer_dereference)]
    PIPE               reduce using rule 29 (primary_expression)
    PIPE               [reduce using rule 142 (pointer_dereference)]
    SEMICOLON          reduce using rule 29 (primary_expression)
    SEMICOLON          [reduce using rule 142 (pointer_dereference)]
    $default           reduce using rule 29 (primary_expression)


State 246

  108 iteration_statement: LPAREN expression_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 263


State 247

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
  107 iteration_statement: LPAREN expression_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RPAREN             shift, and go to state 264


State 248

  101 conditional_statement: LPAREN expression RPAREN KW_VERTERE • LBRACE $@4 causal_statement RBRACE

    LBRACE  shift, and go to state 265


State 249

  106 iteration_statement: LPAREN expression RPAREN KW_PERSISTO • block

    LBRACE  shift, and go to state 149

    block  go to state 266


State 250

   97 conditional_statement: LPAREN expression RPAREN KW_SI • block
   99                      | LPAREN expression RPAREN KW_SI • block $@3 conditional_non_statement

    LBRACE  shift, and go to state 149

    block  go to state 267


State 251

  110 iteration_statement: LPAREN declaration_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 268


State 252

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
  109 iteration_statement: LPAREN declaration_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RPAREN             shift, and go to state 269


State 253

   90 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 270


State 254

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
   92 argument_list: argument_list PIPE expression •

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84

    $default  reduce using rule 92 (argument_list)


State 255

  119 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO • SEMICOLON

    SEMICOLON  shift, and go to state 271


State 256

  132 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 272


State 257

  124 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 273


State 258

  115 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON •

    $default  reduce using rule 115 (identifier_langle_list)


State 259

  117 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON •

    $default  reduce using rule 117 (identifier_rangle_list)


State 260

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
  131 vector_statement: IDENTIFIER type_specifier LANGLE expression • RANGLE SEMICOLON

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RANGLE             shift, and go to state 274


State 261

   26 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE • expression RANGLE SEMICOLON
  133 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 275
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 262

   25 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 25 (assignment_statement)


State 263

  108 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 149

    block  go to state 276


State 264

  107 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 277


State 265

  101 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE • $@4 causal_statement RBRACE

    $default  reduce using rule 100 ($@4)

    $@4  go to state 278


State 266

  106 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block •

    $default  reduce using rule 106 (iteration_statement)


State 267

   97 conditional_statement: LPAREN expression RPAREN KW_SI block •
   99                      | LPAREN expression RPAREN KW_SI block • $@3 conditional_non_statement

    KW_NON    reduce using rule 98 ($@3)
    $default  reduce using rule 97 (conditional_statement)

    $@3  go to state 279


State 268

  110 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 149

    block  go to state 280


State 269

  109 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 281


State 270

   90 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 90 (function_call_statement)


State 271

  119 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON •

    $default  reduce using rule 119 (function_magnitudo)


State 272

  132 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 282


State 273

  124 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 283


State 274

  131 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 284


State 275

   26 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression • RANGLE SEMICOLON
   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
  133 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RANGLE             shift, and go to state 285


State 276

  108 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 108 (iteration_statement)


State 277

  107 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 149

    block  go to state 286


State 278

  101 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 • causal_statement RBRACE

    KW_CASUS  shift, and go to state 170
    KW_AXIOM  shift, and go to state 171

    causal_statement  go to state 287


State 279

   99 conditional_statement: LPAREN expression RPAREN KW_SI block $@3 • conditional_non_statement

    KW_NON  shift, and go to state 288

    conditional_non_statement  go to state 289


State 280

  110 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 110 (iteration_statement)


State 281

  109 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 149

    block  go to state 290


State 282

  132 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 132 (vector_statement)


State 283

  124 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 124 (enum_assignment)


State 284

  131 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 131 (vector_statement)


State 285

   26 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE • SEMICOLON
  133 vector_access: IDENTIFIER LANGLE expression RANGLE •

    SEMICOLON  shift, and go to state 291

    SEMICOLON  [reduce using rule 133 (vector_access)]
    $default   reduce using rule 133 (vector_access)


State 286

  107 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 107 (iteration_statement)


State 287

  101 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement • RBRACE

    RBRACE  shift, and go to state 292


State 288

  102 conditional_non_statement: KW_NON • block
  103                          | KW_NON • conditional_statement

    LPAREN  shift, and go to state 293
    LBRACE  shift, and go to state 149

    block                  go to state 294
    conditional_statement  go to state 295


State 289

   99 conditional_statement: LPAREN expression RPAREN KW_SI block $@3 conditional_non_statement •

    $default  reduce using rule 99 (conditional_statement)


State 290

  109 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 109 (iteration_statement)


State 291

   26 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 26 (assignment_statement)


State 292

  101 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE •

    $default  reduce using rule 101 (conditional_statement)


State 293

   97 conditional_statement: LPAREN • expression RPAREN KW_SI block
   99                      | LPAREN • expression RPAREN KW_SI block $@3 conditional_non_statement
  101                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 51

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 296
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 30
    pointer_statement          go to state 31
    pointer_assignment         go to state 33
    pointer_dereference        go to state 34
    member_access_direct       go to state 35
    member_access_dereference  go to state 36
    member_access_pointer      go to state 37


State 294

  102 conditional_non_statement: KW_NON block •

    $default  reduce using rule 102 (conditional_non_statement)


State 295

  103 conditional_non_statement: KW_NON conditional_statement •

    $default  reduce using rule 103 (conditional_non_statement)


State 296

   42 expression: expression • OP_ADD unary_expression
   43           | expression • OP_SUBTRACT unary_expression
   44           | expression • OP_MULTIPLY unary_expression
   45           | expression • OP_DIVIDE unary_expression
   46           | expression • OP_MODULUS unary_expression
   47           | expression • OP_EXP unary_expression
   48           | expression • OP_INTEGER_DIVIDE unary_expression
   49           | expression • OP_EQUAL unary_expression
   50           | expression • OP_NOT_EQUAL unary_expression
   51           | expression • OP_LESS_THAN unary_expression
   52           | expression • OP_GREATER_THAN unary_expression
   53           | expression • OP_LESS_EQUAL unary_expression
   54           | expression • OP_GREATER_EQUAL unary_expression
   55           | expression • OP_LOGICAL_AND unary_expression
   56           | expression • OP_LOGICAL_OR unary_expression
   57           | expression • OP_LOGICAL_XOR unary_expression
   58           | expression • OP_ASSIGN assing_value
   97 conditional_statement: LPAREN expression • RPAREN KW_SI block
   99                      | LPAREN expression • RPAREN KW_SI block $@3 conditional_non_statement
  101                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    OP_ASSIGN          shift, and go to state 92
    OP_GREATER_EQUAL   shift, and go to state 69
    OP_LESS_EQUAL      shift, and go to state 70
    OP_EQUAL           shift, and go to state 71
    OP_NOT_EQUAL       shift, and go to state 72
    OP_INTEGER_DIVIDE  shift, and go to state 73
    OP_EXP             shift, and go to state 74
    OP_LOGICAL_AND     shift, and go to state 75
    OP_LOGICAL_OR      shift, and go to state 76
    OP_MULTIPLY        shift, and go to state 77
    OP_ADD             shift, and go to state 78
    OP_SUBTRACT        shift, and go to state 79
    OP_DIVIDE          shift, and go to state 80
    OP_MODULUS         shift, and go to state 81
    OP_GREATER_THAN    shift, and go to state 82
    OP_LESS_THAN       shift, and go to state 83
    OP_LOGICAL_XOR     shift, and go to state 84
    RPAREN             shift, and go to state 297


State 297

   97 conditional_statement: LPAREN expression RPAREN • KW_SI block
   99                      | LPAREN expression RPAREN • KW_SI block $@3 conditional_non_statement
  101                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 248
    KW_SI       shift, and go to state 250
