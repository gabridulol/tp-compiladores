Terminals unused in grammar

    LEX_ERROR


State 55 conflicts: 24 reduce/reduce
State 57 conflicts: 24 reduce/reduce
State 94 conflicts: 1 shift/reduce, 18 reduce/reduce
State 100 conflicts: 1 shift/reduce
State 163 conflicts: 24 reduce/reduce
State 164 conflicts: 1 shift/reduce
State 220 conflicts: 1 reduce/reduce
State 222 conflicts: 1 shift/reduce
State 237 conflicts: 20 shift/reduce
State 240 conflicts: 1 shift/reduce, 21 reduce/reduce
State 258 conflicts: 1 shift/reduce
State 259 conflicts: 1 shift/reduce
State 261 conflicts: 20 shift/reduce
State 263 conflicts: 21 reduce/reduce
State 304 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: global_statement_list alchemia_statement

    2 global_statement_list: ε
    3                      | global_statement_list global_statement

    4 global_statement: import_statement
    5                 | declaration_statement
    6                 | function_declaration_statement
    7                 | type_define_statement

    8 block: LBRACE statement_list RBRACE

    9 $@1: ε

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 block

   11 statement_list: ε
   12               | statement_list statement

   13 statement: conditional_statement
   14          | expression_statement
   15          | iteration_statement
   16          | io_functions
   17          | declaration_statement
   18          | function_call_statement
   19          | type_define_statement
   20          | vector_statement
   21          | jump_statement
   22          | causal_statement
   23          | assignment_statement
   24          | print_statement

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON

   29 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN SEMICOLON

   31 expression_statement: expression SEMICOLON

   32 primary_expression: IDENTIFIER
   33                   | constant
   34                   | string
   35                   | LPAREN expression RPAREN
   36                   | vector_access
   37                   | pointer_statement

   38 unary_expression: primary_expression
   39                 | OP_LOGICAL_NOT unary_expression
   40                 | OP_DEREF_POINTER unary_expression
   41                 | OP_ADDR_OF unary_expression
   42                 | OP_SUBTRACT unary_expression

   43 expression: unary_expression
   44           | expression OP_ADD unary_expression
   45           | expression OP_SUBTRACT unary_expression
   46           | expression OP_MULTIPLY unary_expression
   47           | expression OP_DIVIDE unary_expression
   48           | expression OP_MODULUS unary_expression
   49           | expression OP_EXP unary_expression
   50           | expression OP_INTEGER_DIVIDE unary_expression
   51           | expression OP_EQUAL unary_expression
   52           | expression OP_NOT_EQUAL unary_expression
   53           | expression OP_LESS_THAN unary_expression
   54           | expression OP_GREATER_THAN unary_expression
   55           | expression OP_LESS_EQUAL unary_expression
   56           | expression OP_GREATER_EQUAL unary_expression
   57           | expression OP_LOGICAL_AND unary_expression
   58           | expression OP_LOGICAL_OR unary_expression
   59           | expression OP_LOGICAL_XOR unary_expression
   60           | expression OP_ASSIGN assing_value

   61 constant: LIT_INT
   62         | LIT_FLOAT
   63         | LIT_FACTUM
   64         | LIT_FICTUM
   65         | LIT_CHAR

   66 string: LIT_STRING

   67 assing_value: IDENTIFIER
   68             | vector_access
   69             | pointer_statement
   70             | struct_member_lvalue

   71 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON
   72                      | expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   73                      | pointer_declaration

   74 opcional_constant: KW_MOL
   75                  | ε

   76 list_declaration_statement: ε
   77                           | declaration_statement list_declaration_statement

   78 type_specifier: KW_TYPE_ATOMUS
   79               | KW_TYPE_FRACTIO
   80               | KW_TYPE_FRAGMENTUM
   81               | KW_TYPE_MAGNUS
   82               | KW_TYPE_MINIMUS
   83               | KW_TYPE_QUANTUM
   84               | KW_TYPE_SCRIPTUM
   85               | KW_TYPE_SYMBOLUM
   86               | KW_TYPE_VACUUM
   87               | IDENTIFIER
   88               | IDENTIFIER KW_ENUMERARE
   89               | OP_DEREF_POINTER type_specifier

   90 $@2: ε

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

   92 parameter_list: ε
   93               | parameter
   94               | parameter_list PIPE parameter

   95 parameter: IDENTIFIER type_specifier

   96 function_call_statement: LPAREN RPAREN IDENTIFIER SEMICOLON
   97                        | LPAREN argument_list RPAREN IDENTIFIER SEMICOLON

   98 argument_list: expression
   99              | argument_list PIPE expression

  100 jump_statement: KW_CONTINUUM SEMICOLON
  101               | KW_RUPTIO SEMICOLON
  102               | KW_REDIRE SEMICOLON
  103               | expression KW_REDIRE SEMICOLON

  104 $@3: ε

  105 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block conditional_non_statement

  106 $@4: ε

  107 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

  108 conditional_non_statement: ε

  109 $@5: ε

  110 conditional_non_statement: KW_NON $@5 block
  111                          | KW_NON conditional_statement

  112 causal_statement: KW_CASUS expression COLON statement_list
  113                 | KW_AXIOM COLON statement_list

  114 $@6: ε

  115 iteration_statement: LPAREN expression RPAREN KW_PERSISTO $@6 block

  116 $@7: ε

  117 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@7 block

  118 $@8: ε

  119 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@8 block

  120 $@9: ε

  121 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 block

  122 $@10: ε

  123 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@10 block

  124 io_functions: function_input_output
  125             | function_magnitudo

  126 function_input_output: identifier_langle_list
  127                      | identifier_rangle_list

  128 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON
  129                       | IDENTIFIER LANGLE identifier_langle_list

  130 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON
  131                       | IDENTIFIER RANGLE identifier_rangle_list

  132 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON

  133 type_expression: type_specifier

  134 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON
  135                      | type_define_struct
  136                      | type_define_enum

  137 $@11: ε

  138 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

  139 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

  140 enum_list: IDENTIFIER
  141          | IDENTIFIER OP_ASSIGN LIT_INT
  142          | IDENTIFIER OP_ASSIGN LIT_CHAR
  143          | enum_list PIPE IDENTIFIER
  144          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT
  145          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

  146 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  147                 | LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

  148 vector_access: IDENTIFIER LANGLE expression RANGLE

  149 pointer_statement: pointer_assignment
  150                  | pointer_dereference
  151                  | member_access_direct
  152                  | member_access_dereference
  153                  | member_access_pointer

  154 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON
  155                    | expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

  156 pointer_assignment: OP_ADDR_OF IDENTIFIER

  157 pointer_dereference: OP_DEREF_POINTER IDENTIFIER

  158 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

  159 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

  160 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_MAIN (258) 10
    KW_CASUS (259) 112
    KW_AXIOM (260) 113
    KW_CONTINUUM (261) 100
    KW_RUPTIO (262) 101
    KW_VERTERE (263) 107
    KW_DESIGNARE (264) 134 138
    KW_ENUMERARE (265) 88 139
    KW_EVOCARE (266) 29
    KW_FORMULA (267) 91
    KW_HOMUNCULUS (268) 138
    KW_ITERARE (269) 117 119 121 123
    KW_LECTURA (270) 128
    KW_MAGNITUDO (271) 132
    KW_MOL (272) 74
    KW_NON (273) 110 111
    KW_PERSISTO (274) 115
    KW_REDIRE (275) 102 103
    KW_REVELARE (276) 30 130
    KW_SI (277) 105
    KW_TYPE_ATOMUS (278) 78
    KW_TYPE_FRACTIO (279) 79
    KW_TYPE_FRAGMENTUM (280) 80
    KW_TYPE_MAGNUS (281) 81
    KW_TYPE_MINIMUS (282) 82
    KW_TYPE_QUANTUM (283) 83
    KW_TYPE_SCRIPTUM (284) 84
    KW_TYPE_SYMBOLUM (285) 85
    KW_TYPE_VACUUM (286) 86
    LIT_FACTUM (287) 63
    LIT_FICTUM (288) 64
    LIT_FLOAT <val_float> (289) 62
    LIT_INT <val_int> (290) 61 141 144
    LIT_CHAR <str> (291) 65 142 145
    LIT_STRING <str> (292) 66
    OP_ACCESS_POINTER (293) 160
    OP_ASSIGN (294) 26 27 28 60 72 91 141 142 144 145 147 155
    OP_GREATER_EQUAL (295) 56
    OP_LESS_EQUAL (296) 55
    OP_EQUAL (297) 51
    OP_NOT_EQUAL (298) 52
    OP_INTEGER_DIVIDE (299) 50
    OP_EXP (300) 49
    OP_LOGICAL_AND (301) 57
    OP_LOGICAL_OR (302) 58
    OP_MULTIPLY (303) 46
    OP_ADD (304) 44
    OP_SUBTRACT (305) 42 45
    OP_DIVIDE (306) 47
    OP_MODULUS (307) 48
    OP_ACCESS_MEMBER (308) 25 158 159
    OP_LOGICAL_NOT (309) 39
    OP_GREATER_THAN (310) 54
    OP_LESS_THAN (311) 53
    OP_LOGICAL_XOR (312) 59
    OP_ADDR_OF (313) 41 156
    OP_DEREF_POINTER (314) 40 89 154 155 157 159
    LANGLE (315) 28 128 129 146 148
    RANGLE (316) 28 130 131 146 148
    COLON (317) 112 113
    LPAREN (318) 10 30 35 91 96 97 105 107 115 117 119 121 123 132 159
    RPAREN (319) 10 30 35 91 96 97 105 107 115 117 119 121 123 132 159
    LBRACKET (320) 147
    RBRACKET (321) 147
    LBRACE (322) 8 91 107 138 139
    RBRACE (323) 8 91 107 138 139
    PIPE (324) 94 99 143 144 145
    SEMICOLON (325) 26 27 28 29 30 31 71 72 96 97 100 101 102 103 128 130 132 134 138 139 146 147 154 155
    IDENTIFIER <str> (326) 10 25 27 28 29 30 32 67 71 72 87 88 91 95 96 97 128 129 130 131 134 138 139 140 141 142 143 144 145 146 147 148 154 155 156 157 158 159 160
    LEX_ERROR (327)


Nonterminals, with rules where they appear

    $accept (73)
        on left: 0
    translation_unit (74)
        on left: 1
        on right: 0
    global_statement_list (75)
        on left: 2 3
        on right: 1 3
    global_statement (76)
        on left: 4 5 6 7
        on right: 3
    block <ptr> (77)
        on left: 8
        on right: 10 105 110 115 117 119 121 123
    alchemia_statement <expr> (78)
        on left: 10
        on right: 1
    $@1 (79)
        on left: 9
        on right: 10
    statement_list (80)
        on left: 11 12
        on right: 8 12 91 112 113
    statement (81)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24
        on right: 12
    struct_member_lvalue <ptr> (82)
        on left: 25
        on right: 26 70
    assignment_statement <expr> (83)
        on left: 26 27 28
        on right: 23
    import_statement <expr> (84)
        on left: 29
        on right: 4
    print_statement (85)
        on left: 30
        on right: 24
    expression_statement <expr> (86)
        on left: 31
        on right: 14 117 119 121 123
    primary_expression <expr> (87)
        on left: 32 33 34 35 36 37
        on right: 38
    unary_expression <expr> (88)
        on left: 38 39 40 41 42
        on right: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    expression <expr> (89)
        on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
        on right: 26 27 28 31 35 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 72 98 99 103 105 107 112 115 117 121 146 148 155
    constant <expr> (90)
        on left: 61 62 63 64 65
        on right: 33
    string <expr> (91)
        on left: 66
        on right: 34
    assing_value (92)
        on left: 67 68 69 70
        on right: 60
    declaration_statement <ptr> (93)
        on left: 71 72 73
        on right: 5 17 77 121 123
    opcional_constant (94)
        on left: 74 75
        on right: 71 72
    list_declaration_statement (95)
        on left: 76 77
        on right: 77 138
    type_specifier <str> (96)
        on left: 78 79 80 81 82 83 84 85 86 87 88 89
        on right: 71 72 89 91 95 133 134 146 154 155
    function_declaration_statement (97)
        on left: 91
        on right: 6
    $@2 (98)
        on left: 90
        on right: 91
    parameter_list (99)
        on left: 92 93 94
        on right: 91 94
    parameter (100)
        on left: 95
        on right: 93 94
    function_call_statement (101)
        on left: 96 97
        on right: 18
    argument_list <arg_list> (102)
        on left: 98 99
        on right: 97 99 147
    jump_statement (103)
        on left: 100 101 102 103
        on right: 21
    conditional_statement <expr> (104)
        on left: 105 107
        on right: 13 111
    $@3 (105)
        on left: 104
        on right: 105
    $@4 (106)
        on left: 106
        on right: 107
    conditional_non_statement <expr> (107)
        on left: 108 110 111
        on right: 105
    $@5 (108)
        on left: 109
        on right: 110
    causal_statement (109)
        on left: 112 113
        on right: 22 107
    iteration_statement (110)
        on left: 115 117 119 121 123
        on right: 15
    $@6 (111)
        on left: 114
        on right: 115
    $@7 (112)
        on left: 116
        on right: 117
    $@8 (113)
        on left: 118
        on right: 119
    $@9 (114)
        on left: 120
        on right: 121
    $@10 (115)
        on left: 122
        on right: 123
    io_functions (116)
        on left: 124 125
        on right: 16
    function_input_output (117)
        on left: 126 127
        on right: 124
    identifier_langle_list (118)
        on left: 128 129
        on right: 126 129
    identifier_rangle_list (119)
        on left: 130 131
        on right: 127 131
    function_magnitudo (120)
        on left: 132
        on right: 125
    type_expression (121)
        on left: 133
        on right: 132
    type_define_statement (122)
        on left: 134 135 136
        on right: 7 19
    type_define_struct (123)
        on left: 138
        on right: 135
    $@11 (124)
        on left: 137
        on right: 138
    type_define_enum (125)
        on left: 139
        on right: 136
    enum_list (126)
        on left: 140 141 142 143 144 145
        on right: 139 143 144 145
    vector_statement (127)
        on left: 146 147
        on right: 20
    vector_access <expr> (128)
        on left: 148
        on right: 36 68
    pointer_statement <expr> (129)
        on left: 149 150 151 152 153
        on right: 37 69
    pointer_declaration (130)
        on left: 154 155
        on right: 73
    pointer_assignment <expr> (131)
        on left: 156
        on right: 149
    pointer_dereference <expr> (132)
        on left: 157
        on right: 150
    member_access_direct <expr> (133)
        on left: 158
        on right: 151
    member_access_dereference <expr> (134)
        on left: 159
        on right: 152
    member_access_pointer <expr> (135)
        on left: 160
        on right: 153


State 0

    0 $accept: • translation_unit $end

    $default  reduce using rule 2 (global_statement_list)

    translation_unit       go to state 1
    global_statement_list  go to state 2


State 1

    0 $accept: translation_unit • $end

    $end  shift, and go to state 3


State 2

    1 translation_unit: global_statement_list • alchemia_statement
    3 global_statement_list: global_statement_list • global_statement

    KW_DESIGNARE      shift, and go to state 4
    KW_FORMULA        shift, and go to state 5
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 17

    global_statement                go to state 18
    alchemia_statement              go to state 19
    import_statement                go to state 20
    primary_expression              go to state 21
    unary_expression                go to state 22
    expression                      go to state 23
    constant                        go to state 24
    string                          go to state 25
    declaration_statement           go to state 26
    function_declaration_statement  go to state 27
    type_define_statement           go to state 28
    type_define_struct              go to state 29
    type_define_enum                go to state 30
    vector_access                   go to state 31
    pointer_statement               go to state 32
    pointer_declaration             go to state 33
    pointer_assignment              go to state 34
    pointer_dereference             go to state 35
    member_access_direct            go to state 36
    member_access_dereference       go to state 37
    member_access_pointer           go to state 38


State 3

    0 $accept: translation_unit $end •

    $default  accept


State 4

  134 type_define_statement: KW_DESIGNARE • type_specifier IDENTIFIER SEMICOLON
  138 type_define_struct: KW_DESIGNARE • IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 49

    type_specifier  go to state 50


State 5

   91 function_declaration_statement: KW_FORMULA • LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    LPAREN  shift, and go to state 51


State 6

   63 constant: LIT_FACTUM •

    $default  reduce using rule 63 (constant)


State 7

   64 constant: LIT_FICTUM •

    $default  reduce using rule 64 (constant)


State 8

   62 constant: LIT_FLOAT •

    $default  reduce using rule 62 (constant)


State 9

   61 constant: LIT_INT •

    $default  reduce using rule 61 (constant)


State 10

   65 constant: LIT_CHAR •

    $default  reduce using rule 65 (constant)


State 11

   66 string: LIT_STRING •

    $default  reduce using rule 66 (string)


State 12

   42 unary_expression: OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 53
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 13

   39 unary_expression: OP_LOGICAL_NOT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 54
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 14

   41 unary_expression: OP_ADDR_OF • unary_expression
  156 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 55

    primary_expression         go to state 21
    unary_expression           go to state 56
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 15

   40 unary_expression: OP_DEREF_POINTER • unary_expression
  157 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 57

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 16

   35 primary_expression: LPAREN • expression RPAREN
  159 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 59
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 60
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 17

   10 alchemia_statement: IDENTIFIER • LPAREN RPAREN KW_MAIN $@1 block
   29 import_statement: IDENTIFIER • KW_EVOCARE SEMICOLON
   32 primary_expression: IDENTIFIER •
   71 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  139 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  154 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_EVOCARE          shift, and go to state 61
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    LPAREN              shift, and go to state 66
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 18

    3 global_statement_list: global_statement_list global_statement •

    $default  reduce using rule 3 (global_statement_list)


State 19

    1 translation_unit: global_statement_list alchemia_statement •

    $default  reduce using rule 1 (translation_unit)


State 20

    4 global_statement: import_statement •

    $default  reduce using rule 4 (global_statement)


State 21

   38 unary_expression: primary_expression •

    $default  reduce using rule 38 (unary_expression)


State 22

   43 expression: unary_expression •

    $default  reduce using rule 43 (expression)


State 23

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
   72 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  155 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86


State 24

   33 primary_expression: constant •

    $default  reduce using rule 33 (primary_expression)


State 25

   34 primary_expression: string •

    $default  reduce using rule 34 (primary_expression)


State 26

    5 global_statement: declaration_statement •

    $default  reduce using rule 5 (global_statement)


State 27

    6 global_statement: function_declaration_statement •

    $default  reduce using rule 6 (global_statement)


State 28

    7 global_statement: type_define_statement •

    $default  reduce using rule 7 (global_statement)


State 29

  135 type_define_statement: type_define_struct •

    $default  reduce using rule 135 (type_define_statement)


State 30

  136 type_define_statement: type_define_enum •

    $default  reduce using rule 136 (type_define_statement)


State 31

   36 primary_expression: vector_access •

    $default  reduce using rule 36 (primary_expression)


State 32

   37 primary_expression: pointer_statement •

    $default  reduce using rule 37 (primary_expression)


State 33

   73 declaration_statement: pointer_declaration •

    $default  reduce using rule 73 (declaration_statement)


State 34

  149 pointer_statement: pointer_assignment •

    $default  reduce using rule 149 (pointer_statement)


State 35

  150 pointer_statement: pointer_dereference •

    $default  reduce using rule 150 (pointer_statement)


State 36

  151 pointer_statement: member_access_direct •

    $default  reduce using rule 151 (pointer_statement)


State 37

  152 pointer_statement: member_access_dereference •

    $default  reduce using rule 152 (pointer_statement)


State 38

  153 pointer_statement: member_access_pointer •

    $default  reduce using rule 153 (pointer_statement)


State 39

   78 type_specifier: KW_TYPE_ATOMUS •

    $default  reduce using rule 78 (type_specifier)


State 40

   79 type_specifier: KW_TYPE_FRACTIO •

    $default  reduce using rule 79 (type_specifier)


State 41

   80 type_specifier: KW_TYPE_FRAGMENTUM •

    $default  reduce using rule 80 (type_specifier)


State 42

   81 type_specifier: KW_TYPE_MAGNUS •

    $default  reduce using rule 81 (type_specifier)


State 43

   82 type_specifier: KW_TYPE_MINIMUS •

    $default  reduce using rule 82 (type_specifier)


State 44

   83 type_specifier: KW_TYPE_QUANTUM •

    $default  reduce using rule 83 (type_specifier)


State 45

   84 type_specifier: KW_TYPE_SCRIPTUM •

    $default  reduce using rule 84 (type_specifier)


State 46

   85 type_specifier: KW_TYPE_SYMBOLUM •

    $default  reduce using rule 85 (type_specifier)


State 47

   86 type_specifier: KW_TYPE_VACUUM •

    $default  reduce using rule 86 (type_specifier)


State 48

   89 type_specifier: OP_DEREF_POINTER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 87


State 49

   87 type_specifier: IDENTIFIER •
   88               | IDENTIFIER • KW_ENUMERARE
  138 type_define_struct: KW_DESIGNARE IDENTIFIER • LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_ENUMERARE  shift, and go to state 88
    LBRACE        shift, and go to state 89

    $default  reduce using rule 87 (type_specifier)


State 50

  134 type_define_statement: KW_DESIGNARE type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 90


State 51

   91 function_declaration_statement: KW_FORMULA LPAREN • parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 92 (parameter_list)

    parameter_list  go to state 92
    parameter       go to state 93


State 52

   32 primary_expression: IDENTIFIER •
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    $default  reduce using rule 32 (primary_expression)


State 53

   42 unary_expression: OP_SUBTRACT unary_expression •

    $default  reduce using rule 42 (unary_expression)


State 54

   39 unary_expression: OP_LOGICAL_NOT unary_expression •

    $default  reduce using rule 39 (unary_expression)


State 55

   32 primary_expression: IDENTIFIER •
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  156 pointer_assignment: OP_ADDR_OF IDENTIFIER •
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 32 (primary_expression)
    KW_REDIRE          [reduce using rule 156 (pointer_assignment)]
    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 156 (pointer_assignment)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 156 (pointer_assignment)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 156 (pointer_assignment)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 156 (pointer_assignment)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 156 (pointer_assignment)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 156 (pointer_assignment)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 156 (pointer_assignment)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 156 (pointer_assignment)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 156 (pointer_assignment)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 156 (pointer_assignment)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 156 (pointer_assignment)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 156 (pointer_assignment)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 156 (pointer_assignment)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 156 (pointer_assignment)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 156 (pointer_assignment)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 156 (pointer_assignment)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 156 (pointer_assignment)]
    RANGLE             reduce using rule 32 (primary_expression)
    RANGLE             [reduce using rule 156 (pointer_assignment)]
    COLON              reduce using rule 32 (primary_expression)
    COLON              [reduce using rule 156 (pointer_assignment)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 156 (pointer_assignment)]
    RBRACKET           reduce using rule 32 (primary_expression)
    RBRACKET           [reduce using rule 156 (pointer_assignment)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 156 (pointer_assignment)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 156 (pointer_assignment)]
    $default           reduce using rule 32 (primary_expression)


State 56

   41 unary_expression: OP_ADDR_OF unary_expression •

    $default  reduce using rule 41 (unary_expression)


State 57

   32 primary_expression: IDENTIFIER •
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 32 (primary_expression)
    KW_REDIRE          [reduce using rule 157 (pointer_dereference)]
    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 157 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 157 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 157 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 157 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 157 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 157 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 157 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 157 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 157 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 157 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 157 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 157 (pointer_dereference)]
    RANGLE             reduce using rule 32 (primary_expression)
    RANGLE             [reduce using rule 157 (pointer_dereference)]
    COLON              reduce using rule 32 (primary_expression)
    COLON              [reduce using rule 157 (pointer_dereference)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 157 (pointer_dereference)]
    RBRACKET           reduce using rule 32 (primary_expression)
    RBRACKET           [reduce using rule 157 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 157 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 157 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 58

   40 unary_expression: OP_DEREF_POINTER unary_expression •

    $default  reduce using rule 40 (unary_expression)


State 59

   40 unary_expression: OP_DEREF_POINTER • unary_expression
  157 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  159 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 94

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 60

   35 primary_expression: LPAREN expression • RPAREN
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 96


State 61

   29 import_statement: IDENTIFIER KW_EVOCARE • SEMICOLON

    SEMICOLON  shift, and go to state 97


State 62

  160 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 98


State 63

  158 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 99


State 64

   89 type_specifier: OP_DEREF_POINTER • type_specifier
  154 pointer_declaration: IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 100


State 65

  148 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 66

   10 alchemia_statement: IDENTIFIER LPAREN • RPAREN KW_MAIN $@1 block

    RPAREN  shift, and go to state 102


State 67

  139 type_define_enum: IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 103

    enum_list  go to state 104


State 68

   87 type_specifier: IDENTIFIER •
   88               | IDENTIFIER • KW_ENUMERARE

    KW_ENUMERARE  shift, and go to state 88

    $default  reduce using rule 87 (type_specifier)


State 69

   71 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 75 (opcional_constant)

    opcional_constant  go to state 106


State 70

   60 expression: expression OP_ASSIGN • assing_value
   72 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  155 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ADDR_OF        shift, and go to state 107
    OP_DEREF_POINTER  shift, and go to state 108
    LPAREN            shift, and go to state 109
    IDENTIFIER        shift, and go to state 110

    struct_member_lvalue       go to state 111
    assing_value               go to state 112
    vector_access              go to state 113
    pointer_statement          go to state 114
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 71

   56 expression: expression OP_GREATER_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 115
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 72

   55 expression: expression OP_LESS_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 116
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 73

   51 expression: expression OP_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 117
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 74

   52 expression: expression OP_NOT_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 118
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 75

   50 expression: expression OP_INTEGER_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 119
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 76

   49 expression: expression OP_EXP • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 120
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 77

   57 expression: expression OP_LOGICAL_AND • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 121
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 78

   58 expression: expression OP_LOGICAL_OR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 122
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 79

   46 expression: expression OP_MULTIPLY • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 123
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 80

   44 expression: expression OP_ADD • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 124
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 81

   45 expression: expression OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 125
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 82

   47 expression: expression OP_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 126
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 83

   48 expression: expression OP_MODULUS • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 127
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 84

   54 expression: expression OP_GREATER_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 128
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 85

   53 expression: expression OP_LESS_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 129
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 86

   59 expression: expression OP_LOGICAL_XOR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 130
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 87

   89 type_specifier: OP_DEREF_POINTER type_specifier •

    $default  reduce using rule 89 (type_specifier)


State 88

   88 type_specifier: IDENTIFIER KW_ENUMERARE •

    $default  reduce using rule 88 (type_specifier)


State 89

  138 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE • $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    $default  reduce using rule 137 ($@11)

    $@11  go to state 131


State 90

  134 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 132


State 91

   95 parameter: IDENTIFIER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 133


State 92

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list • RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE
   94 parameter_list: parameter_list • PIPE parameter

    RPAREN  shift, and go to state 134
    PIPE    shift, and go to state 135


State 93

   93 parameter_list: parameter •

    $default  reduce using rule 93 (parameter_list)


State 94

   32 primary_expression: IDENTIFIER •
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  159 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 136

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 157 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 157 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 157 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 157 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 157 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 157 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 157 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 157 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 157 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 157 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 157 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 157 (pointer_dereference)]
    RPAREN             [reduce using rule 32 (primary_expression)]
    RPAREN             [reduce using rule 157 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 95

   60 expression: expression OP_ASSIGN • assing_value

    OP_ADDR_OF        shift, and go to state 107
    OP_DEREF_POINTER  shift, and go to state 108
    LPAREN            shift, and go to state 109
    IDENTIFIER        shift, and go to state 137

    struct_member_lvalue       go to state 111
    assing_value               go to state 112
    vector_access              go to state 113
    pointer_statement          go to state 114
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 96

   35 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 35 (primary_expression)


State 97

   29 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON •

    $default  reduce using rule 29 (import_statement)


State 98

  160 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER •

    $default  reduce using rule 160 (member_access_pointer)


State 99

  158 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 158 (member_access_direct)


State 100

   89 type_specifier: OP_DEREF_POINTER type_specifier •
  154 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 138

    SEMICOLON  [reduce using rule 89 (type_specifier)]
    $default   reduce using rule 89 (type_specifier)


State 101

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
  148 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 139


State 102

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN • KW_MAIN $@1 block

    KW_MAIN  shift, and go to state 140


State 103

  140 enum_list: IDENTIFIER •
  141          | IDENTIFIER • OP_ASSIGN LIT_INT
  142          | IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 141

    $default  reduce using rule 140 (enum_list)


State 104

  139 type_define_enum: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
  143 enum_list: enum_list • PIPE IDENTIFIER
  144          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_INT
  145          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

    RBRACE  shift, and go to state 142
    PIPE    shift, and go to state 143


State 105

   74 opcional_constant: KW_MOL •

    $default  reduce using rule 74 (opcional_constant)


State 106

   71 declaration_statement: IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 144


State 107

  156 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    IDENTIFIER  shift, and go to state 145


State 108

  157 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 146


State 109

  159 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    OP_DEREF_POINTER  shift, and go to state 147


State 110

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   67 assing_value: IDENTIFIER •
   72 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  155 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 148
    OP_DEREF_POINTER    shift, and go to state 149
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 67 (assing_value)

    type_specifier  go to state 150


State 111

   70 assing_value: struct_member_lvalue •

    $default  reduce using rule 70 (assing_value)


State 112

   60 expression: expression OP_ASSIGN assing_value •

    $default  reduce using rule 60 (expression)


State 113

   68 assing_value: vector_access •

    $default  reduce using rule 68 (assing_value)


State 114

   69 assing_value: pointer_statement •

    $default  reduce using rule 69 (assing_value)


State 115

   56 expression: expression OP_GREATER_EQUAL unary_expression •

    $default  reduce using rule 56 (expression)


State 116

   55 expression: expression OP_LESS_EQUAL unary_expression •

    $default  reduce using rule 55 (expression)


State 117

   51 expression: expression OP_EQUAL unary_expression •

    $default  reduce using rule 51 (expression)


State 118

   52 expression: expression OP_NOT_EQUAL unary_expression •

    $default  reduce using rule 52 (expression)


State 119

   50 expression: expression OP_INTEGER_DIVIDE unary_expression •

    $default  reduce using rule 50 (expression)


State 120

   49 expression: expression OP_EXP unary_expression •

    $default  reduce using rule 49 (expression)


State 121

   57 expression: expression OP_LOGICAL_AND unary_expression •

    $default  reduce using rule 57 (expression)


State 122

   58 expression: expression OP_LOGICAL_OR unary_expression •

    $default  reduce using rule 58 (expression)


State 123

   46 expression: expression OP_MULTIPLY unary_expression •

    $default  reduce using rule 46 (expression)


State 124

   44 expression: expression OP_ADD unary_expression •

    $default  reduce using rule 44 (expression)


State 125

   45 expression: expression OP_SUBTRACT unary_expression •

    $default  reduce using rule 45 (expression)


State 126

   47 expression: expression OP_DIVIDE unary_expression •

    $default  reduce using rule 47 (expression)


State 127

   48 expression: expression OP_MODULUS unary_expression •

    $default  reduce using rule 48 (expression)


State 128

   54 expression: expression OP_GREATER_THAN unary_expression •

    $default  reduce using rule 54 (expression)


State 129

   53 expression: expression OP_LESS_THAN unary_expression •

    $default  reduce using rule 53 (expression)


State 130

   59 expression: expression OP_LOGICAL_XOR unary_expression •

    $default  reduce using rule 59 (expression)


State 131

  138 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 • list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 151

    $default  reduce using rule 76 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 152
    list_declaration_statement  go to state 153
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 132

  134 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 134 (type_define_statement)


State 133

   95 parameter: IDENTIFIER type_specifier •

    $default  reduce using rule 95 (parameter)


State 134

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN • IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 154


State 135

   94 parameter_list: parameter_list PIPE • parameter

    IDENTIFIER  shift, and go to state 91

    parameter  go to state 155


State 136

  159 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN • OP_ACCESS_MEMBER IDENTIFIER

    OP_ACCESS_MEMBER  shift, and go to state 156


State 137

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   67 assing_value: IDENTIFIER •
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 148
    LANGLE             shift, and go to state 65

    $default  reduce using rule 67 (assing_value)


State 138

  154 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 154 (pointer_declaration)


State 139

  148 vector_access: IDENTIFIER LANGLE expression RANGLE •

    $default  reduce using rule 148 (vector_access)


State 140

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN • $@1 block

    $default  reduce using rule 9 ($@1)

    $@1  go to state 157


State 141

  141 enum_list: IDENTIFIER OP_ASSIGN • LIT_INT
  142          | IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 158
    LIT_CHAR  shift, and go to state 159


State 142

  139 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 160


State 143

  143 enum_list: enum_list PIPE • IDENTIFIER
  144          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_INT
  145          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_CHAR

    IDENTIFIER  shift, and go to state 161


State 144

   71 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 71 (declaration_statement)


State 145

  156 pointer_assignment: OP_ADDR_OF IDENTIFIER •

    $default  reduce using rule 156 (pointer_assignment)


State 146

  157 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •

    $default  reduce using rule 157 (pointer_dereference)


State 147

  159 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    IDENTIFIER  shift, and go to state 162


State 148

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER
  158 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 163


State 149

   89 type_specifier: OP_DEREF_POINTER • type_specifier
  155 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 164


State 150

   72 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 75 (opcional_constant)

    opcional_constant  go to state 165


State 151

   32 primary_expression: IDENTIFIER •
   71 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  154 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 152

   77 list_declaration_statement: declaration_statement • list_declaration_statement

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 151

    $default  reduce using rule 76 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 152
    list_declaration_statement  go to state 166
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 153

  138 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement • RBRACE KW_HOMUNCULUS SEMICOLON

    RBRACE  shift, and go to state 167


State 154

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER • OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    OP_ASSIGN  shift, and go to state 168


State 155

   94 parameter_list: parameter_list PIPE parameter •

    $default  reduce using rule 94 (parameter_list)


State 156

  159 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 169


State 157

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 • block

    LBRACE  shift, and go to state 170

    block  go to state 171


State 158

  141 enum_list: IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 141 (enum_list)


State 159

  142 enum_list: IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 142 (enum_list)


State 160

  139 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 172


State 161

  143 enum_list: enum_list PIPE IDENTIFIER •
  144          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_INT
  145          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 173

    $default  reduce using rule 143 (enum_list)


State 162

  159 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER

    RPAREN  shift, and go to state 136


State 163

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •
  158 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    KW_REDIRE          reduce using rule 25 (struct_member_lvalue)
    KW_REDIRE          [reduce using rule 158 (member_access_direct)]
    OP_ASSIGN          reduce using rule 25 (struct_member_lvalue)
    OP_ASSIGN          [reduce using rule 158 (member_access_direct)]
    OP_GREATER_EQUAL   reduce using rule 25 (struct_member_lvalue)
    OP_GREATER_EQUAL   [reduce using rule 158 (member_access_direct)]
    OP_LESS_EQUAL      reduce using rule 25 (struct_member_lvalue)
    OP_LESS_EQUAL      [reduce using rule 158 (member_access_direct)]
    OP_EQUAL           reduce using rule 25 (struct_member_lvalue)
    OP_EQUAL           [reduce using rule 158 (member_access_direct)]
    OP_NOT_EQUAL       reduce using rule 25 (struct_member_lvalue)
    OP_NOT_EQUAL       [reduce using rule 158 (member_access_direct)]
    OP_INTEGER_DIVIDE  reduce using rule 25 (struct_member_lvalue)
    OP_INTEGER_DIVIDE  [reduce using rule 158 (member_access_direct)]
    OP_EXP             reduce using rule 25 (struct_member_lvalue)
    OP_EXP             [reduce using rule 158 (member_access_direct)]
    OP_LOGICAL_AND     reduce using rule 25 (struct_member_lvalue)
    OP_LOGICAL_AND     [reduce using rule 158 (member_access_direct)]
    OP_LOGICAL_OR      reduce using rule 25 (struct_member_lvalue)
    OP_LOGICAL_OR      [reduce using rule 158 (member_access_direct)]
    OP_MULTIPLY        reduce using rule 25 (struct_member_lvalue)
    OP_MULTIPLY        [reduce using rule 158 (member_access_direct)]
    OP_ADD             reduce using rule 25 (struct_member_lvalue)
    OP_ADD             [reduce using rule 158 (member_access_direct)]
    OP_SUBTRACT        reduce using rule 25 (struct_member_lvalue)
    OP_SUBTRACT        [reduce using rule 158 (member_access_direct)]
    OP_DIVIDE          reduce using rule 25 (struct_member_lvalue)
    OP_DIVIDE          [reduce using rule 158 (member_access_direct)]
    OP_MODULUS         reduce using rule 25 (struct_member_lvalue)
    OP_MODULUS         [reduce using rule 158 (member_access_direct)]
    OP_GREATER_THAN    reduce using rule 25 (struct_member_lvalue)
    OP_GREATER_THAN    [reduce using rule 158 (member_access_direct)]
    OP_LESS_THAN       reduce using rule 25 (struct_member_lvalue)
    OP_LESS_THAN       [reduce using rule 158 (member_access_direct)]
    OP_LOGICAL_XOR     reduce using rule 25 (struct_member_lvalue)
    OP_LOGICAL_XOR     [reduce using rule 158 (member_access_direct)]
    RANGLE             reduce using rule 25 (struct_member_lvalue)
    RANGLE             [reduce using rule 158 (member_access_direct)]
    COLON              reduce using rule 25 (struct_member_lvalue)
    COLON              [reduce using rule 158 (member_access_direct)]
    RPAREN             reduce using rule 25 (struct_member_lvalue)
    RPAREN             [reduce using rule 158 (member_access_direct)]
    RBRACKET           reduce using rule 25 (struct_member_lvalue)
    RBRACKET           [reduce using rule 158 (member_access_direct)]
    PIPE               reduce using rule 25 (struct_member_lvalue)
    PIPE               [reduce using rule 158 (member_access_direct)]
    SEMICOLON          reduce using rule 25 (struct_member_lvalue)
    SEMICOLON          [reduce using rule 158 (member_access_direct)]
    $default           reduce using rule 25 (struct_member_lvalue)


State 164

   89 type_specifier: OP_DEREF_POINTER type_specifier •
  155 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 174

    SEMICOLON  [reduce using rule 89 (type_specifier)]
    $default   reduce using rule 89 (type_specifier)


State 165

   72 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 175


State 166

   77 list_declaration_statement: declaration_statement list_declaration_statement •

    $default  reduce using rule 77 (list_declaration_statement)


State 167

  138 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE • KW_HOMUNCULUS SEMICOLON

    KW_HOMUNCULUS  shift, and go to state 176


State 168

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN • type_specifier $@2 LBRACE statement_list RBRACE

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 177


State 169

  159 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 159 (member_access_dereference)


State 170

    8 block: LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 178


State 171

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 block •

    $default  reduce using rule 10 (alchemia_statement)


State 172

  139 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 139 (type_define_enum)


State 173

  144 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_INT
  145          | enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 179
    LIT_CHAR  shift, and go to state 180


State 174

  155 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 155 (pointer_declaration)


State 175

   72 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 72 (declaration_statement)


State 176

  138 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS • SEMICOLON

    SEMICOLON  shift, and go to state 181


State 177

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier • $@2 LBRACE statement_list RBRACE

    $default  reduce using rule 90 ($@2)

    $@2  go to state 182


State 178

    8 block: LBRACE statement_list • RBRACE
   12 statement_list: statement_list • statement

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    KW_REVELARE       shift, and go to state 188
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 189
    LBRACKET          shift, and go to state 190
    RBRACE            shift, and go to state 191
    IDENTIFIER        shift, and go to state 192

    statement                  go to state 193
    assignment_statement       go to state 194
    print_statement            go to state 195
    expression_statement       go to state 196
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 197
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 198
    function_call_statement    go to state 199
    jump_statement             go to state 200
    conditional_statement      go to state 201
    causal_statement           go to state 202
    iteration_statement        go to state 203
    io_functions               go to state 204
    function_input_output      go to state 205
    identifier_langle_list     go to state 206
    identifier_rangle_list     go to state 207
    function_magnitudo         go to state 208
    type_define_statement      go to state 209
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 210
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 179

  144 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 144 (enum_list)


State 180

  145 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 145 (enum_list)


State 181

  138 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON •

    $default  reduce using rule 138 (type_define_struct)


State 182

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 • LBRACE statement_list RBRACE

    LBRACE  shift, and go to state 211


State 183

  112 causal_statement: KW_CASUS • expression COLON statement_list

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 212
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 184

  113 causal_statement: KW_AXIOM • COLON statement_list

    COLON  shift, and go to state 213


State 185

  100 jump_statement: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 214


State 186

  101 jump_statement: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 215


State 187

  102 jump_statement: KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 216


State 188

   30 print_statement: KW_REVELARE • LPAREN IDENTIFIER RPAREN SEMICOLON

    LPAREN  shift, and go to state 217


State 189

   35 primary_expression: LPAREN • expression RPAREN
   96 function_call_statement: LPAREN • RPAREN IDENTIFIER SEMICOLON
   97                        | LPAREN • argument_list RPAREN IDENTIFIER SEMICOLON
  105 conditional_statement: LPAREN • expression RPAREN KW_SI $@3 block conditional_non_statement
  107                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  115 iteration_statement: LPAREN • expression RPAREN KW_PERSISTO $@6 block
  117                    | LPAREN • expression_statement expression_statement expression RPAREN KW_ITERARE $@7 block
  119                    | LPAREN • expression_statement expression_statement RPAREN KW_ITERARE $@8 block
  121                    | LPAREN • declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 block
  123                    | LPAREN • declaration_statement expression_statement RPAREN KW_ITERARE $@10 block
  132 function_magnitudo: LPAREN • type_expression RPAREN KW_MAGNITUDO SEMICOLON
  159 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 218
    LPAREN              shift, and go to state 16
    RPAREN              shift, and go to state 219
    IDENTIFIER          shift, and go to state 220

    expression_statement       go to state 221
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 222
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 223
    type_specifier             go to state 224
    argument_list              go to state 225
    type_expression            go to state 226
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 190

  147 vector_statement: LBRACKET • argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 227
    constant                   go to state 24
    string                     go to state 25
    argument_list              go to state 228
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 191

    8 block: LBRACE statement_list RBRACE •

    $default  reduce using rule 8 (block)


State 192

   32 primary_expression: IDENTIFIER •
   71 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  128 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  129                       | IDENTIFIER • LANGLE identifier_langle_list
  130 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  131                       | IDENTIFIER • RANGLE identifier_rangle_list
  139 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  146 vector_statement: IDENTIFIER • type_specifier LANGLE expression RANGLE SEMICOLON
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  154 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 229
    RANGLE              shift, and go to state 230
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 231


State 193

   12 statement_list: statement_list statement •

    $default  reduce using rule 12 (statement_list)


State 194

   23 statement: assignment_statement •

    $default  reduce using rule 23 (statement)


State 195

   24 statement: print_statement •

    $default  reduce using rule 24 (statement)


State 196

   14 statement: expression_statement •

    $default  reduce using rule 14 (statement)


State 197

   26 assignment_statement: expression • OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression • OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression • OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   31 expression_statement: expression • SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
   72 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  103 jump_statement: expression • KW_REDIRE SEMICOLON
  155 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    KW_REDIRE          shift, and go to state 232
    OP_ASSIGN          shift, and go to state 233
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 234


State 198

   17 statement: declaration_statement •

    $default  reduce using rule 17 (statement)


State 199

   18 statement: function_call_statement •

    $default  reduce using rule 18 (statement)


State 200

   21 statement: jump_statement •

    $default  reduce using rule 21 (statement)


State 201

   13 statement: conditional_statement •

    $default  reduce using rule 13 (statement)


State 202

   22 statement: causal_statement •

    $default  reduce using rule 22 (statement)


State 203

   15 statement: iteration_statement •

    $default  reduce using rule 15 (statement)


State 204

   16 statement: io_functions •

    $default  reduce using rule 16 (statement)


State 205

  124 io_functions: function_input_output •

    $default  reduce using rule 124 (io_functions)


State 206

  126 function_input_output: identifier_langle_list •

    $default  reduce using rule 126 (function_input_output)


State 207

  127 function_input_output: identifier_rangle_list •

    $default  reduce using rule 127 (function_input_output)


State 208

  125 io_functions: function_magnitudo •

    $default  reduce using rule 125 (io_functions)


State 209

   19 statement: type_define_statement •

    $default  reduce using rule 19 (statement)


State 210

   20 statement: vector_statement •

    $default  reduce using rule 20 (statement)


State 211

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 235


State 212

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
  112 causal_statement: KW_CASUS expression • COLON statement_list

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    COLON              shift, and go to state 236


State 213

  113 causal_statement: KW_AXIOM COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 237


State 214

  100 jump_statement: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 100 (jump_statement)


State 215

  101 jump_statement: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 101 (jump_statement)


State 216

  102 jump_statement: KW_REDIRE SEMICOLON •

    $default  reduce using rule 102 (jump_statement)


State 217

   30 print_statement: KW_REVELARE LPAREN • IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER  shift, and go to state 238


State 218

   40 unary_expression: OP_DEREF_POINTER • unary_expression
   89 type_specifier: OP_DEREF_POINTER • type_specifier
  157 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  159 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 239
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 240

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 219

   96 function_call_statement: LPAREN RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 241


State 220

   32 primary_expression: IDENTIFIER •
   71 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
   87 type_specifier: IDENTIFIER •
   88               | IDENTIFIER • KW_ENUMERARE
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  154 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE        shift, and go to state 88
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    RPAREN    reduce using rule 32 (primary_expression)
    RPAREN    [reduce using rule 87 (type_specifier)]
    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 221

  117 iteration_statement: LPAREN expression_statement • expression_statement expression RPAREN KW_ITERARE $@7 block
  119                    | LPAREN expression_statement • expression_statement RPAREN KW_ITERARE $@8 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 242
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 243
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 222

   31 expression_statement: expression • SEMICOLON
   35 primary_expression: LPAREN expression • RPAREN
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
   72 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   98 argument_list: expression •
  105 conditional_statement: LPAREN expression • RPAREN KW_SI $@3 block conditional_non_statement
  107                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  115 iteration_statement: LPAREN expression • RPAREN KW_PERSISTO $@6 block
  155 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 244
    SEMICOLON          shift, and go to state 234

    RPAREN    [reduce using rule 98 (argument_list)]
    $default  reduce using rule 98 (argument_list)


State 223

  121 iteration_statement: LPAREN declaration_statement • expression_statement expression RPAREN KW_ITERARE $@9 block
  123                    | LPAREN declaration_statement • expression_statement RPAREN KW_ITERARE $@10 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 245
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 243
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 224

  133 type_expression: type_specifier •

    $default  reduce using rule 133 (type_expression)


State 225

   97 function_call_statement: LPAREN argument_list • RPAREN IDENTIFIER SEMICOLON
   99 argument_list: argument_list • PIPE expression

    RPAREN  shift, and go to state 246
    PIPE    shift, and go to state 247


State 226

  132 function_magnitudo: LPAREN type_expression • RPAREN KW_MAGNITUDO SEMICOLON

    RPAREN  shift, and go to state 248


State 227

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
   98 argument_list: expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 98 (argument_list)


State 228

   99 argument_list: argument_list • PIPE expression
  147 vector_statement: LBRACKET argument_list • RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    RBRACKET  shift, and go to state 249
    PIPE      shift, and go to state 247


State 229

  128 identifier_langle_list: IDENTIFIER LANGLE • KW_LECTURA SEMICOLON
  129                       | IDENTIFIER LANGLE • identifier_langle_list
  148 vector_access: IDENTIFIER LANGLE • expression RANGLE

    KW_LECTURA        shift, and go to state 250
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 251

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    identifier_langle_list     go to state 252
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 230

  130 identifier_rangle_list: IDENTIFIER RANGLE • KW_REVELARE SEMICOLON
  131                       | IDENTIFIER RANGLE • identifier_rangle_list

    KW_REVELARE  shift, and go to state 253
    IDENTIFIER   shift, and go to state 254

    identifier_rangle_list  go to state 255


State 231

   71 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON
  146 vector_statement: IDENTIFIER type_specifier • LANGLE expression RANGLE SEMICOLON

    KW_MOL  shift, and go to state 105
    LANGLE  shift, and go to state 256

    $default  reduce using rule 75 (opcional_constant)

    opcional_constant  go to state 106


State 232

  103 jump_statement: expression KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 257


State 233

   26 assignment_statement: expression OP_ASSIGN • struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN • IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN • IDENTIFIER LANGLE expression RANGLE SEMICOLON
   60 expression: expression OP_ASSIGN • assing_value
   72 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  155 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ADDR_OF        shift, and go to state 107
    OP_DEREF_POINTER  shift, and go to state 108
    LPAREN            shift, and go to state 109
    IDENTIFIER        shift, and go to state 258

    struct_member_lvalue       go to state 259
    assing_value               go to state 112
    vector_access              go to state 113
    pointer_statement          go to state 114
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 234

   31 expression_statement: expression SEMICOLON •

    $default  reduce using rule 31 (expression_statement)


State 235

   12 statement_list: statement_list • statement
   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list • RBRACE

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    KW_REVELARE       shift, and go to state 188
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 189
    LBRACKET          shift, and go to state 190
    RBRACE            shift, and go to state 260
    IDENTIFIER        shift, and go to state 192

    statement                  go to state 193
    assignment_statement       go to state 194
    print_statement            go to state 195
    expression_statement       go to state 196
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 197
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 198
    function_call_statement    go to state 199
    jump_statement             go to state 200
    conditional_statement      go to state 201
    causal_statement           go to state 202
    iteration_statement        go to state 203
    io_functions               go to state 204
    function_input_output      go to state 205
    identifier_langle_list     go to state 206
    identifier_rangle_list     go to state 207
    function_magnitudo         go to state 208
    type_define_statement      go to state 209
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 210
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 236

  112 causal_statement: KW_CASUS expression COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 261


State 237

   12 statement_list: statement_list • statement
  113 causal_statement: KW_AXIOM COLON statement_list •

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    KW_REVELARE       shift, and go to state 188
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 189
    LBRACKET          shift, and go to state 190
    IDENTIFIER        shift, and go to state 192

    KW_CASUS          [reduce using rule 113 (causal_statement)]
    KW_AXIOM          [reduce using rule 113 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 113 (causal_statement)]
    KW_RUPTIO         [reduce using rule 113 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 113 (causal_statement)]
    KW_REDIRE         [reduce using rule 113 (causal_statement)]
    KW_REVELARE       [reduce using rule 113 (causal_statement)]
    LIT_FACTUM        [reduce using rule 113 (causal_statement)]
    LIT_FICTUM        [reduce using rule 113 (causal_statement)]
    LIT_FLOAT         [reduce using rule 113 (causal_statement)]
    LIT_INT           [reduce using rule 113 (causal_statement)]
    LIT_CHAR          [reduce using rule 113 (causal_statement)]
    LIT_STRING        [reduce using rule 113 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 113 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 113 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 113 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 113 (causal_statement)]
    LPAREN            [reduce using rule 113 (causal_statement)]
    LBRACKET          [reduce using rule 113 (causal_statement)]
    IDENTIFIER        [reduce using rule 113 (causal_statement)]
    $default          reduce using rule 113 (causal_statement)

    statement                  go to state 193
    assignment_statement       go to state 194
    print_statement            go to state 195
    expression_statement       go to state 196
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 197
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 198
    function_call_statement    go to state 199
    jump_statement             go to state 200
    conditional_statement      go to state 201
    causal_statement           go to state 202
    iteration_statement        go to state 203
    io_functions               go to state 204
    function_input_output      go to state 205
    identifier_langle_list     go to state 206
    identifier_rangle_list     go to state 207
    function_magnitudo         go to state 208
    type_define_statement      go to state 209
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 210
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 238

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER • RPAREN SEMICOLON

    RPAREN  shift, and go to state 262


State 239

   40 unary_expression: OP_DEREF_POINTER • unary_expression
   89 type_specifier: OP_DEREF_POINTER • type_specifier
  157 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 239
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 263

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 240

   32 primary_expression: IDENTIFIER •
   87 type_specifier: IDENTIFIER •
   88               | IDENTIFIER • KW_ENUMERARE
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  159 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 136

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 157 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 157 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 157 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 157 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 157 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 157 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 157 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 157 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 157 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 157 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 157 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 157 (pointer_dereference)]
    RPAREN             [reduce using rule 32 (primary_expression)]
    RPAREN             [reduce using rule 87 (type_specifier)]
    RPAREN             [reduce using rule 157 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 157 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 157 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 241

   96 function_call_statement: LPAREN RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 264


State 242

  117 iteration_statement: LPAREN expression_statement expression_statement • expression RPAREN KW_ITERARE $@7 block
  119                    | LPAREN expression_statement expression_statement • RPAREN KW_ITERARE $@8 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 265
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 266
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 243

   31 expression_statement: expression • SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 234


State 244

   35 primary_expression: LPAREN expression RPAREN •
  105 conditional_statement: LPAREN expression RPAREN • KW_SI $@3 block conditional_non_statement
  107                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE
  115 iteration_statement: LPAREN expression RPAREN • KW_PERSISTO $@6 block

    KW_VERTERE   shift, and go to state 267
    KW_PERSISTO  shift, and go to state 268
    KW_SI        shift, and go to state 269

    $default  reduce using rule 35 (primary_expression)


State 245

  121 iteration_statement: LPAREN declaration_statement expression_statement • expression RPAREN KW_ITERARE $@9 block
  123                    | LPAREN declaration_statement expression_statement • RPAREN KW_ITERARE $@10 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 270
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 271
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 246

   97 function_call_statement: LPAREN argument_list RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 272


State 247

   99 argument_list: argument_list PIPE • expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 273
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 248

  132 function_magnitudo: LPAREN type_expression RPAREN • KW_MAGNITUDO SEMICOLON

    KW_MAGNITUDO  shift, and go to state 274


State 249

  147 vector_statement: LBRACKET argument_list RBRACKET • OP_ASSIGN IDENTIFIER SEMICOLON

    OP_ASSIGN  shift, and go to state 275


State 250

  128 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 276


State 251

   32 primary_expression: IDENTIFIER •
  128 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  129                       | IDENTIFIER • LANGLE identifier_langle_list
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 229

    $default  reduce using rule 32 (primary_expression)


State 252

  129 identifier_langle_list: IDENTIFIER LANGLE identifier_langle_list •

    $default  reduce using rule 129 (identifier_langle_list)


State 253

  130 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 277


State 254

  130 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  131                       | IDENTIFIER • RANGLE identifier_rangle_list

    RANGLE  shift, and go to state 230


State 255

  131 identifier_rangle_list: IDENTIFIER RANGLE identifier_rangle_list •

    $default  reduce using rule 131 (identifier_rangle_list)


State 256

  146 vector_statement: IDENTIFIER type_specifier LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 278
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 257

  103 jump_statement: expression KW_REDIRE SEMICOLON •

    $default  reduce using rule 103 (jump_statement)


State 258

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   27 assignment_statement: expression OP_ASSIGN IDENTIFIER • SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER • LANGLE expression RANGLE SEMICOLON
   67 assing_value: IDENTIFIER •
   72 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  155 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 148
    OP_DEREF_POINTER    shift, and go to state 149
    LANGLE              shift, and go to state 279
    SEMICOLON           shift, and go to state 280
    IDENTIFIER          shift, and go to state 68

    SEMICOLON  [reduce using rule 67 (assing_value)]
    $default   reduce using rule 67 (assing_value)

    type_specifier  go to state 150


State 259

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue • SEMICOLON
   70 assing_value: struct_member_lvalue •

    SEMICOLON  shift, and go to state 281

    SEMICOLON  [reduce using rule 70 (assing_value)]
    $default   reduce using rule 70 (assing_value)


State 260

   91 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE •

    $default  reduce using rule 91 (function_declaration_statement)


State 261

   12 statement_list: statement_list • statement
  112 causal_statement: KW_CASUS expression COLON statement_list •

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    KW_REVELARE       shift, and go to state 188
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 189
    LBRACKET          shift, and go to state 190
    IDENTIFIER        shift, and go to state 192

    KW_CASUS          [reduce using rule 112 (causal_statement)]
    KW_AXIOM          [reduce using rule 112 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 112 (causal_statement)]
    KW_RUPTIO         [reduce using rule 112 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 112 (causal_statement)]
    KW_REDIRE         [reduce using rule 112 (causal_statement)]
    KW_REVELARE       [reduce using rule 112 (causal_statement)]
    LIT_FACTUM        [reduce using rule 112 (causal_statement)]
    LIT_FICTUM        [reduce using rule 112 (causal_statement)]
    LIT_FLOAT         [reduce using rule 112 (causal_statement)]
    LIT_INT           [reduce using rule 112 (causal_statement)]
    LIT_CHAR          [reduce using rule 112 (causal_statement)]
    LIT_STRING        [reduce using rule 112 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 112 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 112 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 112 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 112 (causal_statement)]
    LPAREN            [reduce using rule 112 (causal_statement)]
    LBRACKET          [reduce using rule 112 (causal_statement)]
    IDENTIFIER        [reduce using rule 112 (causal_statement)]
    $default          reduce using rule 112 (causal_statement)

    statement                  go to state 193
    assignment_statement       go to state 194
    print_statement            go to state 195
    expression_statement       go to state 196
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 197
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 198
    function_call_statement    go to state 199
    jump_statement             go to state 200
    conditional_statement      go to state 201
    causal_statement           go to state 202
    iteration_statement        go to state 203
    io_functions               go to state 204
    function_input_output      go to state 205
    identifier_langle_list     go to state 206
    identifier_rangle_list     go to state 207
    function_magnitudo         go to state 208
    type_define_statement      go to state 209
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 210
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 262

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 282


State 263

   32 primary_expression: IDENTIFIER •
   87 type_specifier: IDENTIFIER •
   88               | IDENTIFIER • KW_ENUMERARE
  148 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  158 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  160 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 157 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 157 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 157 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 157 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 157 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 157 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 157 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 157 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 157 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 157 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 157 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 157 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 157 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 157 (pointer_dereference)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 87 (type_specifier)]
    RPAREN             [reduce using rule 157 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 157 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 157 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 264

   96 function_call_statement: LPAREN RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 96 (function_call_statement)


State 265

  119 iteration_statement: LPAREN expression_statement expression_statement RPAREN • KW_ITERARE $@8 block

    KW_ITERARE  shift, and go to state 283


State 266

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
  117 iteration_statement: LPAREN expression_statement expression_statement expression • RPAREN KW_ITERARE $@7 block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 284


State 267

  107 conditional_statement: LPAREN expression RPAREN KW_VERTERE • LBRACE $@4 causal_statement RBRACE

    LBRACE  shift, and go to state 285


State 268

  115 iteration_statement: LPAREN expression RPAREN KW_PERSISTO • $@6 block

    $default  reduce using rule 114 ($@6)

    $@6  go to state 286


State 269

  105 conditional_statement: LPAREN expression RPAREN KW_SI • $@3 block conditional_non_statement

    $default  reduce using rule 104 ($@3)

    $@3  go to state 287


State 270

  123 iteration_statement: LPAREN declaration_statement expression_statement RPAREN • KW_ITERARE $@10 block

    KW_ITERARE  shift, and go to state 288


State 271

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
  121 iteration_statement: LPAREN declaration_statement expression_statement expression • RPAREN KW_ITERARE $@9 block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 289


State 272

   97 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 290


State 273

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
   99 argument_list: argument_list PIPE expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 99 (argument_list)


State 274

  132 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO • SEMICOLON

    SEMICOLON  shift, and go to state 291


State 275

  147 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 292


State 276

  128 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON •

    $default  reduce using rule 128 (identifier_langle_list)


State 277

  130 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON •

    $default  reduce using rule 130 (identifier_rangle_list)


State 278

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
  146 vector_statement: IDENTIFIER type_specifier LANGLE expression • RANGLE SEMICOLON

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 293


State 279

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE • expression RANGLE SEMICOLON
  148 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 294
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 280

   27 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 27 (assignment_statement)


State 281

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON •

    $default  reduce using rule 26 (assignment_statement)


State 282

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN SEMICOLON •

    $default  reduce using rule 30 (print_statement)


State 283

  119 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE • $@8 block

    $default  reduce using rule 118 ($@8)

    $@8  go to state 295


State 284

  117 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN • KW_ITERARE $@7 block

    KW_ITERARE  shift, and go to state 296


State 285

  107 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE • $@4 causal_statement RBRACE

    $default  reduce using rule 106 ($@4)

    $@4  go to state 297


State 286

  115 iteration_statement: LPAREN expression RPAREN KW_PERSISTO $@6 • block

    LBRACE  shift, and go to state 170

    block  go to state 298


State 287

  105 conditional_statement: LPAREN expression RPAREN KW_SI $@3 • block conditional_non_statement

    LBRACE  shift, and go to state 170

    block  go to state 299


State 288

  123 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE • $@10 block

    $default  reduce using rule 122 ($@10)

    $@10  go to state 300


State 289

  121 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN • KW_ITERARE $@9 block

    KW_ITERARE  shift, and go to state 301


State 290

   97 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 97 (function_call_statement)


State 291

  132 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON •

    $default  reduce using rule 132 (function_magnitudo)


State 292

  147 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 302


State 293

  146 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 303


State 294

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression • RANGLE SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
  148 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 304


State 295

  119 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@8 • block

    LBRACE  shift, and go to state 170

    block  go to state 305


State 296

  117 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE • $@7 block

    $default  reduce using rule 116 ($@7)

    $@7  go to state 306


State 297

  107 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 • causal_statement RBRACE

    KW_CASUS  shift, and go to state 183
    KW_AXIOM  shift, and go to state 184

    causal_statement  go to state 307


State 298

  115 iteration_statement: LPAREN expression RPAREN KW_PERSISTO $@6 block •

    $default  reduce using rule 115 (iteration_statement)


State 299

  105 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block • conditional_non_statement

    KW_NON  shift, and go to state 308

    $default  reduce using rule 108 (conditional_non_statement)

    conditional_non_statement  go to state 309


State 300

  123 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@10 • block

    LBRACE  shift, and go to state 170

    block  go to state 310


State 301

  121 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE • $@9 block

    $default  reduce using rule 120 ($@9)

    $@9  go to state 311


State 302

  147 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 147 (vector_statement)


State 303

  146 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 146 (vector_statement)


State 304

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE • SEMICOLON
  148 vector_access: IDENTIFIER LANGLE expression RANGLE •

    SEMICOLON  shift, and go to state 312

    SEMICOLON  [reduce using rule 148 (vector_access)]
    $default   reduce using rule 148 (vector_access)


State 305

  119 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@8 block •

    $default  reduce using rule 119 (iteration_statement)


State 306

  117 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@7 • block

    LBRACE  shift, and go to state 170

    block  go to state 313


State 307

  107 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement • RBRACE

    RBRACE  shift, and go to state 314


State 308

  110 conditional_non_statement: KW_NON • $@5 block
  111                          | KW_NON • conditional_statement

    LPAREN  shift, and go to state 315

    $default  reduce using rule 109 ($@5)

    conditional_statement  go to state 316
    $@5                    go to state 317


State 309

  105 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block conditional_non_statement •

    $default  reduce using rule 105 (conditional_statement)


State 310

  123 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@10 block •

    $default  reduce using rule 123 (iteration_statement)


State 311

  121 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 • block

    LBRACE  shift, and go to state 170

    block  go to state 318


State 312

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 28 (assignment_statement)


State 313

  117 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@7 block •

    $default  reduce using rule 117 (iteration_statement)


State 314

  107 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE •

    $default  reduce using rule 107 (conditional_statement)


State 315

  105 conditional_statement: LPAREN • expression RPAREN KW_SI $@3 block conditional_non_statement
  107                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 319
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 316

  111 conditional_non_statement: KW_NON conditional_statement •

    $default  reduce using rule 111 (conditional_non_statement)


State 317

  110 conditional_non_statement: KW_NON $@5 • block

    LBRACE  shift, and go to state 170

    block  go to state 320


State 318

  121 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 block •

    $default  reduce using rule 121 (iteration_statement)


State 319

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN assing_value
  105 conditional_statement: LPAREN expression • RPAREN KW_SI $@3 block conditional_non_statement
  107                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 321


State 320

  110 conditional_non_statement: KW_NON $@5 block •

    $default  reduce using rule 110 (conditional_non_statement)


State 321

  105 conditional_statement: LPAREN expression RPAREN • KW_SI $@3 block conditional_non_statement
  107                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 267
    KW_SI       shift, and go to state 269
