Nonterminals useless in grammar

    assing_value


Terminals unused in grammar

    LEX_ERROR


Rules useless in grammar

  164 assing_value: IDENTIFIER
  165             | vector_access
  166             | pointer_statement
  167             | struct_member_lvalue


Rules useless in parser due to conflicts

  117 $@7: ε

  160 pointer_dereference: OP_DEREF_POINTER IDENTIFIER


State 57 conflicts: 24 reduce/reduce
State 60 conflicts: 1 shift/reduce, 2 reduce/reduce
State 99 conflicts: 1 shift/reduce, 22 reduce/reduce
State 108 conflicts: 1 shift/reduce
State 137 conflicts: 1 shift/reduce, 18 reduce/reduce
State 138 conflicts: 22 reduce/reduce
State 167 conflicts: 1 shift/reduce
State 195 conflicts: 12 shift/reduce
State 224 conflicts: 1 shift/reduce, 19 reduce/reduce
State 226 conflicts: 1 shift/reduce, 2 reduce/reduce
State 228 conflicts: 1 shift/reduce
State 235 conflicts: 1 shift/reduce
State 244 conflicts: 20 shift/reduce
State 269 conflicts: 20 shift/reduce
State 279 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: global_statement_list alchemia_statement

    2 global_statement_list: ε
    3                      | global_statement_list global_statement

    4 global_statement: import_statement
    5                 | declaration_statement
    6                 | function_declaration_statement
    7                 | type_define_statement

    8 block: LBRACE statement_list RBRACE

    9 $@1: ε

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 block

   11 statement_list: ε
   12               | statement_list statement

   13 statement: conditional_statement
   14          | expression_statement
   15          | iteration_statement
   16          | io_functions
   17          | declaration_statement
   18          | function_call_statement
   19          | type_define_statement
   20          | vector_statement
   21          | jump_statement
   22          | causal_statement
   23          | assignment_statement
   24          | print_statement

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   29                     | IDENTIFIER OP_ADDR_OF OP_ASSIGN IDENTIFIER SEMICOLON
   30                     | OP_DEREF_POINTER IDENTIFIER OP_ASSIGN IDENTIFIER SEMICOLON

   31 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON

   32 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN SEMICOLON

   33 expression_statement: expression SEMICOLON

   34 primary_expression: IDENTIFIER
   35                   | constant
   36                   | string
   37                   | LPAREN expression RPAREN
   38                   | vector_access
   39                   | pointer_statement

   40 unary_expression: primary_expression
   41                 | OP_LOGICAL_NOT unary_expression
   42                 | OP_DEREF_POINTER unary_expression
   43                 | OP_ADDR_OF unary_expression
   44                 | OP_SUBTRACT unary_expression

   45 expression: unary_expression
   46           | expression OP_ADD unary_expression
   47           | expression OP_SUBTRACT unary_expression
   48           | expression OP_MULTIPLY unary_expression
   49           | expression OP_DIVIDE unary_expression
   50           | expression OP_MODULUS unary_expression
   51           | expression OP_EXP unary_expression
   52           | expression OP_INTEGER_DIVIDE unary_expression
   53           | expression OP_EQUAL unary_expression
   54           | expression OP_NOT_EQUAL unary_expression
   55           | expression OP_LESS_THAN unary_expression
   56           | expression OP_GREATER_THAN unary_expression
   57           | expression OP_LESS_EQUAL unary_expression
   58           | expression OP_GREATER_EQUAL unary_expression
   59           | expression OP_LOGICAL_AND unary_expression
   60           | expression OP_LOGICAL_OR unary_expression
   61           | expression OP_LOGICAL_XOR unary_expression
   62           | expression OP_ASSIGN IDENTIFIER
   63           | LPAREN type_specifier RPAREN KW_MAGNITUDO
   64           | LPAREN IDENTIFIER RPAREN KW_MAGNITUDO
   65           | LPAREN type_specifier OP_MULTIPLY IDENTIFIER RPAREN KW_MAGNITUDO
   66           | LPAREN type_specifier OP_MULTIPLY LIT_INT RPAREN KW_MAGNITUDO

   67 constant: LIT_INT
   68         | LIT_FLOAT
   69         | LIT_FACTUM
   70         | LIT_FICTUM
   71         | LIT_CHAR

   72 string: LIT_STRING

   73 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON
   74                      | expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   75                      | pointer_declaration

   76 opcional_constant: KW_MOL
   77                  | ε

   78 list_declaration_statement: ε
   79                           | declaration_statement list_declaration_statement

   80 type_specifier: KW_TYPE_ATOMUS
   81               | KW_TYPE_FRACTIO
   82               | KW_TYPE_FRAGMENTUM
   83               | KW_TYPE_MAGNUS
   84               | KW_TYPE_MINIMUS
   85               | KW_TYPE_QUANTUM
   86               | KW_TYPE_SCRIPTUM
   87               | KW_TYPE_SYMBOLUM
   88               | KW_TYPE_VACUUM
   89               | IDENTIFIER
   90               | IDENTIFIER KW_ENUMERARE
   91               | OP_DEREF_POINTER type_specifier

   92 $@2: ε

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

   94 parameter_list: ε
   95               | parameter
   96               | parameter_list PIPE parameter

   97 parameter: IDENTIFIER type_specifier

   98 function_call_statement: LPAREN RPAREN IDENTIFIER SEMICOLON
   99                        | LPAREN argument_list RPAREN IDENTIFIER SEMICOLON

  100 argument_list: expression
  101              | argument_list PIPE expression

  102 jump_statement: KW_CONTINUUM SEMICOLON
  103               | KW_RUPTIO SEMICOLON
  104               | KW_REDIRE SEMICOLON
  105               | expression KW_REDIRE SEMICOLON

  106 $@3: ε

  107 $@4: ε

  108 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block $@4 conditional_non_statement

  109 $@5: ε

  110 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE

  111 conditional_non_statement: ε

  112 $@6: ε

  113 conditional_non_statement: KW_NON $@6 block
  114                          | KW_NON conditional_statement

  115 causal_statement: KW_CASUS expression COLON statement_list
  116                 | KW_AXIOM COLON statement_list

  117 $@7: ε

  118 $@8: ε

  119 iteration_statement: LPAREN $@7 expression RPAREN KW_PERSISTO $@8 block

  120 $@9: ε

  121 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@9 block

  122 $@10: ε

  123 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@10 block

  124 $@11: ε

  125 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@11 block

  126 $@12: ε

  127 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@12 block

  128 io_functions: function_input_output
  129             | function_magnitudo

  130 function_input_output: identifier_langle_list
  131                      | identifier_rangle_list

  132 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON
  133                       | IDENTIFIER LANGLE identifier_langle_list

  134 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON
  135                       | IDENTIFIER RANGLE identifier_rangle_list

  136 function_magnitudo: LPAREN type_specifier RPAREN KW_MAGNITUDO SEMICOLON

  137 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON
  138                      | type_define_struct
  139                      | type_define_enum

  140 $@13: ε

  141 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@13 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

  142 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

  143 enum_list: IDENTIFIER
  144          | IDENTIFIER OP_ASSIGN LIT_INT
  145          | IDENTIFIER OP_ASSIGN LIT_CHAR
  146          | enum_list PIPE IDENTIFIER
  147          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT
  148          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

  149 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  150                 | LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

  151 vector_access: IDENTIFIER LANGLE expression RANGLE

  152 pointer_statement: pointer_assignment
  153                  | pointer_dereference
  154                  | member_access_direct
  155                  | member_access_dereference
  156                  | member_access_pointer

  157 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON
  158                    | expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

  159 pointer_assignment: IDENTIFIER OP_ADDR_OF

  160 pointer_dereference: OP_DEREF_POINTER IDENTIFIER

  161 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

  162 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

  163 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_MAIN (258) 10
    KW_CASUS (259) 115
    KW_AXIOM (260) 116
    KW_CONTINUUM (261) 102
    KW_RUPTIO (262) 103
    KW_VERTERE (263) 110
    KW_DESIGNARE (264) 137 141
    KW_ENUMERARE (265) 90 142
    KW_EVOCARE (266) 31
    KW_FORMULA (267) 93
    KW_HOMUNCULUS (268) 141
    KW_ITERARE (269) 121 123 125 127
    KW_LECTURA (270) 132
    KW_MAGNITUDO (271) 63 64 65 66 136
    KW_MOL (272) 76
    KW_NON (273) 113 114
    KW_PERSISTO (274) 119
    KW_REDIRE (275) 104 105
    KW_REVELARE (276) 32 134
    KW_SI (277) 108
    KW_TYPE_ATOMUS (278) 80
    KW_TYPE_FRACTIO (279) 81
    KW_TYPE_FRAGMENTUM (280) 82
    KW_TYPE_MAGNUS (281) 83
    KW_TYPE_MINIMUS (282) 84
    KW_TYPE_QUANTUM (283) 85
    KW_TYPE_SCRIPTUM (284) 86
    KW_TYPE_SYMBOLUM (285) 87
    KW_TYPE_VACUUM (286) 88
    LIT_FACTUM (287) 69
    LIT_FICTUM (288) 70
    LIT_FLOAT <val_float> (289) 68
    LIT_INT <val_int> (290) 66 67 144 147
    LIT_CHAR <str> (291) 71 145 148
    LIT_STRING <str> (292) 72
    OP_ACCESS_POINTER (293) 163
    OP_ASSIGN (294) 26 27 28 29 30 62 74 93 144 145 147 148 150 158
    OP_GREATER_EQUAL (295) 58
    OP_LESS_EQUAL (296) 57
    OP_EQUAL (297) 53
    OP_NOT_EQUAL (298) 54
    OP_INTEGER_DIVIDE (299) 52
    OP_EXP (300) 51
    OP_LOGICAL_AND (301) 59
    OP_LOGICAL_OR (302) 60
    OP_MULTIPLY (303) 48 65 66
    OP_ADD (304) 46
    OP_SUBTRACT (305) 44 47
    OP_DIVIDE (306) 49
    OP_MODULUS (307) 50
    OP_ACCESS_MEMBER (308) 25 161 162
    OP_LOGICAL_NOT (309) 41
    OP_GREATER_THAN (310) 56
    OP_LESS_THAN (311) 55
    OP_LOGICAL_XOR (312) 61
    OP_ADDR_OF (313) 29 43 159
    OP_DEREF_POINTER (314) 30 42 91 157 158 160 162
    LANGLE (315) 28 132 133 149 151
    RANGLE (316) 28 134 135 149 151
    COLON (317) 115 116
    LPAREN (318) 10 32 37 63 64 65 66 93 98 99 108 110 119 121 123 125 127 136 162
    RPAREN (319) 10 32 37 63 64 65 66 93 98 99 108 110 119 121 123 125 127 136 162
    LBRACKET (320) 150
    RBRACKET (321) 150
    LBRACE (322) 8 93 110 141 142
    RBRACE (323) 8 93 110 141 142
    PIPE (324) 96 101 146 147 148
    SEMICOLON (325) 26 27 28 29 30 31 32 33 73 74 98 99 102 103 104 105 132 134 136 137 141 142 149 150 157 158
    IDENTIFIER <str> (326) 10 25 27 28 29 30 31 32 34 62 64 65 73 74 89 90 93 97 98 99 132 133 134 135 137 141 142 143 144 145 146 147 148 149 150 151 157 158 159 160 161 162 163
    LEX_ERROR (327)


Nonterminals, with rules where they appear

    $accept (73)
        on left: 0
    translation_unit (74)
        on left: 1
        on right: 0
    global_statement_list (75)
        on left: 2 3
        on right: 1 3
    global_statement (76)
        on left: 4 5 6 7
        on right: 3
    block <ptr> (77)
        on left: 8
        on right: 10 108 113 119 121 123 125 127
    alchemia_statement (78)
        on left: 10
        on right: 1
    $@1 (79)
        on left: 9
        on right: 10
    statement_list (80)
        on left: 11 12
        on right: 8 12 93 115 116
    statement (81)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24
        on right: 12
    struct_member_lvalue <ptr> (82)
        on left: 25
        on right: 26
    assignment_statement <expr> (83)
        on left: 26 27 28 29 30
        on right: 23
    import_statement (84)
        on left: 31
        on right: 4
    print_statement (85)
        on left: 32
        on right: 24
    expression_statement <expr> (86)
        on left: 33
        on right: 14 121 123 125 127
    primary_expression <expr> (87)
        on left: 34 35 36 37 38 39
        on right: 40
    unary_expression <expr> (88)
        on left: 40 41 42 43 44
        on right: 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    expression <expr> (89)
        on left: 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66
        on right: 26 27 28 33 37 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 74 100 101 105 108 110 115 119 121 125 149 151 158
    constant <expr> (90)
        on left: 67 68 69 70 71
        on right: 35
    string <expr> (91)
        on left: 72
        on right: 36
    declaration_statement <ptr> (92)
        on left: 73 74 75
        on right: 5 17 79 125 127
    opcional_constant (93)
        on left: 76 77
        on right: 73 74
    list_declaration_statement (94)
        on left: 78 79
        on right: 79 141
    type_specifier <str> (95)
        on left: 80 81 82 83 84 85 86 87 88 89 90 91
        on right: 63 65 66 73 74 91 93 97 136 137 149 157 158
    function_declaration_statement (96)
        on left: 93
        on right: 6
    $@2 (97)
        on left: 92
        on right: 93
    parameter_list (98)
        on left: 94 95 96
        on right: 93 96
    parameter (99)
        on left: 97
        on right: 95 96
    function_call_statement (100)
        on left: 98 99
        on right: 18
    argument_list <arg_list> (101)
        on left: 100 101
        on right: 99 101 150
    jump_statement (102)
        on left: 102 103 104 105
        on right: 21
    conditional_statement <expr> (103)
        on left: 108 110
        on right: 13 114
    $@3 (104)
        on left: 106
        on right: 108
    $@4 (105)
        on left: 107
        on right: 108
    $@5 (106)
        on left: 109
        on right: 110
    conditional_non_statement <expr> (107)
        on left: 111 113 114
        on right: 108
    $@6 (108)
        on left: 112
        on right: 113
    causal_statement (109)
        on left: 115 116
        on right: 22 110
    iteration_statement (110)
        on left: 119 121 123 125 127
        on right: 15
    $@7 (111)
        on left: 117
        on right: 119
    $@8 (112)
        on left: 118
        on right: 119
    $@9 (113)
        on left: 120
        on right: 121
    $@10 (114)
        on left: 122
        on right: 123
    $@11 (115)
        on left: 124
        on right: 125
    $@12 (116)
        on left: 126
        on right: 127
    io_functions (117)
        on left: 128 129
        on right: 16
    function_input_output (118)
        on left: 130 131
        on right: 128
    identifier_langle_list (119)
        on left: 132 133
        on right: 130 133
    identifier_rangle_list (120)
        on left: 134 135
        on right: 131 135
    function_magnitudo (121)
        on left: 136
        on right: 129
    type_define_statement (122)
        on left: 137 138 139
        on right: 7 19
    type_define_struct (123)
        on left: 141
        on right: 138
    $@13 (124)
        on left: 140
        on right: 141
    type_define_enum (125)
        on left: 142
        on right: 139
    enum_list (126)
        on left: 143 144 145 146 147 148
        on right: 142 146 147 148
    vector_statement (127)
        on left: 149 150
        on right: 20
    vector_access <expr> (128)
        on left: 151
        on right: 38
    pointer_statement <expr> (129)
        on left: 152 153 154 155 156
        on right: 39
    pointer_declaration (130)
        on left: 157 158
        on right: 75
    pointer_assignment <expr> (131)
        on left: 159
        on right: 152
    pointer_dereference <expr> (132)
        on left: 160
        on right: 153
    member_access_direct <expr> (133)
        on left: 161
        on right: 154
    member_access_dereference <expr> (134)
        on left: 162
        on right: 155
    member_access_pointer <expr> (135)
        on left: 163
        on right: 156


State 0

    0 $accept: • translation_unit $end

    $default  reduce using rule 2 (global_statement_list)

    translation_unit       go to state 1
    global_statement_list  go to state 2


State 1

    0 $accept: translation_unit • $end

    $end  shift, and go to state 3


State 2

    1 translation_unit: global_statement_list • alchemia_statement
    3 global_statement_list: global_statement_list • global_statement

    KW_DESIGNARE      shift, and go to state 4
    KW_FORMULA        shift, and go to state 5
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 17

    global_statement                go to state 18
    alchemia_statement              go to state 19
    import_statement                go to state 20
    primary_expression              go to state 21
    unary_expression                go to state 22
    expression                      go to state 23
    constant                        go to state 24
    string                          go to state 25
    declaration_statement           go to state 26
    function_declaration_statement  go to state 27
    type_define_statement           go to state 28
    type_define_struct              go to state 29
    type_define_enum                go to state 30
    vector_access                   go to state 31
    pointer_statement               go to state 32
    pointer_declaration             go to state 33
    pointer_assignment              go to state 34
    pointer_dereference             go to state 35
    member_access_direct            go to state 36
    member_access_dereference       go to state 37
    member_access_pointer           go to state 38


State 3

    0 $accept: translation_unit $end •

    $default  accept


State 4

  137 type_define_statement: KW_DESIGNARE • type_specifier IDENTIFIER SEMICOLON
  141 type_define_struct: KW_DESIGNARE • IDENTIFIER LBRACE $@13 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 49

    type_specifier  go to state 50


State 5

   93 function_declaration_statement: KW_FORMULA • LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    LPAREN  shift, and go to state 51


State 6

   69 constant: LIT_FACTUM •

    $default  reduce using rule 69 (constant)


State 7

   70 constant: LIT_FICTUM •

    $default  reduce using rule 70 (constant)


State 8

   68 constant: LIT_FLOAT •

    $default  reduce using rule 68 (constant)


State 9

   67 constant: LIT_INT •

    $default  reduce using rule 67 (constant)


State 10

   71 constant: LIT_CHAR •

    $default  reduce using rule 71 (constant)


State 11

   72 string: LIT_STRING •

    $default  reduce using rule 72 (string)


State 12

   44 unary_expression: OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 54
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 13

   41 unary_expression: OP_LOGICAL_NOT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 55
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 14

   43 unary_expression: OP_ADDR_OF • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 56
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 15

   42 unary_expression: OP_DEREF_POINTER • unary_expression
  160 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 57

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 16

   37 primary_expression: LPAREN • expression RPAREN
   63 expression: LPAREN • type_specifier RPAREN KW_MAGNITUDO
   64           | LPAREN • IDENTIFIER RPAREN KW_MAGNITUDO
   65           | LPAREN • type_specifier OP_MULTIPLY IDENTIFIER RPAREN KW_MAGNITUDO
   66           | LPAREN • type_specifier OP_MULTIPLY LIT_INT RPAREN KW_MAGNITUDO
  162 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 59
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 60

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 61
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 62
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 17

   10 alchemia_statement: IDENTIFIER • LPAREN RPAREN KW_MAIN $@1 block
   31 import_statement: IDENTIFIER • KW_EVOCARE SEMICOLON
   34 primary_expression: IDENTIFIER •
   73 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  142 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_EVOCARE          shift, and go to state 63
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 64
    OP_ACCESS_MEMBER    shift, and go to state 65
    OP_ADDR_OF          shift, and go to state 66
    OP_DEREF_POINTER    shift, and go to state 67
    LANGLE              shift, and go to state 68
    LPAREN              shift, and go to state 69
    LBRACE              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71

    $default  reduce using rule 34 (primary_expression)

    type_specifier  go to state 72


State 18

    3 global_statement_list: global_statement_list global_statement •

    $default  reduce using rule 3 (global_statement_list)


State 19

    1 translation_unit: global_statement_list alchemia_statement •

    $default  reduce using rule 1 (translation_unit)


State 20

    4 global_statement: import_statement •

    $default  reduce using rule 4 (global_statement)


State 21

   40 unary_expression: primary_expression •

    $default  reduce using rule 40 (unary_expression)


State 22

   45 expression: unary_expression •

    $default  reduce using rule 45 (expression)


State 23

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
   74 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  158 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 73
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89


State 24

   35 primary_expression: constant •

    $default  reduce using rule 35 (primary_expression)


State 25

   36 primary_expression: string •

    $default  reduce using rule 36 (primary_expression)


State 26

    5 global_statement: declaration_statement •

    $default  reduce using rule 5 (global_statement)


State 27

    6 global_statement: function_declaration_statement •

    $default  reduce using rule 6 (global_statement)


State 28

    7 global_statement: type_define_statement •

    $default  reduce using rule 7 (global_statement)


State 29

  138 type_define_statement: type_define_struct •

    $default  reduce using rule 138 (type_define_statement)


State 30

  139 type_define_statement: type_define_enum •

    $default  reduce using rule 139 (type_define_statement)


State 31

   38 primary_expression: vector_access •

    $default  reduce using rule 38 (primary_expression)


State 32

   39 primary_expression: pointer_statement •

    $default  reduce using rule 39 (primary_expression)


State 33

   75 declaration_statement: pointer_declaration •

    $default  reduce using rule 75 (declaration_statement)


State 34

  152 pointer_statement: pointer_assignment •

    $default  reduce using rule 152 (pointer_statement)


State 35

  153 pointer_statement: pointer_dereference •

    $default  reduce using rule 153 (pointer_statement)


State 36

  154 pointer_statement: member_access_direct •

    $default  reduce using rule 154 (pointer_statement)


State 37

  155 pointer_statement: member_access_dereference •

    $default  reduce using rule 155 (pointer_statement)


State 38

  156 pointer_statement: member_access_pointer •

    $default  reduce using rule 156 (pointer_statement)


State 39

   80 type_specifier: KW_TYPE_ATOMUS •

    $default  reduce using rule 80 (type_specifier)


State 40

   81 type_specifier: KW_TYPE_FRACTIO •

    $default  reduce using rule 81 (type_specifier)


State 41

   82 type_specifier: KW_TYPE_FRAGMENTUM •

    $default  reduce using rule 82 (type_specifier)


State 42

   83 type_specifier: KW_TYPE_MAGNUS •

    $default  reduce using rule 83 (type_specifier)


State 43

   84 type_specifier: KW_TYPE_MINIMUS •

    $default  reduce using rule 84 (type_specifier)


State 44

   85 type_specifier: KW_TYPE_QUANTUM •

    $default  reduce using rule 85 (type_specifier)


State 45

   86 type_specifier: KW_TYPE_SCRIPTUM •

    $default  reduce using rule 86 (type_specifier)


State 46

   87 type_specifier: KW_TYPE_SYMBOLUM •

    $default  reduce using rule 87 (type_specifier)


State 47

   88 type_specifier: KW_TYPE_VACUUM •

    $default  reduce using rule 88 (type_specifier)


State 48

   91 type_specifier: OP_DEREF_POINTER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 71

    type_specifier  go to state 90


State 49

   89 type_specifier: IDENTIFIER •
   90               | IDENTIFIER • KW_ENUMERARE
  141 type_define_struct: KW_DESIGNARE IDENTIFIER • LBRACE $@13 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_ENUMERARE  shift, and go to state 91
    LBRACE        shift, and go to state 92

    $default  reduce using rule 89 (type_specifier)


State 50

  137 type_define_statement: KW_DESIGNARE type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 93


State 51

   93 function_declaration_statement: KW_FORMULA LPAREN • parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 94

    $default  reduce using rule 94 (parameter_list)

    parameter_list  go to state 95
    parameter       go to state 96


State 52

   37 primary_expression: LPAREN • expression RPAREN
  162 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 97
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 61
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 53

   34 primary_expression: IDENTIFIER •
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 68

    $default  reduce using rule 34 (primary_expression)


State 54

   44 unary_expression: OP_SUBTRACT unary_expression •

    $default  reduce using rule 44 (unary_expression)


State 55

   41 unary_expression: OP_LOGICAL_NOT unary_expression •

    $default  reduce using rule 41 (unary_expression)


State 56

   43 unary_expression: OP_ADDR_OF unary_expression •

    $default  reduce using rule 43 (unary_expression)


State 57

   34 primary_expression: IDENTIFIER •
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  160 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 68

    KW_REDIRE          reduce using rule 34 (primary_expression)
    KW_REDIRE          [reduce using rule 160 (pointer_dereference)]
    OP_ASSIGN          reduce using rule 34 (primary_expression)
    OP_ASSIGN          [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 34 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 160 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 34 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 160 (pointer_dereference)]
    OP_EQUAL           reduce using rule 34 (primary_expression)
    OP_EQUAL           [reduce using rule 160 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 34 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 160 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 34 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 160 (pointer_dereference)]
    OP_EXP             reduce using rule 34 (primary_expression)
    OP_EXP             [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 34 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 34 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 160 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 34 (primary_expression)
    OP_MULTIPLY        [reduce using rule 160 (pointer_dereference)]
    OP_ADD             reduce using rule 34 (primary_expression)
    OP_ADD             [reduce using rule 160 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 34 (primary_expression)
    OP_SUBTRACT        [reduce using rule 160 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 34 (primary_expression)
    OP_DIVIDE          [reduce using rule 160 (pointer_dereference)]
    OP_MODULUS         reduce using rule 34 (primary_expression)
    OP_MODULUS         [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 34 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 160 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 34 (primary_expression)
    OP_LESS_THAN       [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 34 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 160 (pointer_dereference)]
    RANGLE             reduce using rule 34 (primary_expression)
    RANGLE             [reduce using rule 160 (pointer_dereference)]
    COLON              reduce using rule 34 (primary_expression)
    COLON              [reduce using rule 160 (pointer_dereference)]
    RPAREN             reduce using rule 34 (primary_expression)
    RPAREN             [reduce using rule 160 (pointer_dereference)]
    RBRACKET           reduce using rule 34 (primary_expression)
    RBRACKET           [reduce using rule 160 (pointer_dereference)]
    PIPE               reduce using rule 34 (primary_expression)
    PIPE               [reduce using rule 160 (pointer_dereference)]
    SEMICOLON          reduce using rule 34 (primary_expression)
    SEMICOLON          [reduce using rule 160 (pointer_dereference)]
    $default           reduce using rule 34 (primary_expression)


State 58

   42 unary_expression: OP_DEREF_POINTER unary_expression •

    $default  reduce using rule 42 (unary_expression)


State 59

   42 unary_expression: OP_DEREF_POINTER • unary_expression
   91 type_specifier: OP_DEREF_POINTER • type_specifier
  160 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  162 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 98
    LPAREN              shift, and go to state 52
    IDENTIFIER          shift, and go to state 99

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 90
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 60

   34 primary_expression: IDENTIFIER •
   64 expression: LPAREN IDENTIFIER • RPAREN KW_MAGNITUDO
   89 type_specifier: IDENTIFIER •
   90               | IDENTIFIER • KW_ENUMERARE
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 91
    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 68
    RPAREN             shift, and go to state 100

    OP_MULTIPLY  reduce using rule 34 (primary_expression)
    OP_MULTIPLY  [reduce using rule 89 (type_specifier)]
    RPAREN       [reduce using rule 34 (primary_expression)]
    RPAREN       [reduce using rule 89 (type_specifier)]
    $default     reduce using rule 34 (primary_expression)


State 61

   37 primary_expression: LPAREN expression • RPAREN
   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RPAREN             shift, and go to state 102


State 62

   63 expression: LPAREN type_specifier • RPAREN KW_MAGNITUDO
   65           | LPAREN type_specifier • OP_MULTIPLY IDENTIFIER RPAREN KW_MAGNITUDO
   66           | LPAREN type_specifier • OP_MULTIPLY LIT_INT RPAREN KW_MAGNITUDO

    OP_MULTIPLY  shift, and go to state 103
    RPAREN       shift, and go to state 104


State 63

   31 import_statement: IDENTIFIER KW_EVOCARE • SEMICOLON

    SEMICOLON  shift, and go to state 105


State 64

  163 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 106


State 65

  161 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 107


State 66

  159 pointer_assignment: IDENTIFIER OP_ADDR_OF •

    $default  reduce using rule 159 (pointer_assignment)


State 67

   91 type_specifier: OP_DEREF_POINTER • type_specifier
  157 pointer_declaration: IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 71

    type_specifier  go to state 108


State 68

  151 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 109
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 69

   10 alchemia_statement: IDENTIFIER LPAREN • RPAREN KW_MAIN $@1 block

    RPAREN  shift, and go to state 110


State 70

  142 type_define_enum: IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 111

    enum_list  go to state 112


State 71

   89 type_specifier: IDENTIFIER •
   90               | IDENTIFIER • KW_ENUMERARE

    KW_ENUMERARE  shift, and go to state 91

    $default  reduce using rule 89 (type_specifier)


State 72

   73 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 113

    $default  reduce using rule 77 (opcional_constant)

    opcional_constant  go to state 114


State 73

   62 expression: expression OP_ASSIGN • IDENTIFIER
   74 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  158 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    IDENTIFIER  shift, and go to state 115


State 74

   58 expression: expression OP_GREATER_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 116
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 75

   57 expression: expression OP_LESS_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 117
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 76

   53 expression: expression OP_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 118
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 77

   54 expression: expression OP_NOT_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 119
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 78

   52 expression: expression OP_INTEGER_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 120
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 79

   51 expression: expression OP_EXP • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 121
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 80

   59 expression: expression OP_LOGICAL_AND • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 122
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 81

   60 expression: expression OP_LOGICAL_OR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 123
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 82

   48 expression: expression OP_MULTIPLY • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 124
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 83

   46 expression: expression OP_ADD • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 125
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 84

   47 expression: expression OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 126
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 85

   49 expression: expression OP_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 127
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 86

   50 expression: expression OP_MODULUS • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 128
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 87

   56 expression: expression OP_GREATER_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 129
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 88

   55 expression: expression OP_LESS_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 130
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 89

   61 expression: expression OP_LOGICAL_XOR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 131
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 90

   91 type_specifier: OP_DEREF_POINTER type_specifier •

    $default  reduce using rule 91 (type_specifier)


State 91

   90 type_specifier: IDENTIFIER KW_ENUMERARE •

    $default  reduce using rule 90 (type_specifier)


State 92

  141 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE • $@13 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    $default  reduce using rule 140 ($@13)

    $@13  go to state 132


State 93

  137 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 133


State 94

   97 parameter: IDENTIFIER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 71

    type_specifier  go to state 134


State 95

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list • RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE
   96 parameter_list: parameter_list • PIPE parameter

    RPAREN  shift, and go to state 135
    PIPE    shift, and go to state 136


State 96

   95 parameter_list: parameter •

    $default  reduce using rule 95 (parameter_list)


State 97

   42 unary_expression: OP_DEREF_POINTER • unary_expression
  160 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  162 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 137

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 98

   42 unary_expression: OP_DEREF_POINTER • unary_expression
   91 type_specifier: OP_DEREF_POINTER • type_specifier
  160 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 98
    LPAREN              shift, and go to state 52
    IDENTIFIER          shift, and go to state 138

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 90
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 99

   34 primary_expression: IDENTIFIER •
   89 type_specifier: IDENTIFIER •
   90               | IDENTIFIER • KW_ENUMERARE
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  160 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  162 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 91
    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 68
    RPAREN             shift, and go to state 139

    OP_ASSIGN          reduce using rule 34 (primary_expression)
    OP_ASSIGN          [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 34 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 160 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 34 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 160 (pointer_dereference)]
    OP_EQUAL           reduce using rule 34 (primary_expression)
    OP_EQUAL           [reduce using rule 160 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 34 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 160 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 34 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 160 (pointer_dereference)]
    OP_EXP             reduce using rule 34 (primary_expression)
    OP_EXP             [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 34 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 34 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 160 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 34 (primary_expression)
    OP_MULTIPLY        [reduce using rule 89 (type_specifier)]
    OP_MULTIPLY        [reduce using rule 160 (pointer_dereference)]
    OP_ADD             reduce using rule 34 (primary_expression)
    OP_ADD             [reduce using rule 160 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 34 (primary_expression)
    OP_SUBTRACT        [reduce using rule 160 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 34 (primary_expression)
    OP_DIVIDE          [reduce using rule 160 (pointer_dereference)]
    OP_MODULUS         reduce using rule 34 (primary_expression)
    OP_MODULUS         [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 34 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 160 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 34 (primary_expression)
    OP_LESS_THAN       [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 34 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 160 (pointer_dereference)]
    RPAREN             [reduce using rule 34 (primary_expression)]
    RPAREN             [reduce using rule 89 (type_specifier)]
    RPAREN             [reduce using rule 160 (pointer_dereference)]
    PIPE               reduce using rule 34 (primary_expression)
    PIPE               [reduce using rule 160 (pointer_dereference)]
    SEMICOLON          reduce using rule 34 (primary_expression)
    SEMICOLON          [reduce using rule 160 (pointer_dereference)]
    $default           reduce using rule 34 (primary_expression)


State 100

   64 expression: LPAREN IDENTIFIER RPAREN • KW_MAGNITUDO

    KW_MAGNITUDO  shift, and go to state 140


State 101

   62 expression: expression OP_ASSIGN • IDENTIFIER

    IDENTIFIER  shift, and go to state 141


State 102

   37 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 37 (primary_expression)


State 103

   65 expression: LPAREN type_specifier OP_MULTIPLY • IDENTIFIER RPAREN KW_MAGNITUDO
   66           | LPAREN type_specifier OP_MULTIPLY • LIT_INT RPAREN KW_MAGNITUDO

    LIT_INT     shift, and go to state 142
    IDENTIFIER  shift, and go to state 143


State 104

   63 expression: LPAREN type_specifier RPAREN • KW_MAGNITUDO

    KW_MAGNITUDO  shift, and go to state 144


State 105

   31 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON •

    $default  reduce using rule 31 (import_statement)


State 106

  163 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER •

    $default  reduce using rule 163 (member_access_pointer)


State 107

  161 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 161 (member_access_direct)


State 108

   91 type_specifier: OP_DEREF_POINTER type_specifier •
  157 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 145

    SEMICOLON  [reduce using rule 91 (type_specifier)]
    $default   reduce using rule 91 (type_specifier)


State 109

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  151 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RANGLE             shift, and go to state 146


State 110

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN • KW_MAIN $@1 block

    KW_MAIN  shift, and go to state 147


State 111

  143 enum_list: IDENTIFIER •
  144          | IDENTIFIER • OP_ASSIGN LIT_INT
  145          | IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 148

    $default  reduce using rule 143 (enum_list)


State 112

  142 type_define_enum: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
  146 enum_list: enum_list • PIPE IDENTIFIER
  147          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_INT
  148          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

    RBRACE  shift, and go to state 149
    PIPE    shift, and go to state 150


State 113

   76 opcional_constant: KW_MOL •

    $default  reduce using rule 76 (opcional_constant)


State 114

   73 declaration_statement: IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 151


State 115

   62 expression: expression OP_ASSIGN IDENTIFIER •
   74 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  158 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 152
    IDENTIFIER          shift, and go to state 71

    $default  reduce using rule 62 (expression)

    type_specifier  go to state 153


State 116

   58 expression: expression OP_GREATER_EQUAL unary_expression •

    $default  reduce using rule 58 (expression)


State 117

   57 expression: expression OP_LESS_EQUAL unary_expression •

    $default  reduce using rule 57 (expression)


State 118

   53 expression: expression OP_EQUAL unary_expression •

    $default  reduce using rule 53 (expression)


State 119

   54 expression: expression OP_NOT_EQUAL unary_expression •

    $default  reduce using rule 54 (expression)


State 120

   52 expression: expression OP_INTEGER_DIVIDE unary_expression •

    $default  reduce using rule 52 (expression)


State 121

   51 expression: expression OP_EXP unary_expression •

    $default  reduce using rule 51 (expression)


State 122

   59 expression: expression OP_LOGICAL_AND unary_expression •

    $default  reduce using rule 59 (expression)


State 123

   60 expression: expression OP_LOGICAL_OR unary_expression •

    $default  reduce using rule 60 (expression)


State 124

   48 expression: expression OP_MULTIPLY unary_expression •

    $default  reduce using rule 48 (expression)


State 125

   46 expression: expression OP_ADD unary_expression •

    $default  reduce using rule 46 (expression)


State 126

   47 expression: expression OP_SUBTRACT unary_expression •

    $default  reduce using rule 47 (expression)


State 127

   49 expression: expression OP_DIVIDE unary_expression •

    $default  reduce using rule 49 (expression)


State 128

   50 expression: expression OP_MODULUS unary_expression •

    $default  reduce using rule 50 (expression)


State 129

   56 expression: expression OP_GREATER_THAN unary_expression •

    $default  reduce using rule 56 (expression)


State 130

   55 expression: expression OP_LESS_THAN unary_expression •

    $default  reduce using rule 55 (expression)


State 131

   61 expression: expression OP_LOGICAL_XOR unary_expression •

    $default  reduce using rule 61 (expression)


State 132

  141 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@13 • list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 154

    $default  reduce using rule 78 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 155
    list_declaration_statement  go to state 156
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 133

  137 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 137 (type_define_statement)


State 134

   97 parameter: IDENTIFIER type_specifier •

    $default  reduce using rule 97 (parameter)


State 135

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN • IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 157


State 136

   96 parameter_list: parameter_list PIPE • parameter

    IDENTIFIER  shift, and go to state 94

    parameter  go to state 158


State 137

   34 primary_expression: IDENTIFIER •
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  160 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  162 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 68
    RPAREN             shift, and go to state 139

    OP_ASSIGN          reduce using rule 34 (primary_expression)
    OP_ASSIGN          [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 34 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 160 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 34 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 160 (pointer_dereference)]
    OP_EQUAL           reduce using rule 34 (primary_expression)
    OP_EQUAL           [reduce using rule 160 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 34 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 160 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 34 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 160 (pointer_dereference)]
    OP_EXP             reduce using rule 34 (primary_expression)
    OP_EXP             [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 34 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 34 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 160 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 34 (primary_expression)
    OP_MULTIPLY        [reduce using rule 160 (pointer_dereference)]
    OP_ADD             reduce using rule 34 (primary_expression)
    OP_ADD             [reduce using rule 160 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 34 (primary_expression)
    OP_SUBTRACT        [reduce using rule 160 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 34 (primary_expression)
    OP_DIVIDE          [reduce using rule 160 (pointer_dereference)]
    OP_MODULUS         reduce using rule 34 (primary_expression)
    OP_MODULUS         [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 34 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 160 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 34 (primary_expression)
    OP_LESS_THAN       [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 34 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 160 (pointer_dereference)]
    RPAREN             [reduce using rule 34 (primary_expression)]
    RPAREN             [reduce using rule 160 (pointer_dereference)]
    $default           reduce using rule 34 (primary_expression)


State 138

   34 primary_expression: IDENTIFIER •
   89 type_specifier: IDENTIFIER •
   90               | IDENTIFIER • KW_ENUMERARE
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  160 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 91
    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 68

    OP_ASSIGN          reduce using rule 34 (primary_expression)
    OP_ASSIGN          [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 34 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 160 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 34 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 160 (pointer_dereference)]
    OP_EQUAL           reduce using rule 34 (primary_expression)
    OP_EQUAL           [reduce using rule 160 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 34 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 160 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 34 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 160 (pointer_dereference)]
    OP_EXP             reduce using rule 34 (primary_expression)
    OP_EXP             [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 34 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 34 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 160 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 34 (primary_expression)
    OP_MULTIPLY        [reduce using rule 89 (type_specifier)]
    OP_MULTIPLY        [reduce using rule 160 (pointer_dereference)]
    OP_ADD             reduce using rule 34 (primary_expression)
    OP_ADD             [reduce using rule 160 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 34 (primary_expression)
    OP_SUBTRACT        [reduce using rule 160 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 34 (primary_expression)
    OP_DIVIDE          [reduce using rule 160 (pointer_dereference)]
    OP_MODULUS         reduce using rule 34 (primary_expression)
    OP_MODULUS         [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 34 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 160 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 34 (primary_expression)
    OP_LESS_THAN       [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 34 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 160 (pointer_dereference)]
    RPAREN             reduce using rule 34 (primary_expression)
    RPAREN             [reduce using rule 89 (type_specifier)]
    RPAREN             [reduce using rule 160 (pointer_dereference)]
    PIPE               reduce using rule 34 (primary_expression)
    PIPE               [reduce using rule 160 (pointer_dereference)]
    SEMICOLON          reduce using rule 34 (primary_expression)
    SEMICOLON          [reduce using rule 160 (pointer_dereference)]
    $default           reduce using rule 34 (primary_expression)


State 139

  162 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN • OP_ACCESS_MEMBER IDENTIFIER

    OP_ACCESS_MEMBER  shift, and go to state 159


State 140

   64 expression: LPAREN IDENTIFIER RPAREN KW_MAGNITUDO •

    $default  reduce using rule 64 (expression)


State 141

   62 expression: expression OP_ASSIGN IDENTIFIER •

    $default  reduce using rule 62 (expression)


State 142

   66 expression: LPAREN type_specifier OP_MULTIPLY LIT_INT • RPAREN KW_MAGNITUDO

    RPAREN  shift, and go to state 160


State 143

   65 expression: LPAREN type_specifier OP_MULTIPLY IDENTIFIER • RPAREN KW_MAGNITUDO

    RPAREN  shift, and go to state 161


State 144

   63 expression: LPAREN type_specifier RPAREN KW_MAGNITUDO •

    $default  reduce using rule 63 (expression)


State 145

  157 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 157 (pointer_declaration)


State 146

  151 vector_access: IDENTIFIER LANGLE expression RANGLE •

    $default  reduce using rule 151 (vector_access)


State 147

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN • $@1 block

    $default  reduce using rule 9 ($@1)

    $@1  go to state 162


State 148

  144 enum_list: IDENTIFIER OP_ASSIGN • LIT_INT
  145          | IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 163
    LIT_CHAR  shift, and go to state 164


State 149

  142 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 165


State 150

  146 enum_list: enum_list PIPE • IDENTIFIER
  147          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_INT
  148          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_CHAR

    IDENTIFIER  shift, and go to state 166


State 151

   73 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 73 (declaration_statement)


State 152

   91 type_specifier: OP_DEREF_POINTER • type_specifier
  158 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 71

    type_specifier  go to state 167


State 153

   74 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 113

    $default  reduce using rule 77 (opcional_constant)

    opcional_constant  go to state 168


State 154

   34 primary_expression: IDENTIFIER •
   73 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 64
    OP_ACCESS_MEMBER    shift, and go to state 65
    OP_ADDR_OF          shift, and go to state 66
    OP_DEREF_POINTER    shift, and go to state 67
    LANGLE              shift, and go to state 68
    IDENTIFIER          shift, and go to state 71

    $default  reduce using rule 34 (primary_expression)

    type_specifier  go to state 72


State 155

   79 list_declaration_statement: declaration_statement • list_declaration_statement

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 154

    $default  reduce using rule 78 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 155
    list_declaration_statement  go to state 169
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 156

  141 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@13 list_declaration_statement • RBRACE KW_HOMUNCULUS SEMICOLON

    RBRACE  shift, and go to state 170


State 157

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER • OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    OP_ASSIGN  shift, and go to state 171


State 158

   96 parameter_list: parameter_list PIPE parameter •

    $default  reduce using rule 96 (parameter_list)


State 159

  162 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 172


State 160

   66 expression: LPAREN type_specifier OP_MULTIPLY LIT_INT RPAREN • KW_MAGNITUDO

    KW_MAGNITUDO  shift, and go to state 173


State 161

   65 expression: LPAREN type_specifier OP_MULTIPLY IDENTIFIER RPAREN • KW_MAGNITUDO

    KW_MAGNITUDO  shift, and go to state 174


State 162

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 • block

    LBRACE  shift, and go to state 175

    block  go to state 176


State 163

  144 enum_list: IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 144 (enum_list)


State 164

  145 enum_list: IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 145 (enum_list)


State 165

  142 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 177


State 166

  146 enum_list: enum_list PIPE IDENTIFIER •
  147          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_INT
  148          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 178

    $default  reduce using rule 146 (enum_list)


State 167

   91 type_specifier: OP_DEREF_POINTER type_specifier •
  158 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 179

    SEMICOLON  [reduce using rule 91 (type_specifier)]
    $default   reduce using rule 91 (type_specifier)


State 168

   74 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 180


State 169

   79 list_declaration_statement: declaration_statement list_declaration_statement •

    $default  reduce using rule 79 (list_declaration_statement)


State 170

  141 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@13 list_declaration_statement RBRACE • KW_HOMUNCULUS SEMICOLON

    KW_HOMUNCULUS  shift, and go to state 181


State 171

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN • type_specifier $@2 LBRACE statement_list RBRACE

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 71

    type_specifier  go to state 182


State 172

  162 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 162 (member_access_dereference)


State 173

   66 expression: LPAREN type_specifier OP_MULTIPLY LIT_INT RPAREN KW_MAGNITUDO •

    $default  reduce using rule 66 (expression)


State 174

   65 expression: LPAREN type_specifier OP_MULTIPLY IDENTIFIER RPAREN KW_MAGNITUDO •

    $default  reduce using rule 65 (expression)


State 175

    8 block: LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 183


State 176

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 block •

    $default  reduce using rule 10 (alchemia_statement)


State 177

  142 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 142 (type_define_enum)


State 178

  147 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_INT
  148          | enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 184
    LIT_CHAR  shift, and go to state 185


State 179

  158 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 158 (pointer_declaration)


State 180

   74 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 74 (declaration_statement)


State 181

  141 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@13 list_declaration_statement RBRACE KW_HOMUNCULUS • SEMICOLON

    SEMICOLON  shift, and go to state 186


State 182

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier • $@2 LBRACE statement_list RBRACE

    $default  reduce using rule 92 ($@2)

    $@2  go to state 187


State 183

    8 block: LBRACE statement_list • RBRACE
   12 statement_list: statement_list • statement

    KW_CASUS          shift, and go to state 188
    KW_AXIOM          shift, and go to state 189
    KW_CONTINUUM      shift, and go to state 190
    KW_RUPTIO         shift, and go to state 191
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 192
    KW_REVELARE       shift, and go to state 193
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 194
    LPAREN            shift, and go to state 195
    LBRACKET          shift, and go to state 196
    RBRACE            shift, and go to state 197
    IDENTIFIER        shift, and go to state 198

    statement                  go to state 199
    assignment_statement       go to state 200
    print_statement            go to state 201
    expression_statement       go to state 202
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 203
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 204
    function_call_statement    go to state 205
    jump_statement             go to state 206
    conditional_statement      go to state 207
    causal_statement           go to state 208
    iteration_statement        go to state 209
    io_functions               go to state 210
    function_input_output      go to state 211
    identifier_langle_list     go to state 212
    identifier_rangle_list     go to state 213
    function_magnitudo         go to state 214
    type_define_statement      go to state 215
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 216
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 184

  147 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 147 (enum_list)


State 185

  148 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 148 (enum_list)


State 186

  141 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@13 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON •

    $default  reduce using rule 141 (type_define_struct)


State 187

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 • LBRACE statement_list RBRACE

    LBRACE  shift, and go to state 217


State 188

  115 causal_statement: KW_CASUS • expression COLON statement_list

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 218
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 189

  116 causal_statement: KW_AXIOM • COLON statement_list

    COLON  shift, and go to state 219


State 190

  102 jump_statement: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 220


State 191

  103 jump_statement: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 221


State 192

  104 jump_statement: KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 222


State 193

   32 print_statement: KW_REVELARE • LPAREN IDENTIFIER RPAREN SEMICOLON

    LPAREN  shift, and go to state 223


State 194

   30 assignment_statement: OP_DEREF_POINTER • IDENTIFIER OP_ASSIGN IDENTIFIER SEMICOLON
   42 unary_expression: OP_DEREF_POINTER • unary_expression
  160 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 52
    IDENTIFIER        shift, and go to state 224

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 195

   37 primary_expression: LPAREN • expression RPAREN
   63 expression: LPAREN • type_specifier RPAREN KW_MAGNITUDO
   64           | LPAREN • IDENTIFIER RPAREN KW_MAGNITUDO
   65           | LPAREN • type_specifier OP_MULTIPLY IDENTIFIER RPAREN KW_MAGNITUDO
   66           | LPAREN • type_specifier OP_MULTIPLY LIT_INT RPAREN KW_MAGNITUDO
   98 function_call_statement: LPAREN • RPAREN IDENTIFIER SEMICOLON
   99                        | LPAREN • argument_list RPAREN IDENTIFIER SEMICOLON
  108 conditional_statement: LPAREN • expression RPAREN KW_SI $@3 block $@4 conditional_non_statement
  110                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE
  119 iteration_statement: LPAREN • $@7 expression RPAREN KW_PERSISTO $@8 block
  121                    | LPAREN • expression_statement expression_statement expression RPAREN KW_ITERARE $@9 block
  123                    | LPAREN • expression_statement expression_statement RPAREN KW_ITERARE $@10 block
  125                    | LPAREN • declaration_statement expression_statement expression RPAREN KW_ITERARE $@11 block
  127                    | LPAREN • declaration_statement expression_statement RPAREN KW_ITERARE $@12 block
  136 function_magnitudo: LPAREN • type_specifier RPAREN KW_MAGNITUDO SEMICOLON
  162 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 59
    LPAREN              shift, and go to state 16
    RPAREN              shift, and go to state 225
    IDENTIFIER          shift, and go to state 226

    LIT_FACTUM        [reduce using rule 117 ($@7)]
    LIT_FICTUM        [reduce using rule 117 ($@7)]
    LIT_FLOAT         [reduce using rule 117 ($@7)]
    LIT_INT           [reduce using rule 117 ($@7)]
    LIT_CHAR          [reduce using rule 117 ($@7)]
    LIT_STRING        [reduce using rule 117 ($@7)]
    OP_SUBTRACT       [reduce using rule 117 ($@7)]
    OP_LOGICAL_NOT    [reduce using rule 117 ($@7)]
    OP_ADDR_OF        [reduce using rule 117 ($@7)]
    OP_DEREF_POINTER  [reduce using rule 117 ($@7)]
    LPAREN            [reduce using rule 117 ($@7)]
    IDENTIFIER        [reduce using rule 117 ($@7)]

    expression_statement       go to state 227
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 228
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 229
    type_specifier             go to state 230
    argument_list              go to state 231
    $@7                        go to state 232
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 196

  150 vector_statement: LBRACKET • argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 233
    constant                   go to state 24
    string                     go to state 25
    argument_list              go to state 234
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 197

    8 block: LBRACE statement_list RBRACE •

    $default  reduce using rule 8 (block)


State 198

   29 assignment_statement: IDENTIFIER • OP_ADDR_OF OP_ASSIGN IDENTIFIER SEMICOLON
   34 primary_expression: IDENTIFIER •
   73 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  132 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  133                       | IDENTIFIER • LANGLE identifier_langle_list
  134 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  135                       | IDENTIFIER • RANGLE identifier_rangle_list
  142 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  149 vector_statement: IDENTIFIER • type_specifier LANGLE expression RANGLE SEMICOLON
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 64
    OP_ACCESS_MEMBER    shift, and go to state 65
    OP_ADDR_OF          shift, and go to state 235
    OP_DEREF_POINTER    shift, and go to state 67
    LANGLE              shift, and go to state 236
    RANGLE              shift, and go to state 237
    LBRACE              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71

    $default  reduce using rule 34 (primary_expression)

    type_specifier  go to state 238


State 199

   12 statement_list: statement_list statement •

    $default  reduce using rule 12 (statement_list)


State 200

   23 statement: assignment_statement •

    $default  reduce using rule 23 (statement)


State 201

   24 statement: print_statement •

    $default  reduce using rule 24 (statement)


State 202

   14 statement: expression_statement •

    $default  reduce using rule 14 (statement)


State 203

   26 assignment_statement: expression • OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression • OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression • OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   33 expression_statement: expression • SEMICOLON
   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
   74 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  105 jump_statement: expression • KW_REDIRE SEMICOLON
  158 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    KW_REDIRE          shift, and go to state 239
    OP_ASSIGN          shift, and go to state 240
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    SEMICOLON          shift, and go to state 241


State 204

   17 statement: declaration_statement •

    $default  reduce using rule 17 (statement)


State 205

   18 statement: function_call_statement •

    $default  reduce using rule 18 (statement)


State 206

   21 statement: jump_statement •

    $default  reduce using rule 21 (statement)


State 207

   13 statement: conditional_statement •

    $default  reduce using rule 13 (statement)


State 208

   22 statement: causal_statement •

    $default  reduce using rule 22 (statement)


State 209

   15 statement: iteration_statement •

    $default  reduce using rule 15 (statement)


State 210

   16 statement: io_functions •

    $default  reduce using rule 16 (statement)


State 211

  128 io_functions: function_input_output •

    $default  reduce using rule 128 (io_functions)


State 212

  130 function_input_output: identifier_langle_list •

    $default  reduce using rule 130 (function_input_output)


State 213

  131 function_input_output: identifier_rangle_list •

    $default  reduce using rule 131 (function_input_output)


State 214

  129 io_functions: function_magnitudo •

    $default  reduce using rule 129 (io_functions)


State 215

   19 statement: type_define_statement •

    $default  reduce using rule 19 (statement)


State 216

   20 statement: vector_statement •

    $default  reduce using rule 20 (statement)


State 217

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 242


State 218

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  115 causal_statement: KW_CASUS expression • COLON statement_list

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    COLON              shift, and go to state 243


State 219

  116 causal_statement: KW_AXIOM COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 244


State 220

  102 jump_statement: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 102 (jump_statement)


State 221

  103 jump_statement: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 103 (jump_statement)


State 222

  104 jump_statement: KW_REDIRE SEMICOLON •

    $default  reduce using rule 104 (jump_statement)


State 223

   32 print_statement: KW_REVELARE LPAREN • IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER  shift, and go to state 245


State 224

   30 assignment_statement: OP_DEREF_POINTER IDENTIFIER • OP_ASSIGN IDENTIFIER SEMICOLON
   34 primary_expression: IDENTIFIER •
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  160 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ASSIGN          shift, and go to state 246
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 68

    KW_REDIRE          reduce using rule 34 (primary_expression)
    KW_REDIRE          [reduce using rule 160 (pointer_dereference)]
    OP_ASSIGN          [reduce using rule 34 (primary_expression)]
    OP_ASSIGN          [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 34 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 160 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 34 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 160 (pointer_dereference)]
    OP_EQUAL           reduce using rule 34 (primary_expression)
    OP_EQUAL           [reduce using rule 160 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 34 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 160 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 34 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 160 (pointer_dereference)]
    OP_EXP             reduce using rule 34 (primary_expression)
    OP_EXP             [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 34 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 34 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 160 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 34 (primary_expression)
    OP_MULTIPLY        [reduce using rule 160 (pointer_dereference)]
    OP_ADD             reduce using rule 34 (primary_expression)
    OP_ADD             [reduce using rule 160 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 34 (primary_expression)
    OP_SUBTRACT        [reduce using rule 160 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 34 (primary_expression)
    OP_DIVIDE          [reduce using rule 160 (pointer_dereference)]
    OP_MODULUS         reduce using rule 34 (primary_expression)
    OP_MODULUS         [reduce using rule 160 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 34 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 160 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 34 (primary_expression)
    OP_LESS_THAN       [reduce using rule 160 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 34 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 160 (pointer_dereference)]
    SEMICOLON          reduce using rule 34 (primary_expression)
    SEMICOLON          [reduce using rule 160 (pointer_dereference)]
    $default           reduce using rule 34 (primary_expression)


State 225

   98 function_call_statement: LPAREN RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 247


State 226

   34 primary_expression: IDENTIFIER •
   64 expression: LPAREN IDENTIFIER • RPAREN KW_MAGNITUDO
   73 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
   89 type_specifier: IDENTIFIER •
   90               | IDENTIFIER • KW_ENUMERARE
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  157 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE        shift, and go to state 91
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 64
    OP_ACCESS_MEMBER    shift, and go to state 65
    OP_ADDR_OF          shift, and go to state 66
    OP_DEREF_POINTER    shift, and go to state 67
    LANGLE              shift, and go to state 68
    RPAREN              shift, and go to state 100
    IDENTIFIER          shift, and go to state 71

    OP_MULTIPLY  reduce using rule 34 (primary_expression)
    OP_MULTIPLY  [reduce using rule 89 (type_specifier)]
    RPAREN       [reduce using rule 34 (primary_expression)]
    RPAREN       [reduce using rule 89 (type_specifier)]
    $default     reduce using rule 34 (primary_expression)

    type_specifier  go to state 72


State 227

  121 iteration_statement: LPAREN expression_statement • expression_statement expression RPAREN KW_ITERARE $@9 block
  123                    | LPAREN expression_statement • expression_statement RPAREN KW_ITERARE $@10 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    expression_statement       go to state 248
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 249
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 228

   33 expression_statement: expression • SEMICOLON
   37 primary_expression: LPAREN expression • RPAREN
   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
   74 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  100 argument_list: expression •
  108 conditional_statement: LPAREN expression • RPAREN KW_SI $@3 block $@4 conditional_non_statement
  110                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE
  158 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 73
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RPAREN             shift, and go to state 250
    SEMICOLON          shift, and go to state 241

    RPAREN    [reduce using rule 100 (argument_list)]
    $default  reduce using rule 100 (argument_list)


State 229

  125 iteration_statement: LPAREN declaration_statement • expression_statement expression RPAREN KW_ITERARE $@11 block
  127                    | LPAREN declaration_statement • expression_statement RPAREN KW_ITERARE $@12 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    expression_statement       go to state 251
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 249
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 230

   63 expression: LPAREN type_specifier • RPAREN KW_MAGNITUDO
   65           | LPAREN type_specifier • OP_MULTIPLY IDENTIFIER RPAREN KW_MAGNITUDO
   66           | LPAREN type_specifier • OP_MULTIPLY LIT_INT RPAREN KW_MAGNITUDO
  136 function_magnitudo: LPAREN type_specifier • RPAREN KW_MAGNITUDO SEMICOLON

    OP_MULTIPLY  shift, and go to state 103
    RPAREN       shift, and go to state 252


State 231

   99 function_call_statement: LPAREN argument_list • RPAREN IDENTIFIER SEMICOLON
  101 argument_list: argument_list • PIPE expression

    RPAREN  shift, and go to state 253
    PIPE    shift, and go to state 254


State 232

  119 iteration_statement: LPAREN $@7 • expression RPAREN KW_PERSISTO $@8 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 255
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 233

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  100 argument_list: expression •

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89

    $default  reduce using rule 100 (argument_list)


State 234

  101 argument_list: argument_list • PIPE expression
  150 vector_statement: LBRACKET argument_list • RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    RBRACKET  shift, and go to state 256
    PIPE      shift, and go to state 254


State 235

   29 assignment_statement: IDENTIFIER OP_ADDR_OF • OP_ASSIGN IDENTIFIER SEMICOLON
  159 pointer_assignment: IDENTIFIER OP_ADDR_OF •

    OP_ASSIGN  shift, and go to state 257

    OP_ASSIGN  [reduce using rule 159 (pointer_assignment)]
    $default   reduce using rule 159 (pointer_assignment)


State 236

  132 identifier_langle_list: IDENTIFIER LANGLE • KW_LECTURA SEMICOLON
  133                       | IDENTIFIER LANGLE • identifier_langle_list
  151 vector_access: IDENTIFIER LANGLE • expression RANGLE

    KW_LECTURA        shift, and go to state 258
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 259

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 109
    constant                   go to state 24
    string                     go to state 25
    identifier_langle_list     go to state 260
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 237

  134 identifier_rangle_list: IDENTIFIER RANGLE • KW_REVELARE SEMICOLON
  135                       | IDENTIFIER RANGLE • identifier_rangle_list

    KW_REVELARE  shift, and go to state 261
    IDENTIFIER   shift, and go to state 262

    identifier_rangle_list  go to state 263


State 238

   73 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON
  149 vector_statement: IDENTIFIER type_specifier • LANGLE expression RANGLE SEMICOLON

    KW_MOL  shift, and go to state 113
    LANGLE  shift, and go to state 264

    $default  reduce using rule 77 (opcional_constant)

    opcional_constant  go to state 114


State 239

  105 jump_statement: expression KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 265


State 240

   26 assignment_statement: expression OP_ASSIGN • struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN • IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN • IDENTIFIER LANGLE expression RANGLE SEMICOLON
   62 expression: expression OP_ASSIGN • IDENTIFIER
   74 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  158 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    IDENTIFIER  shift, and go to state 266

    struct_member_lvalue  go to state 267


State 241

   33 expression_statement: expression SEMICOLON •

    $default  reduce using rule 33 (expression_statement)


State 242

   12 statement_list: statement_list • statement
   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list • RBRACE

    KW_CASUS          shift, and go to state 188
    KW_AXIOM          shift, and go to state 189
    KW_CONTINUUM      shift, and go to state 190
    KW_RUPTIO         shift, and go to state 191
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 192
    KW_REVELARE       shift, and go to state 193
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 194
    LPAREN            shift, and go to state 195
    LBRACKET          shift, and go to state 196
    RBRACE            shift, and go to state 268
    IDENTIFIER        shift, and go to state 198

    statement                  go to state 199
    assignment_statement       go to state 200
    print_statement            go to state 201
    expression_statement       go to state 202
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 203
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 204
    function_call_statement    go to state 205
    jump_statement             go to state 206
    conditional_statement      go to state 207
    causal_statement           go to state 208
    iteration_statement        go to state 209
    io_functions               go to state 210
    function_input_output      go to state 211
    identifier_langle_list     go to state 212
    identifier_rangle_list     go to state 213
    function_magnitudo         go to state 214
    type_define_statement      go to state 215
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 216
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 243

  115 causal_statement: KW_CASUS expression COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 269


State 244

   12 statement_list: statement_list • statement
  116 causal_statement: KW_AXIOM COLON statement_list •

    KW_CASUS          shift, and go to state 188
    KW_AXIOM          shift, and go to state 189
    KW_CONTINUUM      shift, and go to state 190
    KW_RUPTIO         shift, and go to state 191
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 192
    KW_REVELARE       shift, and go to state 193
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 194
    LPAREN            shift, and go to state 195
    LBRACKET          shift, and go to state 196
    IDENTIFIER        shift, and go to state 198

    KW_CASUS          [reduce using rule 116 (causal_statement)]
    KW_AXIOM          [reduce using rule 116 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 116 (causal_statement)]
    KW_RUPTIO         [reduce using rule 116 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 116 (causal_statement)]
    KW_REDIRE         [reduce using rule 116 (causal_statement)]
    KW_REVELARE       [reduce using rule 116 (causal_statement)]
    LIT_FACTUM        [reduce using rule 116 (causal_statement)]
    LIT_FICTUM        [reduce using rule 116 (causal_statement)]
    LIT_FLOAT         [reduce using rule 116 (causal_statement)]
    LIT_INT           [reduce using rule 116 (causal_statement)]
    LIT_CHAR          [reduce using rule 116 (causal_statement)]
    LIT_STRING        [reduce using rule 116 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 116 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 116 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 116 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 116 (causal_statement)]
    LPAREN            [reduce using rule 116 (causal_statement)]
    LBRACKET          [reduce using rule 116 (causal_statement)]
    IDENTIFIER        [reduce using rule 116 (causal_statement)]
    $default          reduce using rule 116 (causal_statement)

    statement                  go to state 199
    assignment_statement       go to state 200
    print_statement            go to state 201
    expression_statement       go to state 202
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 203
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 204
    function_call_statement    go to state 205
    jump_statement             go to state 206
    conditional_statement      go to state 207
    causal_statement           go to state 208
    iteration_statement        go to state 209
    io_functions               go to state 210
    function_input_output      go to state 211
    identifier_langle_list     go to state 212
    identifier_rangle_list     go to state 213
    function_magnitudo         go to state 214
    type_define_statement      go to state 215
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 216
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 245

   32 print_statement: KW_REVELARE LPAREN IDENTIFIER • RPAREN SEMICOLON

    RPAREN  shift, and go to state 270


State 246

   30 assignment_statement: OP_DEREF_POINTER IDENTIFIER OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 271


State 247

   98 function_call_statement: LPAREN RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 272


State 248

  121 iteration_statement: LPAREN expression_statement expression_statement • expression RPAREN KW_ITERARE $@9 block
  123                    | LPAREN expression_statement expression_statement • RPAREN KW_ITERARE $@10 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 273
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 274
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 249

   33 expression_statement: expression • SEMICOLON
   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    SEMICOLON          shift, and go to state 241


State 250

   37 primary_expression: LPAREN expression RPAREN •
  108 conditional_statement: LPAREN expression RPAREN • KW_SI $@3 block $@4 conditional_non_statement
  110                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@5 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 275
    KW_SI       shift, and go to state 276

    $default  reduce using rule 37 (primary_expression)


State 251

  125 iteration_statement: LPAREN declaration_statement expression_statement • expression RPAREN KW_ITERARE $@11 block
  127                    | LPAREN declaration_statement expression_statement • RPAREN KW_ITERARE $@12 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 277
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 278
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 252

   63 expression: LPAREN type_specifier RPAREN • KW_MAGNITUDO
  136 function_magnitudo: LPAREN type_specifier RPAREN • KW_MAGNITUDO SEMICOLON

    KW_MAGNITUDO  shift, and go to state 279


State 253

   99 function_call_statement: LPAREN argument_list RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 280


State 254

  101 argument_list: argument_list PIPE • expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 281
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 255

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  119 iteration_statement: LPAREN $@7 expression • RPAREN KW_PERSISTO $@8 block

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RPAREN             shift, and go to state 282


State 256

  150 vector_statement: LBRACKET argument_list RBRACKET • OP_ASSIGN IDENTIFIER SEMICOLON

    OP_ASSIGN  shift, and go to state 283


State 257

   29 assignment_statement: IDENTIFIER OP_ADDR_OF OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 284


State 258

  132 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 285


State 259

   34 primary_expression: IDENTIFIER •
  132 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  133                       | IDENTIFIER • LANGLE identifier_langle_list
  151 vector_access: IDENTIFIER • LANGLE expression RANGLE
  159 pointer_assignment: IDENTIFIER • OP_ADDR_OF
  161 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  163 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 64
    OP_ACCESS_MEMBER   shift, and go to state 65
    OP_ADDR_OF         shift, and go to state 66
    LANGLE             shift, and go to state 236

    $default  reduce using rule 34 (primary_expression)


State 260

  133 identifier_langle_list: IDENTIFIER LANGLE identifier_langle_list •

    $default  reduce using rule 133 (identifier_langle_list)


State 261

  134 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 286


State 262

  134 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  135                       | IDENTIFIER • RANGLE identifier_rangle_list

    RANGLE  shift, and go to state 237


State 263

  135 identifier_rangle_list: IDENTIFIER RANGLE identifier_rangle_list •

    $default  reduce using rule 135 (identifier_rangle_list)


State 264

  149 vector_statement: IDENTIFIER type_specifier LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 287
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 265

  105 jump_statement: expression KW_REDIRE SEMICOLON •

    $default  reduce using rule 105 (jump_statement)


State 266

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   27 assignment_statement: expression OP_ASSIGN IDENTIFIER • SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER • LANGLE expression RANGLE SEMICOLON
   62 expression: expression OP_ASSIGN IDENTIFIER •
   74 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  158 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_MEMBER    shift, and go to state 288
    OP_DEREF_POINTER    shift, and go to state 152
    LANGLE              shift, and go to state 289
    SEMICOLON           shift, and go to state 290
    IDENTIFIER          shift, and go to state 71

    $default  reduce using rule 62 (expression)

    type_specifier  go to state 153


State 267

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue • SEMICOLON

    SEMICOLON  shift, and go to state 291


State 268

   93 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE •

    $default  reduce using rule 93 (function_declaration_statement)


State 269

   12 statement_list: statement_list • statement
  115 causal_statement: KW_CASUS expression COLON statement_list •

    KW_CASUS          shift, and go to state 188
    KW_AXIOM          shift, and go to state 189
    KW_CONTINUUM      shift, and go to state 190
    KW_RUPTIO         shift, and go to state 191
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 192
    KW_REVELARE       shift, and go to state 193
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 194
    LPAREN            shift, and go to state 195
    LBRACKET          shift, and go to state 196
    IDENTIFIER        shift, and go to state 198

    KW_CASUS          [reduce using rule 115 (causal_statement)]
    KW_AXIOM          [reduce using rule 115 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 115 (causal_statement)]
    KW_RUPTIO         [reduce using rule 115 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 115 (causal_statement)]
    KW_REDIRE         [reduce using rule 115 (causal_statement)]
    KW_REVELARE       [reduce using rule 115 (causal_statement)]
    LIT_FACTUM        [reduce using rule 115 (causal_statement)]
    LIT_FICTUM        [reduce using rule 115 (causal_statement)]
    LIT_FLOAT         [reduce using rule 115 (causal_statement)]
    LIT_INT           [reduce using rule 115 (causal_statement)]
    LIT_CHAR          [reduce using rule 115 (causal_statement)]
    LIT_STRING        [reduce using rule 115 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 115 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 115 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 115 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 115 (causal_statement)]
    LPAREN            [reduce using rule 115 (causal_statement)]
    LBRACKET          [reduce using rule 115 (causal_statement)]
    IDENTIFIER        [reduce using rule 115 (causal_statement)]
    $default          reduce using rule 115 (causal_statement)

    statement                  go to state 199
    assignment_statement       go to state 200
    print_statement            go to state 201
    expression_statement       go to state 202
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 203
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 204
    function_call_statement    go to state 205
    jump_statement             go to state 206
    conditional_statement      go to state 207
    causal_statement           go to state 208
    iteration_statement        go to state 209
    io_functions               go to state 210
    function_input_output      go to state 211
    identifier_langle_list     go to state 212
    identifier_rangle_list     go to state 213
    function_magnitudo         go to state 214
    type_define_statement      go to state 215
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 216
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 270

   32 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 292


State 271

   30 assignment_statement: OP_DEREF_POINTER IDENTIFIER OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 293


State 272

   98 function_call_statement: LPAREN RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 98 (function_call_statement)


State 273

  123 iteration_statement: LPAREN expression_statement expression_statement RPAREN • KW_ITERARE $@10 block

    KW_ITERARE  shift, and go to state 294


State 274

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  121 iteration_statement: LPAREN expression_statement expression_statement expression • RPAREN KW_ITERARE $@9 block

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RPAREN             shift, and go to state 295


State 275

  110 conditional_statement: LPAREN expression RPAREN KW_VERTERE • LBRACE $@5 causal_statement RBRACE

    LBRACE  shift, and go to state 296


State 276

  108 conditional_statement: LPAREN expression RPAREN KW_SI • $@3 block $@4 conditional_non_statement

    $default  reduce using rule 106 ($@3)

    $@3  go to state 297


State 277

  127 iteration_statement: LPAREN declaration_statement expression_statement RPAREN • KW_ITERARE $@12 block

    KW_ITERARE  shift, and go to state 298


State 278

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  125 iteration_statement: LPAREN declaration_statement expression_statement expression • RPAREN KW_ITERARE $@11 block

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RPAREN             shift, and go to state 299


State 279

   63 expression: LPAREN type_specifier RPAREN KW_MAGNITUDO •
  136 function_magnitudo: LPAREN type_specifier RPAREN KW_MAGNITUDO • SEMICOLON

    SEMICOLON  shift, and go to state 300

    SEMICOLON  [reduce using rule 63 (expression)]
    $default   reduce using rule 63 (expression)


State 280

   99 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 301


State 281

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  101 argument_list: argument_list PIPE expression •

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89

    $default  reduce using rule 101 (argument_list)


State 282

  119 iteration_statement: LPAREN $@7 expression RPAREN • KW_PERSISTO $@8 block

    KW_PERSISTO  shift, and go to state 302


State 283

  150 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 303


State 284

   29 assignment_statement: IDENTIFIER OP_ADDR_OF OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 304


State 285

  132 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON •

    $default  reduce using rule 132 (identifier_langle_list)


State 286

  134 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON •

    $default  reduce using rule 134 (identifier_rangle_list)


State 287

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  149 vector_statement: IDENTIFIER type_specifier LANGLE expression • RANGLE SEMICOLON

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RANGLE             shift, and go to state 305


State 288

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 306


State 289

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 307
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 290

   27 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 27 (assignment_statement)


State 291

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON •

    $default  reduce using rule 26 (assignment_statement)


State 292

   32 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN SEMICOLON •

    $default  reduce using rule 32 (print_statement)


State 293

   30 assignment_statement: OP_DEREF_POINTER IDENTIFIER OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 30 (assignment_statement)


State 294

  123 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE • $@10 block

    $default  reduce using rule 122 ($@10)

    $@10  go to state 308


State 295

  121 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN • KW_ITERARE $@9 block

    KW_ITERARE  shift, and go to state 309


State 296

  110 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE • $@5 causal_statement RBRACE

    $default  reduce using rule 109 ($@5)

    $@5  go to state 310


State 297

  108 conditional_statement: LPAREN expression RPAREN KW_SI $@3 • block $@4 conditional_non_statement

    LBRACE  shift, and go to state 175

    block  go to state 311


State 298

  127 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE • $@12 block

    $default  reduce using rule 126 ($@12)

    $@12  go to state 312


State 299

  125 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN • KW_ITERARE $@11 block

    KW_ITERARE  shift, and go to state 313


State 300

  136 function_magnitudo: LPAREN type_specifier RPAREN KW_MAGNITUDO SEMICOLON •

    $default  reduce using rule 136 (function_magnitudo)


State 301

   99 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 99 (function_call_statement)


State 302

  119 iteration_statement: LPAREN $@7 expression RPAREN KW_PERSISTO • $@8 block

    $default  reduce using rule 118 ($@8)

    $@8  go to state 314


State 303

  150 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 315


State 304

   29 assignment_statement: IDENTIFIER OP_ADDR_OF OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 29 (assignment_statement)


State 305

  149 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 316


State 306

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 25 (struct_member_lvalue)


State 307

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression • RANGLE SEMICOLON
   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RANGLE             shift, and go to state 317


State 308

  123 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@10 • block

    LBRACE  shift, and go to state 175

    block  go to state 318


State 309

  121 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE • $@9 block

    $default  reduce using rule 120 ($@9)

    $@9  go to state 319


State 310

  110 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 • causal_statement RBRACE

    KW_CASUS  shift, and go to state 188
    KW_AXIOM  shift, and go to state 189

    causal_statement  go to state 320


State 311

  108 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block • $@4 conditional_non_statement

    $default  reduce using rule 107 ($@4)

    $@4  go to state 321


State 312

  127 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@12 • block

    LBRACE  shift, and go to state 175

    block  go to state 322


State 313

  125 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE • $@11 block

    $default  reduce using rule 124 ($@11)

    $@11  go to state 323


State 314

  119 iteration_statement: LPAREN $@7 expression RPAREN KW_PERSISTO $@8 • block

    LBRACE  shift, and go to state 175

    block  go to state 324


State 315

  150 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 150 (vector_statement)


State 316

  149 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 149 (vector_statement)


State 317

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 325


State 318

  123 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@10 block •

    $default  reduce using rule 123 (iteration_statement)


State 319

  121 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@9 • block

    LBRACE  shift, and go to state 175

    block  go to state 326


State 320

  110 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 causal_statement • RBRACE

    RBRACE  shift, and go to state 327


State 321

  108 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block $@4 • conditional_non_statement

    KW_NON  shift, and go to state 328

    $default  reduce using rule 111 (conditional_non_statement)

    conditional_non_statement  go to state 329


State 322

  127 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@12 block •

    $default  reduce using rule 127 (iteration_statement)


State 323

  125 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@11 • block

    LBRACE  shift, and go to state 175

    block  go to state 330


State 324

  119 iteration_statement: LPAREN $@7 expression RPAREN KW_PERSISTO $@8 block •

    $default  reduce using rule 119 (iteration_statement)


State 325

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 28 (assignment_statement)


State 326

  121 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@9 block •

    $default  reduce using rule 121 (iteration_statement)


State 327

  110 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE •

    $default  reduce using rule 110 (conditional_statement)


State 328

  113 conditional_non_statement: KW_NON • $@6 block
  114                          | KW_NON • conditional_statement

    LPAREN  shift, and go to state 331

    $default  reduce using rule 112 ($@6)

    conditional_statement  go to state 332
    $@6                    go to state 333


State 329

  108 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block $@4 conditional_non_statement •

    $default  reduce using rule 108 (conditional_statement)


State 330

  125 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@11 block •

    $default  reduce using rule 125 (iteration_statement)


State 331

  108 conditional_statement: LPAREN • expression RPAREN KW_SI $@3 block $@4 conditional_non_statement
  110                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 53

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 334
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 332

  114 conditional_non_statement: KW_NON conditional_statement •

    $default  reduce using rule 114 (conditional_non_statement)


State 333

  113 conditional_non_statement: KW_NON $@6 • block

    LBRACE  shift, and go to state 175

    block  go to state 335


State 334

   46 expression: expression • OP_ADD unary_expression
   47           | expression • OP_SUBTRACT unary_expression
   48           | expression • OP_MULTIPLY unary_expression
   49           | expression • OP_DIVIDE unary_expression
   50           | expression • OP_MODULUS unary_expression
   51           | expression • OP_EXP unary_expression
   52           | expression • OP_INTEGER_DIVIDE unary_expression
   53           | expression • OP_EQUAL unary_expression
   54           | expression • OP_NOT_EQUAL unary_expression
   55           | expression • OP_LESS_THAN unary_expression
   56           | expression • OP_GREATER_THAN unary_expression
   57           | expression • OP_LESS_EQUAL unary_expression
   58           | expression • OP_GREATER_EQUAL unary_expression
   59           | expression • OP_LOGICAL_AND unary_expression
   60           | expression • OP_LOGICAL_OR unary_expression
   61           | expression • OP_LOGICAL_XOR unary_expression
   62           | expression • OP_ASSIGN IDENTIFIER
  108 conditional_statement: LPAREN expression • RPAREN KW_SI $@3 block $@4 conditional_non_statement
  110                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE

    OP_ASSIGN          shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 74
    OP_LESS_EQUAL      shift, and go to state 75
    OP_EQUAL           shift, and go to state 76
    OP_NOT_EQUAL       shift, and go to state 77
    OP_INTEGER_DIVIDE  shift, and go to state 78
    OP_EXP             shift, and go to state 79
    OP_LOGICAL_AND     shift, and go to state 80
    OP_LOGICAL_OR      shift, and go to state 81
    OP_MULTIPLY        shift, and go to state 82
    OP_ADD             shift, and go to state 83
    OP_SUBTRACT        shift, and go to state 84
    OP_DIVIDE          shift, and go to state 85
    OP_MODULUS         shift, and go to state 86
    OP_GREATER_THAN    shift, and go to state 87
    OP_LESS_THAN       shift, and go to state 88
    OP_LOGICAL_XOR     shift, and go to state 89
    RPAREN             shift, and go to state 336


State 335

  113 conditional_non_statement: KW_NON $@6 block •

    $default  reduce using rule 113 (conditional_non_statement)


State 336

  108 conditional_statement: LPAREN expression RPAREN • KW_SI $@3 block $@4 conditional_non_statement
  110                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@5 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 275
    KW_SI       shift, and go to state 276
