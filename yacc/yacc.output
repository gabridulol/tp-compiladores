Nonterminals useless in grammar

    assing_value


Terminals unused in grammar

    LEX_ERROR


Rules useless in grammar

  157 assing_value: IDENTIFIER
  158             | vector_access
  159             | pointer_statement
  160             | struct_member_lvalue


Rules useless in parser due to conflicts

  152 pointer_assignment: OP_ADDR_OF IDENTIFIER

  153 pointer_dereference: OP_DEREF_POINTER IDENTIFIER


State 55 conflicts: 24 reduce/reduce
State 57 conflicts: 24 reduce/reduce
State 94 conflicts: 1 shift/reduce, 18 reduce/reduce
State 100 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 207 conflicts: 1 reduce/reduce
State 209 conflicts: 1 shift/reduce
State 224 conflicts: 20 shift/reduce
State 227 conflicts: 1 shift/reduce, 21 reduce/reduce
State 248 conflicts: 20 shift/reduce
State 250 conflicts: 21 reduce/reduce


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: global_statement_list alchemia_statement

    2 global_statement_list: ε
    3                      | global_statement_list global_statement

    4 global_statement: import_statement
    5                 | declaration_statement
    6                 | function_declaration_statement
    7                 | type_define_statement

    8 block: LBRACE statement_list RBRACE

    9 $@1: ε

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 block

   11 statement_list: ε
   12               | statement_list statement

   13 statement: conditional_statement
   14          | expression_statement
   15          | iteration_statement
   16          | io_functions
   17          | declaration_statement
   18          | function_call_statement
   19          | type_define_statement
   20          | vector_statement
   21          | jump_statement
   22          | causal_statement
   23          | assignment_statement
   24          | print_statement

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON

   29 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN SEMICOLON

   31 expression_statement: expression SEMICOLON

   32 primary_expression: IDENTIFIER
   33                   | constant
   34                   | string
   35                   | LPAREN expression RPAREN
   36                   | vector_access
   37                   | pointer_statement

   38 unary_expression: primary_expression
   39                 | OP_LOGICAL_NOT unary_expression
   40                 | OP_DEREF_POINTER unary_expression
   41                 | OP_ADDR_OF unary_expression
   42                 | OP_SUBTRACT unary_expression

   43 expression: unary_expression
   44           | expression OP_ADD unary_expression
   45           | expression OP_SUBTRACT unary_expression
   46           | expression OP_MULTIPLY unary_expression
   47           | expression OP_DIVIDE unary_expression
   48           | expression OP_MODULUS unary_expression
   49           | expression OP_EXP unary_expression
   50           | expression OP_INTEGER_DIVIDE unary_expression
   51           | expression OP_EQUAL unary_expression
   52           | expression OP_NOT_EQUAL unary_expression
   53           | expression OP_LESS_THAN unary_expression
   54           | expression OP_GREATER_THAN unary_expression
   55           | expression OP_LESS_EQUAL unary_expression
   56           | expression OP_GREATER_EQUAL unary_expression
   57           | expression OP_LOGICAL_AND unary_expression
   58           | expression OP_LOGICAL_OR unary_expression
   59           | expression OP_LOGICAL_XOR unary_expression
   60           | expression OP_ASSIGN IDENTIFIER

   61 constant: LIT_INT
   62         | LIT_FLOAT
   63         | LIT_FACTUM
   64         | LIT_FICTUM
   65         | LIT_CHAR

   66 string: LIT_STRING

   67 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON
   68                      | expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   69                      | pointer_declaration

   70 opcional_constant: KW_MOL
   71                  | ε

   72 list_declaration_statement: ε
   73                           | declaration_statement list_declaration_statement

   74 type_specifier: KW_TYPE_ATOMUS
   75               | KW_TYPE_FRACTIO
   76               | KW_TYPE_FRAGMENTUM
   77               | KW_TYPE_MAGNUS
   78               | KW_TYPE_MINIMUS
   79               | KW_TYPE_QUANTUM
   80               | KW_TYPE_SCRIPTUM
   81               | KW_TYPE_SYMBOLUM
   82               | KW_TYPE_VACUUM
   83               | IDENTIFIER
   84               | IDENTIFIER KW_ENUMERARE
   85               | OP_DEREF_POINTER type_specifier

   86 $@2: ε

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

   88 parameter_list: ε
   89               | parameter
   90               | parameter_list PIPE parameter

   91 parameter: IDENTIFIER type_specifier

   92 function_call_statement: LPAREN RPAREN IDENTIFIER SEMICOLON
   93                        | LPAREN argument_list RPAREN IDENTIFIER SEMICOLON

   94 argument_list: expression
   95              | argument_list PIPE expression

   96 jump_statement: KW_CONTINUUM SEMICOLON
   97               | KW_RUPTIO SEMICOLON
   98               | KW_REDIRE SEMICOLON
   99               | expression KW_REDIRE SEMICOLON

  100 $@3: ε

  101 $@4: ε

  102 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block $@4 conditional_non_statement

  103 $@5: ε

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE

  105 conditional_non_statement: ε
  106                          | KW_NON block
  107                          | KW_NON conditional_statement

  108 causal_statement: KW_CASUS expression COLON statement_list
  109                 | KW_AXIOM COLON statement_list

  110 $@6: ε

  111 iteration_statement: LPAREN expression RPAREN KW_PERSISTO $@6 block

  112 $@7: ε

  113 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@7 block

  114 $@8: ε

  115 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@8 block

  116 $@9: ε

  117 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 block

  118 $@10: ε

  119 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@10 block

  120 io_functions: function_input_output
  121             | function_magnitudo

  122 function_input_output: identifier_langle_list
  123                      | identifier_rangle_list

  124 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON
  125                       | IDENTIFIER LANGLE identifier_langle_list

  126 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON
  127                       | IDENTIFIER RANGLE identifier_rangle_list

  128 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON

  129 type_expression: type_specifier

  130 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON
  131                      | type_define_struct
  132                      | type_define_enum

  133 $@11: ε

  134 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

  135 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

  136 enum_list: IDENTIFIER
  137          | IDENTIFIER OP_ASSIGN LIT_INT
  138          | IDENTIFIER OP_ASSIGN LIT_CHAR
  139          | enum_list PIPE IDENTIFIER
  140          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT
  141          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

  142 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  143                 | LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

  144 vector_access: IDENTIFIER LANGLE expression RANGLE

  145 pointer_statement: pointer_assignment
  146                  | pointer_dereference
  147                  | member_access_direct
  148                  | member_access_dereference
  149                  | member_access_pointer

  150 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON
  151                    | expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

  152 pointer_assignment: OP_ADDR_OF IDENTIFIER

  153 pointer_dereference: OP_DEREF_POINTER IDENTIFIER

  154 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

  155 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

  156 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_MAIN (258) 10
    KW_CASUS (259) 108
    KW_AXIOM (260) 109
    KW_CONTINUUM (261) 96
    KW_RUPTIO (262) 97
    KW_VERTERE (263) 104
    KW_DESIGNARE (264) 130 134
    KW_ENUMERARE (265) 84 135
    KW_EVOCARE (266) 29
    KW_FORMULA (267) 87
    KW_HOMUNCULUS (268) 134
    KW_ITERARE (269) 113 115 117 119
    KW_LECTURA (270) 124
    KW_MAGNITUDO (271) 128
    KW_MOL (272) 70
    KW_NON (273) 106 107
    KW_PERSISTO (274) 111
    KW_REDIRE (275) 98 99
    KW_REVELARE (276) 30 126
    KW_SI (277) 102
    KW_TYPE_ATOMUS (278) 74
    KW_TYPE_FRACTIO (279) 75
    KW_TYPE_FRAGMENTUM (280) 76
    KW_TYPE_MAGNUS (281) 77
    KW_TYPE_MINIMUS (282) 78
    KW_TYPE_QUANTUM (283) 79
    KW_TYPE_SCRIPTUM (284) 80
    KW_TYPE_SYMBOLUM (285) 81
    KW_TYPE_VACUUM (286) 82
    LIT_FACTUM (287) 63
    LIT_FICTUM (288) 64
    LIT_FLOAT <val_float> (289) 62
    LIT_INT <val_int> (290) 61 137 140
    LIT_CHAR <str> (291) 65 138 141
    LIT_STRING <str> (292) 66
    OP_ACCESS_POINTER (293) 156
    OP_ASSIGN (294) 26 27 28 60 68 87 137 138 140 141 143 151
    OP_GREATER_EQUAL (295) 56
    OP_LESS_EQUAL (296) 55
    OP_EQUAL (297) 51
    OP_NOT_EQUAL (298) 52
    OP_INTEGER_DIVIDE (299) 50
    OP_EXP (300) 49
    OP_LOGICAL_AND (301) 57
    OP_LOGICAL_OR (302) 58
    OP_MULTIPLY (303) 46
    OP_ADD (304) 44
    OP_SUBTRACT (305) 42 45
    OP_DIVIDE (306) 47
    OP_MODULUS (307) 48
    OP_ACCESS_MEMBER (308) 25 154 155
    OP_LOGICAL_NOT (309) 39
    OP_GREATER_THAN (310) 54
    OP_LESS_THAN (311) 53
    OP_LOGICAL_XOR (312) 59
    OP_ADDR_OF (313) 41 152
    OP_DEREF_POINTER (314) 40 85 150 151 153 155
    LANGLE (315) 28 124 125 142 144
    RANGLE (316) 28 126 127 142 144
    COLON (317) 108 109
    LPAREN (318) 10 30 35 87 92 93 102 104 111 113 115 117 119 128 155
    RPAREN (319) 10 30 35 87 92 93 102 104 111 113 115 117 119 128 155
    LBRACKET (320) 143
    RBRACKET (321) 143
    LBRACE (322) 8 87 104 134 135
    RBRACE (323) 8 87 104 134 135
    PIPE (324) 90 95 139 140 141
    SEMICOLON (325) 26 27 28 29 30 31 67 68 92 93 96 97 98 99 124 126 128 130 134 135 142 143 150 151
    IDENTIFIER <str> (326) 10 25 27 28 29 30 32 60 67 68 83 84 87 91 92 93 124 125 126 127 130 134 135 136 137 138 139 140 141 142 143 144 150 151 152 153 154 155 156
    LEX_ERROR (327)


Nonterminals, with rules where they appear

    $accept (73)
        on left: 0
    translation_unit (74)
        on left: 1
        on right: 0
    global_statement_list (75)
        on left: 2 3
        on right: 1 3
    global_statement (76)
        on left: 4 5 6 7
        on right: 3
    block <ptr> (77)
        on left: 8
        on right: 10 102 106 111 113 115 117 119
    alchemia_statement <expr> (78)
        on left: 10
        on right: 1
    $@1 (79)
        on left: 9
        on right: 10
    statement_list (80)
        on left: 11 12
        on right: 8 12 87 108 109
    statement (81)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24
        on right: 12
    struct_member_lvalue <ptr> (82)
        on left: 25
        on right: 26
    assignment_statement <expr> (83)
        on left: 26 27 28
        on right: 23
    import_statement <expr> (84)
        on left: 29
        on right: 4
    print_statement (85)
        on left: 30
        on right: 24
    expression_statement <expr> (86)
        on left: 31
        on right: 14 113 115 117 119
    primary_expression <expr> (87)
        on left: 32 33 34 35 36 37
        on right: 38
    unary_expression <expr> (88)
        on left: 38 39 40 41 42
        on right: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    expression <expr> (89)
        on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
        on right: 26 27 28 31 35 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 68 94 95 99 102 104 108 111 113 117 142 144 151
    constant <expr> (90)
        on left: 61 62 63 64 65
        on right: 33
    string <expr> (91)
        on left: 66
        on right: 34
    declaration_statement <ptr> (92)
        on left: 67 68 69
        on right: 5 17 73 117 119
    opcional_constant (93)
        on left: 70 71
        on right: 67 68
    list_declaration_statement (94)
        on left: 72 73
        on right: 73 134
    type_specifier <str> (95)
        on left: 74 75 76 77 78 79 80 81 82 83 84 85
        on right: 67 68 85 87 91 129 130 142 150 151
    function_declaration_statement (96)
        on left: 87
        on right: 6
    $@2 (97)
        on left: 86
        on right: 87
    parameter_list (98)
        on left: 88 89 90
        on right: 87 90
    parameter (99)
        on left: 91
        on right: 89 90
    function_call_statement (100)
        on left: 92 93
        on right: 18
    argument_list <arg_list> (101)
        on left: 94 95
        on right: 93 95 143
    jump_statement (102)
        on left: 96 97 98 99
        on right: 21
    conditional_statement <expr> (103)
        on left: 102 104
        on right: 13 107
    $@3 (104)
        on left: 100
        on right: 102
    $@4 (105)
        on left: 101
        on right: 102
    $@5 (106)
        on left: 103
        on right: 104
    conditional_non_statement <expr> (107)
        on left: 105 106 107
        on right: 102
    causal_statement (108)
        on left: 108 109
        on right: 22 104
    iteration_statement (109)
        on left: 111 113 115 117 119
        on right: 15
    $@6 (110)
        on left: 110
        on right: 111
    $@7 (111)
        on left: 112
        on right: 113
    $@8 (112)
        on left: 114
        on right: 115
    $@9 (113)
        on left: 116
        on right: 117
    $@10 (114)
        on left: 118
        on right: 119
    io_functions (115)
        on left: 120 121
        on right: 16
    function_input_output (116)
        on left: 122 123
        on right: 120
    identifier_langle_list (117)
        on left: 124 125
        on right: 122 125
    identifier_rangle_list (118)
        on left: 126 127
        on right: 123 127
    function_magnitudo (119)
        on left: 128
        on right: 121
    type_expression (120)
        on left: 129
        on right: 128
    type_define_statement (121)
        on left: 130 131 132
        on right: 7 19
    type_define_struct (122)
        on left: 134
        on right: 131
    $@11 (123)
        on left: 133
        on right: 134
    type_define_enum (124)
        on left: 135
        on right: 132
    enum_list (125)
        on left: 136 137 138 139 140 141
        on right: 135 139 140 141
    vector_statement (126)
        on left: 142 143
        on right: 20
    vector_access <expr> (127)
        on left: 144
        on right: 36
    pointer_statement <expr> (128)
        on left: 145 146 147 148 149
        on right: 37
    pointer_declaration (129)
        on left: 150 151
        on right: 69
    pointer_assignment <expr> (130)
        on left: 152
        on right: 145
    pointer_dereference <expr> (131)
        on left: 153
        on right: 146
    member_access_direct <expr> (132)
        on left: 154
        on right: 147
    member_access_dereference <expr> (133)
        on left: 155
        on right: 148
    member_access_pointer <expr> (134)
        on left: 156
        on right: 149


State 0

    0 $accept: • translation_unit $end

    $default  reduce using rule 2 (global_statement_list)

    translation_unit       go to state 1
    global_statement_list  go to state 2


State 1

    0 $accept: translation_unit • $end

    $end  shift, and go to state 3


State 2

    1 translation_unit: global_statement_list • alchemia_statement
    3 global_statement_list: global_statement_list • global_statement

    KW_DESIGNARE      shift, and go to state 4
    KW_FORMULA        shift, and go to state 5
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 17

    global_statement                go to state 18
    alchemia_statement              go to state 19
    import_statement                go to state 20
    primary_expression              go to state 21
    unary_expression                go to state 22
    expression                      go to state 23
    constant                        go to state 24
    string                          go to state 25
    declaration_statement           go to state 26
    function_declaration_statement  go to state 27
    type_define_statement           go to state 28
    type_define_struct              go to state 29
    type_define_enum                go to state 30
    vector_access                   go to state 31
    pointer_statement               go to state 32
    pointer_declaration             go to state 33
    pointer_assignment              go to state 34
    pointer_dereference             go to state 35
    member_access_direct            go to state 36
    member_access_dereference       go to state 37
    member_access_pointer           go to state 38


State 3

    0 $accept: translation_unit $end •

    $default  accept


State 4

  130 type_define_statement: KW_DESIGNARE • type_specifier IDENTIFIER SEMICOLON
  134 type_define_struct: KW_DESIGNARE • IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 49

    type_specifier  go to state 50


State 5

   87 function_declaration_statement: KW_FORMULA • LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    LPAREN  shift, and go to state 51


State 6

   63 constant: LIT_FACTUM •

    $default  reduce using rule 63 (constant)


State 7

   64 constant: LIT_FICTUM •

    $default  reduce using rule 64 (constant)


State 8

   62 constant: LIT_FLOAT •

    $default  reduce using rule 62 (constant)


State 9

   61 constant: LIT_INT •

    $default  reduce using rule 61 (constant)


State 10

   65 constant: LIT_CHAR •

    $default  reduce using rule 65 (constant)


State 11

   66 string: LIT_STRING •

    $default  reduce using rule 66 (string)


State 12

   42 unary_expression: OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 53
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 13

   39 unary_expression: OP_LOGICAL_NOT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 54
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 14

   41 unary_expression: OP_ADDR_OF • unary_expression
  152 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 55

    primary_expression         go to state 21
    unary_expression           go to state 56
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 15

   40 unary_expression: OP_DEREF_POINTER • unary_expression
  153 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 57

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 16

   35 primary_expression: LPAREN • expression RPAREN
  155 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 59
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 60
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 17

   10 alchemia_statement: IDENTIFIER • LPAREN RPAREN KW_MAIN $@1 block
   29 import_statement: IDENTIFIER • KW_EVOCARE SEMICOLON
   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  135 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  150 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_EVOCARE          shift, and go to state 61
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    LPAREN              shift, and go to state 66
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 18

    3 global_statement_list: global_statement_list global_statement •

    $default  reduce using rule 3 (global_statement_list)


State 19

    1 translation_unit: global_statement_list alchemia_statement •

    $default  reduce using rule 1 (translation_unit)


State 20

    4 global_statement: import_statement •

    $default  reduce using rule 4 (global_statement)


State 21

   38 unary_expression: primary_expression •

    $default  reduce using rule 38 (unary_expression)


State 22

   43 expression: unary_expression •

    $default  reduce using rule 43 (expression)


State 23

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   68 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  151 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86


State 24

   33 primary_expression: constant •

    $default  reduce using rule 33 (primary_expression)


State 25

   34 primary_expression: string •

    $default  reduce using rule 34 (primary_expression)


State 26

    5 global_statement: declaration_statement •

    $default  reduce using rule 5 (global_statement)


State 27

    6 global_statement: function_declaration_statement •

    $default  reduce using rule 6 (global_statement)


State 28

    7 global_statement: type_define_statement •

    $default  reduce using rule 7 (global_statement)


State 29

  131 type_define_statement: type_define_struct •

    $default  reduce using rule 131 (type_define_statement)


State 30

  132 type_define_statement: type_define_enum •

    $default  reduce using rule 132 (type_define_statement)


State 31

   36 primary_expression: vector_access •

    $default  reduce using rule 36 (primary_expression)


State 32

   37 primary_expression: pointer_statement •

    $default  reduce using rule 37 (primary_expression)


State 33

   69 declaration_statement: pointer_declaration •

    $default  reduce using rule 69 (declaration_statement)


State 34

  145 pointer_statement: pointer_assignment •

    $default  reduce using rule 145 (pointer_statement)


State 35

  146 pointer_statement: pointer_dereference •

    $default  reduce using rule 146 (pointer_statement)


State 36

  147 pointer_statement: member_access_direct •

    $default  reduce using rule 147 (pointer_statement)


State 37

  148 pointer_statement: member_access_dereference •

    $default  reduce using rule 148 (pointer_statement)


State 38

  149 pointer_statement: member_access_pointer •

    $default  reduce using rule 149 (pointer_statement)


State 39

   74 type_specifier: KW_TYPE_ATOMUS •

    $default  reduce using rule 74 (type_specifier)


State 40

   75 type_specifier: KW_TYPE_FRACTIO •

    $default  reduce using rule 75 (type_specifier)


State 41

   76 type_specifier: KW_TYPE_FRAGMENTUM •

    $default  reduce using rule 76 (type_specifier)


State 42

   77 type_specifier: KW_TYPE_MAGNUS •

    $default  reduce using rule 77 (type_specifier)


State 43

   78 type_specifier: KW_TYPE_MINIMUS •

    $default  reduce using rule 78 (type_specifier)


State 44

   79 type_specifier: KW_TYPE_QUANTUM •

    $default  reduce using rule 79 (type_specifier)


State 45

   80 type_specifier: KW_TYPE_SCRIPTUM •

    $default  reduce using rule 80 (type_specifier)


State 46

   81 type_specifier: KW_TYPE_SYMBOLUM •

    $default  reduce using rule 81 (type_specifier)


State 47

   82 type_specifier: KW_TYPE_VACUUM •

    $default  reduce using rule 82 (type_specifier)


State 48

   85 type_specifier: OP_DEREF_POINTER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 87


State 49

   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  134 type_define_struct: KW_DESIGNARE IDENTIFIER • LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_ENUMERARE  shift, and go to state 88
    LBRACE        shift, and go to state 89

    $default  reduce using rule 83 (type_specifier)


State 50

  130 type_define_statement: KW_DESIGNARE type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 90


State 51

   87 function_declaration_statement: KW_FORMULA LPAREN • parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 88 (parameter_list)

    parameter_list  go to state 92
    parameter       go to state 93


State 52

   32 primary_expression: IDENTIFIER •
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    $default  reduce using rule 32 (primary_expression)


State 53

   42 unary_expression: OP_SUBTRACT unary_expression •

    $default  reduce using rule 42 (unary_expression)


State 54

   39 unary_expression: OP_LOGICAL_NOT unary_expression •

    $default  reduce using rule 39 (unary_expression)


State 55

   32 primary_expression: IDENTIFIER •
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  152 pointer_assignment: OP_ADDR_OF IDENTIFIER •
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 32 (primary_expression)
    KW_REDIRE          [reduce using rule 152 (pointer_assignment)]
    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 152 (pointer_assignment)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 152 (pointer_assignment)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 152 (pointer_assignment)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 152 (pointer_assignment)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 152 (pointer_assignment)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 152 (pointer_assignment)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 152 (pointer_assignment)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 152 (pointer_assignment)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 152 (pointer_assignment)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 152 (pointer_assignment)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 152 (pointer_assignment)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 152 (pointer_assignment)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 152 (pointer_assignment)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 152 (pointer_assignment)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 152 (pointer_assignment)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 152 (pointer_assignment)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 152 (pointer_assignment)]
    RANGLE             reduce using rule 32 (primary_expression)
    RANGLE             [reduce using rule 152 (pointer_assignment)]
    COLON              reduce using rule 32 (primary_expression)
    COLON              [reduce using rule 152 (pointer_assignment)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 152 (pointer_assignment)]
    RBRACKET           reduce using rule 32 (primary_expression)
    RBRACKET           [reduce using rule 152 (pointer_assignment)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 152 (pointer_assignment)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 152 (pointer_assignment)]
    $default           reduce using rule 32 (primary_expression)


State 56

   41 unary_expression: OP_ADDR_OF unary_expression •

    $default  reduce using rule 41 (unary_expression)


State 57

   32 primary_expression: IDENTIFIER •
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  153 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 32 (primary_expression)
    KW_REDIRE          [reduce using rule 153 (pointer_dereference)]
    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 153 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 153 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 153 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 153 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 153 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 153 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 153 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 153 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 153 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 153 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 153 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 153 (pointer_dereference)]
    RANGLE             reduce using rule 32 (primary_expression)
    RANGLE             [reduce using rule 153 (pointer_dereference)]
    COLON              reduce using rule 32 (primary_expression)
    COLON              [reduce using rule 153 (pointer_dereference)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 153 (pointer_dereference)]
    RBRACKET           reduce using rule 32 (primary_expression)
    RBRACKET           [reduce using rule 153 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 153 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 153 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 58

   40 unary_expression: OP_DEREF_POINTER unary_expression •

    $default  reduce using rule 40 (unary_expression)


State 59

   40 unary_expression: OP_DEREF_POINTER • unary_expression
  153 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  155 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 94

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 60

   35 primary_expression: LPAREN expression • RPAREN
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 96


State 61

   29 import_statement: IDENTIFIER KW_EVOCARE • SEMICOLON

    SEMICOLON  shift, and go to state 97


State 62

  156 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 98


State 63

  154 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 99


State 64

   85 type_specifier: OP_DEREF_POINTER • type_specifier
  150 pointer_declaration: IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 100


State 65

  144 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 66

   10 alchemia_statement: IDENTIFIER LPAREN • RPAREN KW_MAIN $@1 block

    RPAREN  shift, and go to state 102


State 67

  135 type_define_enum: IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 103

    enum_list  go to state 104


State 68

   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE

    KW_ENUMERARE  shift, and go to state 88

    $default  reduce using rule 83 (type_specifier)


State 69

   67 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 71 (opcional_constant)

    opcional_constant  go to state 106


State 70

   60 expression: expression OP_ASSIGN • IDENTIFIER
   68 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  151 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    IDENTIFIER  shift, and go to state 107


State 71

   56 expression: expression OP_GREATER_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 108
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 72

   55 expression: expression OP_LESS_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 109
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 73

   51 expression: expression OP_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 110
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 74

   52 expression: expression OP_NOT_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 111
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 75

   50 expression: expression OP_INTEGER_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 112
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 76

   49 expression: expression OP_EXP • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 113
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 77

   57 expression: expression OP_LOGICAL_AND • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 114
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 78

   58 expression: expression OP_LOGICAL_OR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 115
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 79

   46 expression: expression OP_MULTIPLY • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 116
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 80

   44 expression: expression OP_ADD • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 117
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 81

   45 expression: expression OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 118
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 82

   47 expression: expression OP_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 119
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 83

   48 expression: expression OP_MODULUS • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 120
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 84

   54 expression: expression OP_GREATER_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 121
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 85

   53 expression: expression OP_LESS_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 122
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 86

   59 expression: expression OP_LOGICAL_XOR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 123
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 87

   85 type_specifier: OP_DEREF_POINTER type_specifier •

    $default  reduce using rule 85 (type_specifier)


State 88

   84 type_specifier: IDENTIFIER KW_ENUMERARE •

    $default  reduce using rule 84 (type_specifier)


State 89

  134 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE • $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    $default  reduce using rule 133 ($@11)

    $@11  go to state 124


State 90

  130 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 125


State 91

   91 parameter: IDENTIFIER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 126


State 92

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list • RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE
   90 parameter_list: parameter_list • PIPE parameter

    RPAREN  shift, and go to state 127
    PIPE    shift, and go to state 128


State 93

   89 parameter_list: parameter •

    $default  reduce using rule 89 (parameter_list)


State 94

   32 primary_expression: IDENTIFIER •
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  153 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  155 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 129

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 153 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 153 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 153 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 153 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 153 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 153 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 153 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 153 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 153 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 153 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 153 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 153 (pointer_dereference)]
    RPAREN             [reduce using rule 32 (primary_expression)]
    RPAREN             [reduce using rule 153 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 95

   60 expression: expression OP_ASSIGN • IDENTIFIER

    IDENTIFIER  shift, and go to state 130


State 96

   35 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 35 (primary_expression)


State 97

   29 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON •

    $default  reduce using rule 29 (import_statement)


State 98

  156 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER •

    $default  reduce using rule 156 (member_access_pointer)


State 99

  154 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 154 (member_access_direct)


State 100

   85 type_specifier: OP_DEREF_POINTER type_specifier •
  150 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 131

    SEMICOLON  [reduce using rule 85 (type_specifier)]
    $default   reduce using rule 85 (type_specifier)


State 101

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  144 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 132


State 102

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN • KW_MAIN $@1 block

    KW_MAIN  shift, and go to state 133


State 103

  136 enum_list: IDENTIFIER •
  137          | IDENTIFIER • OP_ASSIGN LIT_INT
  138          | IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 134

    $default  reduce using rule 136 (enum_list)


State 104

  135 type_define_enum: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
  139 enum_list: enum_list • PIPE IDENTIFIER
  140          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_INT
  141          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

    RBRACE  shift, and go to state 135
    PIPE    shift, and go to state 136


State 105

   70 opcional_constant: KW_MOL •

    $default  reduce using rule 70 (opcional_constant)


State 106

   67 declaration_statement: IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 137


State 107

   60 expression: expression OP_ASSIGN IDENTIFIER •
   68 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  151 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 138
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 60 (expression)

    type_specifier  go to state 139


State 108

   56 expression: expression OP_GREATER_EQUAL unary_expression •

    $default  reduce using rule 56 (expression)


State 109

   55 expression: expression OP_LESS_EQUAL unary_expression •

    $default  reduce using rule 55 (expression)


State 110

   51 expression: expression OP_EQUAL unary_expression •

    $default  reduce using rule 51 (expression)


State 111

   52 expression: expression OP_NOT_EQUAL unary_expression •

    $default  reduce using rule 52 (expression)


State 112

   50 expression: expression OP_INTEGER_DIVIDE unary_expression •

    $default  reduce using rule 50 (expression)


State 113

   49 expression: expression OP_EXP unary_expression •

    $default  reduce using rule 49 (expression)


State 114

   57 expression: expression OP_LOGICAL_AND unary_expression •

    $default  reduce using rule 57 (expression)


State 115

   58 expression: expression OP_LOGICAL_OR unary_expression •

    $default  reduce using rule 58 (expression)


State 116

   46 expression: expression OP_MULTIPLY unary_expression •

    $default  reduce using rule 46 (expression)


State 117

   44 expression: expression OP_ADD unary_expression •

    $default  reduce using rule 44 (expression)


State 118

   45 expression: expression OP_SUBTRACT unary_expression •

    $default  reduce using rule 45 (expression)


State 119

   47 expression: expression OP_DIVIDE unary_expression •

    $default  reduce using rule 47 (expression)


State 120

   48 expression: expression OP_MODULUS unary_expression •

    $default  reduce using rule 48 (expression)


State 121

   54 expression: expression OP_GREATER_THAN unary_expression •

    $default  reduce using rule 54 (expression)


State 122

   53 expression: expression OP_LESS_THAN unary_expression •

    $default  reduce using rule 53 (expression)


State 123

   59 expression: expression OP_LOGICAL_XOR unary_expression •

    $default  reduce using rule 59 (expression)


State 124

  134 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 • list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 140

    $default  reduce using rule 72 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 141
    list_declaration_statement  go to state 142
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 125

  130 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 130 (type_define_statement)


State 126

   91 parameter: IDENTIFIER type_specifier •

    $default  reduce using rule 91 (parameter)


State 127

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN • IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 143


State 128

   90 parameter_list: parameter_list PIPE • parameter

    IDENTIFIER  shift, and go to state 91

    parameter  go to state 144


State 129

  155 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN • OP_ACCESS_MEMBER IDENTIFIER

    OP_ACCESS_MEMBER  shift, and go to state 145


State 130

   60 expression: expression OP_ASSIGN IDENTIFIER •

    $default  reduce using rule 60 (expression)


State 131

  150 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 150 (pointer_declaration)


State 132

  144 vector_access: IDENTIFIER LANGLE expression RANGLE •

    $default  reduce using rule 144 (vector_access)


State 133

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN • $@1 block

    $default  reduce using rule 9 ($@1)

    $@1  go to state 146


State 134

  137 enum_list: IDENTIFIER OP_ASSIGN • LIT_INT
  138          | IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 147
    LIT_CHAR  shift, and go to state 148


State 135

  135 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 149


State 136

  139 enum_list: enum_list PIPE • IDENTIFIER
  140          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_INT
  141          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_CHAR

    IDENTIFIER  shift, and go to state 150


State 137

   67 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 67 (declaration_statement)


State 138

   85 type_specifier: OP_DEREF_POINTER • type_specifier
  151 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 151


State 139

   68 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 71 (opcional_constant)

    opcional_constant  go to state 152


State 140

   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  150 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 141

   73 list_declaration_statement: declaration_statement • list_declaration_statement

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 140

    $default  reduce using rule 72 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 141
    list_declaration_statement  go to state 153
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 142

  134 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement • RBRACE KW_HOMUNCULUS SEMICOLON

    RBRACE  shift, and go to state 154


State 143

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER • OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    OP_ASSIGN  shift, and go to state 155


State 144

   90 parameter_list: parameter_list PIPE parameter •

    $default  reduce using rule 90 (parameter_list)


State 145

  155 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 156


State 146

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 • block

    LBRACE  shift, and go to state 157

    block  go to state 158


State 147

  137 enum_list: IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 137 (enum_list)


State 148

  138 enum_list: IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 138 (enum_list)


State 149

  135 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 159


State 150

  139 enum_list: enum_list PIPE IDENTIFIER •
  140          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_INT
  141          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 160

    $default  reduce using rule 139 (enum_list)


State 151

   85 type_specifier: OP_DEREF_POINTER type_specifier •
  151 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 161

    SEMICOLON  [reduce using rule 85 (type_specifier)]
    $default   reduce using rule 85 (type_specifier)


State 152

   68 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 162


State 153

   73 list_declaration_statement: declaration_statement list_declaration_statement •

    $default  reduce using rule 73 (list_declaration_statement)


State 154

  134 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE • KW_HOMUNCULUS SEMICOLON

    KW_HOMUNCULUS  shift, and go to state 163


State 155

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN • type_specifier $@2 LBRACE statement_list RBRACE

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 164


State 156

  155 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 155 (member_access_dereference)


State 157

    8 block: LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 165


State 158

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@1 block •

    $default  reduce using rule 10 (alchemia_statement)


State 159

  135 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 135 (type_define_enum)


State 160

  140 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_INT
  141          | enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 166
    LIT_CHAR  shift, and go to state 167


State 161

  151 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 151 (pointer_declaration)


State 162

   68 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 68 (declaration_statement)


State 163

  134 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS • SEMICOLON

    SEMICOLON  shift, and go to state 168


State 164

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier • $@2 LBRACE statement_list RBRACE

    $default  reduce using rule 86 ($@2)

    $@2  go to state 169


State 165

    8 block: LBRACE statement_list • RBRACE
   12 statement_list: statement_list • statement

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    KW_REVELARE       shift, and go to state 175
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 176
    LBRACKET          shift, and go to state 177
    RBRACE            shift, and go to state 178
    IDENTIFIER        shift, and go to state 179

    statement                  go to state 180
    assignment_statement       go to state 181
    print_statement            go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 197
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 166

  140 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 140 (enum_list)


State 167

  141 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 141 (enum_list)


State 168

  134 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@11 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON •

    $default  reduce using rule 134 (type_define_struct)


State 169

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 • LBRACE statement_list RBRACE

    LBRACE  shift, and go to state 198


State 170

  108 causal_statement: KW_CASUS • expression COLON statement_list

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 199
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 171

  109 causal_statement: KW_AXIOM • COLON statement_list

    COLON  shift, and go to state 200


State 172

   96 jump_statement: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 201


State 173

   97 jump_statement: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 202


State 174

   98 jump_statement: KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 203


State 175

   30 print_statement: KW_REVELARE • LPAREN IDENTIFIER RPAREN SEMICOLON

    LPAREN  shift, and go to state 204


State 176

   35 primary_expression: LPAREN • expression RPAREN
   92 function_call_statement: LPAREN • RPAREN IDENTIFIER SEMICOLON
   93                        | LPAREN • argument_list RPAREN IDENTIFIER SEMICOLON
  102 conditional_statement: LPAREN • expression RPAREN KW_SI $@3 block $@4 conditional_non_statement
  104                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE
  111 iteration_statement: LPAREN • expression RPAREN KW_PERSISTO $@6 block
  113                    | LPAREN • expression_statement expression_statement expression RPAREN KW_ITERARE $@7 block
  115                    | LPAREN • expression_statement expression_statement RPAREN KW_ITERARE $@8 block
  117                    | LPAREN • declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 block
  119                    | LPAREN • declaration_statement expression_statement RPAREN KW_ITERARE $@10 block
  128 function_magnitudo: LPAREN • type_expression RPAREN KW_MAGNITUDO SEMICOLON
  155 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 205
    LPAREN              shift, and go to state 16
    RPAREN              shift, and go to state 206
    IDENTIFIER          shift, and go to state 207

    expression_statement       go to state 208
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 209
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 210
    type_specifier             go to state 211
    argument_list              go to state 212
    type_expression            go to state 213
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 177

  143 vector_statement: LBRACKET • argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 214
    constant                   go to state 24
    string                     go to state 25
    argument_list              go to state 215
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 178

    8 block: LBRACE statement_list RBRACE •

    $default  reduce using rule 8 (block)


State 179

   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  124 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  125                       | IDENTIFIER • LANGLE identifier_langle_list
  126 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  127                       | IDENTIFIER • RANGLE identifier_rangle_list
  135 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  142 vector_statement: IDENTIFIER • type_specifier LANGLE expression RANGLE SEMICOLON
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  150 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 216
    RANGLE              shift, and go to state 217
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 218


State 180

   12 statement_list: statement_list statement •

    $default  reduce using rule 12 (statement_list)


State 181

   23 statement: assignment_statement •

    $default  reduce using rule 23 (statement)


State 182

   24 statement: print_statement •

    $default  reduce using rule 24 (statement)


State 183

   14 statement: expression_statement •

    $default  reduce using rule 14 (statement)


State 184

   26 assignment_statement: expression • OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression • OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression • OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   31 expression_statement: expression • SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   68 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   99 jump_statement: expression • KW_REDIRE SEMICOLON
  151 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    KW_REDIRE          shift, and go to state 219
    OP_ASSIGN          shift, and go to state 220
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 221


State 185

   17 statement: declaration_statement •

    $default  reduce using rule 17 (statement)


State 186

   18 statement: function_call_statement •

    $default  reduce using rule 18 (statement)


State 187

   21 statement: jump_statement •

    $default  reduce using rule 21 (statement)


State 188

   13 statement: conditional_statement •

    $default  reduce using rule 13 (statement)


State 189

   22 statement: causal_statement •

    $default  reduce using rule 22 (statement)


State 190

   15 statement: iteration_statement •

    $default  reduce using rule 15 (statement)


State 191

   16 statement: io_functions •

    $default  reduce using rule 16 (statement)


State 192

  120 io_functions: function_input_output •

    $default  reduce using rule 120 (io_functions)


State 193

  122 function_input_output: identifier_langle_list •

    $default  reduce using rule 122 (function_input_output)


State 194

  123 function_input_output: identifier_rangle_list •

    $default  reduce using rule 123 (function_input_output)


State 195

  121 io_functions: function_magnitudo •

    $default  reduce using rule 121 (io_functions)


State 196

   19 statement: type_define_statement •

    $default  reduce using rule 19 (statement)


State 197

   20 statement: vector_statement •

    $default  reduce using rule 20 (statement)


State 198

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 222


State 199

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  108 causal_statement: KW_CASUS expression • COLON statement_list

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    COLON              shift, and go to state 223


State 200

  109 causal_statement: KW_AXIOM COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 224


State 201

   96 jump_statement: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 96 (jump_statement)


State 202

   97 jump_statement: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 97 (jump_statement)


State 203

   98 jump_statement: KW_REDIRE SEMICOLON •

    $default  reduce using rule 98 (jump_statement)


State 204

   30 print_statement: KW_REVELARE LPAREN • IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER  shift, and go to state 225


State 205

   40 unary_expression: OP_DEREF_POINTER • unary_expression
   85 type_specifier: OP_DEREF_POINTER • type_specifier
  153 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  155 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 226
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 227

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 206

   92 function_call_statement: LPAREN RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 228


State 207

   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  150 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE        shift, and go to state 88
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    RPAREN    reduce using rule 32 (primary_expression)
    RPAREN    [reduce using rule 83 (type_specifier)]
    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 208

  113 iteration_statement: LPAREN expression_statement • expression_statement expression RPAREN KW_ITERARE $@7 block
  115                    | LPAREN expression_statement • expression_statement RPAREN KW_ITERARE $@8 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 229
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 230
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 209

   31 expression_statement: expression • SEMICOLON
   35 primary_expression: LPAREN expression • RPAREN
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   68 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   94 argument_list: expression •
  102 conditional_statement: LPAREN expression • RPAREN KW_SI $@3 block $@4 conditional_non_statement
  104                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE
  111 iteration_statement: LPAREN expression • RPAREN KW_PERSISTO $@6 block
  151 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 231
    SEMICOLON          shift, and go to state 221

    RPAREN    [reduce using rule 94 (argument_list)]
    $default  reduce using rule 94 (argument_list)


State 210

  117 iteration_statement: LPAREN declaration_statement • expression_statement expression RPAREN KW_ITERARE $@9 block
  119                    | LPAREN declaration_statement • expression_statement RPAREN KW_ITERARE $@10 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 232
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 230
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 211

  129 type_expression: type_specifier •

    $default  reduce using rule 129 (type_expression)


State 212

   93 function_call_statement: LPAREN argument_list • RPAREN IDENTIFIER SEMICOLON
   95 argument_list: argument_list • PIPE expression

    RPAREN  shift, and go to state 233
    PIPE    shift, and go to state 234


State 213

  128 function_magnitudo: LPAREN type_expression • RPAREN KW_MAGNITUDO SEMICOLON

    RPAREN  shift, and go to state 235


State 214

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   94 argument_list: expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 94 (argument_list)


State 215

   95 argument_list: argument_list • PIPE expression
  143 vector_statement: LBRACKET argument_list • RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    RBRACKET  shift, and go to state 236
    PIPE      shift, and go to state 234


State 216

  124 identifier_langle_list: IDENTIFIER LANGLE • KW_LECTURA SEMICOLON
  125                       | IDENTIFIER LANGLE • identifier_langle_list
  144 vector_access: IDENTIFIER LANGLE • expression RANGLE

    KW_LECTURA        shift, and go to state 237
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 238

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    identifier_langle_list     go to state 239
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 217

  126 identifier_rangle_list: IDENTIFIER RANGLE • KW_REVELARE SEMICOLON
  127                       | IDENTIFIER RANGLE • identifier_rangle_list

    KW_REVELARE  shift, and go to state 240
    IDENTIFIER   shift, and go to state 241

    identifier_rangle_list  go to state 242


State 218

   67 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON
  142 vector_statement: IDENTIFIER type_specifier • LANGLE expression RANGLE SEMICOLON

    KW_MOL  shift, and go to state 105
    LANGLE  shift, and go to state 243

    $default  reduce using rule 71 (opcional_constant)

    opcional_constant  go to state 106


State 219

   99 jump_statement: expression KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 244


State 220

   26 assignment_statement: expression OP_ASSIGN • struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN • IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN • IDENTIFIER LANGLE expression RANGLE SEMICOLON
   60 expression: expression OP_ASSIGN • IDENTIFIER
   68 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  151 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    IDENTIFIER  shift, and go to state 245

    struct_member_lvalue  go to state 246


State 221

   31 expression_statement: expression SEMICOLON •

    $default  reduce using rule 31 (expression_statement)


State 222

   12 statement_list: statement_list • statement
   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list • RBRACE

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    KW_REVELARE       shift, and go to state 175
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 176
    LBRACKET          shift, and go to state 177
    RBRACE            shift, and go to state 247
    IDENTIFIER        shift, and go to state 179

    statement                  go to state 180
    assignment_statement       go to state 181
    print_statement            go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 197
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 223

  108 causal_statement: KW_CASUS expression COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 248


State 224

   12 statement_list: statement_list • statement
  109 causal_statement: KW_AXIOM COLON statement_list •

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    KW_REVELARE       shift, and go to state 175
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 176
    LBRACKET          shift, and go to state 177
    IDENTIFIER        shift, and go to state 179

    KW_CASUS          [reduce using rule 109 (causal_statement)]
    KW_AXIOM          [reduce using rule 109 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 109 (causal_statement)]
    KW_RUPTIO         [reduce using rule 109 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 109 (causal_statement)]
    KW_REDIRE         [reduce using rule 109 (causal_statement)]
    KW_REVELARE       [reduce using rule 109 (causal_statement)]
    LIT_FACTUM        [reduce using rule 109 (causal_statement)]
    LIT_FICTUM        [reduce using rule 109 (causal_statement)]
    LIT_FLOAT         [reduce using rule 109 (causal_statement)]
    LIT_INT           [reduce using rule 109 (causal_statement)]
    LIT_CHAR          [reduce using rule 109 (causal_statement)]
    LIT_STRING        [reduce using rule 109 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 109 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 109 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 109 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 109 (causal_statement)]
    LPAREN            [reduce using rule 109 (causal_statement)]
    LBRACKET          [reduce using rule 109 (causal_statement)]
    IDENTIFIER        [reduce using rule 109 (causal_statement)]
    $default          reduce using rule 109 (causal_statement)

    statement                  go to state 180
    assignment_statement       go to state 181
    print_statement            go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 197
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 225

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER • RPAREN SEMICOLON

    RPAREN  shift, and go to state 249


State 226

   40 unary_expression: OP_DEREF_POINTER • unary_expression
   85 type_specifier: OP_DEREF_POINTER • type_specifier
  153 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 226
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 250

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 227

   32 primary_expression: IDENTIFIER •
   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  153 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  155 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 129

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 153 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 153 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 153 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 153 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 153 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 153 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 153 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 153 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 153 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 153 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 153 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 153 (pointer_dereference)]
    RPAREN             [reduce using rule 32 (primary_expression)]
    RPAREN             [reduce using rule 83 (type_specifier)]
    RPAREN             [reduce using rule 153 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 153 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 153 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 228

   92 function_call_statement: LPAREN RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 251


State 229

  113 iteration_statement: LPAREN expression_statement expression_statement • expression RPAREN KW_ITERARE $@7 block
  115                    | LPAREN expression_statement expression_statement • RPAREN KW_ITERARE $@8 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 252
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 253
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 230

   31 expression_statement: expression • SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 221


State 231

   35 primary_expression: LPAREN expression RPAREN •
  102 conditional_statement: LPAREN expression RPAREN • KW_SI $@3 block $@4 conditional_non_statement
  104                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@5 causal_statement RBRACE
  111 iteration_statement: LPAREN expression RPAREN • KW_PERSISTO $@6 block

    KW_VERTERE   shift, and go to state 254
    KW_PERSISTO  shift, and go to state 255
    KW_SI        shift, and go to state 256

    $default  reduce using rule 35 (primary_expression)


State 232

  117 iteration_statement: LPAREN declaration_statement expression_statement • expression RPAREN KW_ITERARE $@9 block
  119                    | LPAREN declaration_statement expression_statement • RPAREN KW_ITERARE $@10 block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 257
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 258
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 233

   93 function_call_statement: LPAREN argument_list RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 259


State 234

   95 argument_list: argument_list PIPE • expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 260
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 235

  128 function_magnitudo: LPAREN type_expression RPAREN • KW_MAGNITUDO SEMICOLON

    KW_MAGNITUDO  shift, and go to state 261


State 236

  143 vector_statement: LBRACKET argument_list RBRACKET • OP_ASSIGN IDENTIFIER SEMICOLON

    OP_ASSIGN  shift, and go to state 262


State 237

  124 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 263


State 238

   32 primary_expression: IDENTIFIER •
  124 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  125                       | IDENTIFIER • LANGLE identifier_langle_list
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 216

    $default  reduce using rule 32 (primary_expression)


State 239

  125 identifier_langle_list: IDENTIFIER LANGLE identifier_langle_list •

    $default  reduce using rule 125 (identifier_langle_list)


State 240

  126 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 264


State 241

  126 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  127                       | IDENTIFIER • RANGLE identifier_rangle_list

    RANGLE  shift, and go to state 217


State 242

  127 identifier_rangle_list: IDENTIFIER RANGLE identifier_rangle_list •

    $default  reduce using rule 127 (identifier_rangle_list)


State 243

  142 vector_statement: IDENTIFIER type_specifier LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 265
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 244

   99 jump_statement: expression KW_REDIRE SEMICOLON •

    $default  reduce using rule 99 (jump_statement)


State 245

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   27 assignment_statement: expression OP_ASSIGN IDENTIFIER • SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER • LANGLE expression RANGLE SEMICOLON
   60 expression: expression OP_ASSIGN IDENTIFIER •
   68 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  151 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_MEMBER    shift, and go to state 266
    OP_DEREF_POINTER    shift, and go to state 138
    LANGLE              shift, and go to state 267
    SEMICOLON           shift, and go to state 268
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 60 (expression)

    type_specifier  go to state 139


State 246

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue • SEMICOLON

    SEMICOLON  shift, and go to state 269


State 247

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE •

    $default  reduce using rule 87 (function_declaration_statement)


State 248

   12 statement_list: statement_list • statement
  108 causal_statement: KW_CASUS expression COLON statement_list •

    KW_CASUS          shift, and go to state 170
    KW_AXIOM          shift, and go to state 171
    KW_CONTINUUM      shift, and go to state 172
    KW_RUPTIO         shift, and go to state 173
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 174
    KW_REVELARE       shift, and go to state 175
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 176
    LBRACKET          shift, and go to state 177
    IDENTIFIER        shift, and go to state 179

    KW_CASUS          [reduce using rule 108 (causal_statement)]
    KW_AXIOM          [reduce using rule 108 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 108 (causal_statement)]
    KW_RUPTIO         [reduce using rule 108 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 108 (causal_statement)]
    KW_REDIRE         [reduce using rule 108 (causal_statement)]
    KW_REVELARE       [reduce using rule 108 (causal_statement)]
    LIT_FACTUM        [reduce using rule 108 (causal_statement)]
    LIT_FICTUM        [reduce using rule 108 (causal_statement)]
    LIT_FLOAT         [reduce using rule 108 (causal_statement)]
    LIT_INT           [reduce using rule 108 (causal_statement)]
    LIT_CHAR          [reduce using rule 108 (causal_statement)]
    LIT_STRING        [reduce using rule 108 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 108 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 108 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 108 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 108 (causal_statement)]
    LPAREN            [reduce using rule 108 (causal_statement)]
    LBRACKET          [reduce using rule 108 (causal_statement)]
    IDENTIFIER        [reduce using rule 108 (causal_statement)]
    $default          reduce using rule 108 (causal_statement)

    statement                  go to state 180
    assignment_statement       go to state 181
    print_statement            go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    vector_statement           go to state 197
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 249

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 270


State 250

   32 primary_expression: IDENTIFIER •
   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  144 vector_access: IDENTIFIER • LANGLE expression RANGLE
  153 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  154 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  156 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 153 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 153 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 153 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 153 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 153 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 153 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 153 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 153 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 153 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 153 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 153 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 153 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 153 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 153 (pointer_dereference)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 83 (type_specifier)]
    RPAREN             [reduce using rule 153 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 153 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 153 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 251

   92 function_call_statement: LPAREN RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 92 (function_call_statement)


State 252

  115 iteration_statement: LPAREN expression_statement expression_statement RPAREN • KW_ITERARE $@8 block

    KW_ITERARE  shift, and go to state 271


State 253

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  113 iteration_statement: LPAREN expression_statement expression_statement expression • RPAREN KW_ITERARE $@7 block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 272


State 254

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE • LBRACE $@5 causal_statement RBRACE

    LBRACE  shift, and go to state 273


State 255

  111 iteration_statement: LPAREN expression RPAREN KW_PERSISTO • $@6 block

    $default  reduce using rule 110 ($@6)

    $@6  go to state 274


State 256

  102 conditional_statement: LPAREN expression RPAREN KW_SI • $@3 block $@4 conditional_non_statement

    $default  reduce using rule 100 ($@3)

    $@3  go to state 275


State 257

  119 iteration_statement: LPAREN declaration_statement expression_statement RPAREN • KW_ITERARE $@10 block

    KW_ITERARE  shift, and go to state 276


State 258

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  117 iteration_statement: LPAREN declaration_statement expression_statement expression • RPAREN KW_ITERARE $@9 block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 277


State 259

   93 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 278


State 260

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   95 argument_list: argument_list PIPE expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 95 (argument_list)


State 261

  128 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO • SEMICOLON

    SEMICOLON  shift, and go to state 279


State 262

  143 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 280


State 263

  124 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON •

    $default  reduce using rule 124 (identifier_langle_list)


State 264

  126 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON •

    $default  reduce using rule 126 (identifier_rangle_list)


State 265

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  142 vector_statement: IDENTIFIER type_specifier LANGLE expression • RANGLE SEMICOLON

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 281


State 266

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 282


State 267

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 283
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 268

   27 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 27 (assignment_statement)


State 269

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON •

    $default  reduce using rule 26 (assignment_statement)


State 270

   30 print_statement: KW_REVELARE LPAREN IDENTIFIER RPAREN SEMICOLON •

    $default  reduce using rule 30 (print_statement)


State 271

  115 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE • $@8 block

    $default  reduce using rule 114 ($@8)

    $@8  go to state 284


State 272

  113 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN • KW_ITERARE $@7 block

    KW_ITERARE  shift, and go to state 285


State 273

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE • $@5 causal_statement RBRACE

    $default  reduce using rule 103 ($@5)

    $@5  go to state 286


State 274

  111 iteration_statement: LPAREN expression RPAREN KW_PERSISTO $@6 • block

    LBRACE  shift, and go to state 157

    block  go to state 287


State 275

  102 conditional_statement: LPAREN expression RPAREN KW_SI $@3 • block $@4 conditional_non_statement

    LBRACE  shift, and go to state 157

    block  go to state 288


State 276

  119 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE • $@10 block

    $default  reduce using rule 118 ($@10)

    $@10  go to state 289


State 277

  117 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN • KW_ITERARE $@9 block

    KW_ITERARE  shift, and go to state 290


State 278

   93 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 93 (function_call_statement)


State 279

  128 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON •

    $default  reduce using rule 128 (function_magnitudo)


State 280

  143 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 291


State 281

  142 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 292


State 282

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 25 (struct_member_lvalue)


State 283

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression • RANGLE SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 293


State 284

  115 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@8 • block

    LBRACE  shift, and go to state 157

    block  go to state 294


State 285

  113 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE • $@7 block

    $default  reduce using rule 112 ($@7)

    $@7  go to state 295


State 286

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 • causal_statement RBRACE

    KW_CASUS  shift, and go to state 170
    KW_AXIOM  shift, and go to state 171

    causal_statement  go to state 296


State 287

  111 iteration_statement: LPAREN expression RPAREN KW_PERSISTO $@6 block •

    $default  reduce using rule 111 (iteration_statement)


State 288

  102 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block • $@4 conditional_non_statement

    $default  reduce using rule 101 ($@4)

    $@4  go to state 297


State 289

  119 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@10 • block

    LBRACE  shift, and go to state 157

    block  go to state 298


State 290

  117 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE • $@9 block

    $default  reduce using rule 116 ($@9)

    $@9  go to state 299


State 291

  143 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 143 (vector_statement)


State 292

  142 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 142 (vector_statement)


State 293

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 300


State 294

  115 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE $@8 block •

    $default  reduce using rule 115 (iteration_statement)


State 295

  113 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@7 • block

    LBRACE  shift, and go to state 157

    block  go to state 301


State 296

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 causal_statement • RBRACE

    RBRACE  shift, and go to state 302


State 297

  102 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block $@4 • conditional_non_statement

    KW_NON  shift, and go to state 303

    $default  reduce using rule 105 (conditional_non_statement)

    conditional_non_statement  go to state 304


State 298

  119 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE $@10 block •

    $default  reduce using rule 119 (iteration_statement)


State 299

  117 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 • block

    LBRACE  shift, and go to state 157

    block  go to state 305


State 300

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 28 (assignment_statement)


State 301

  113 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE $@7 block •

    $default  reduce using rule 113 (iteration_statement)


State 302

  104 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE •

    $default  reduce using rule 104 (conditional_statement)


State 303

  106 conditional_non_statement: KW_NON • block
  107                          | KW_NON • conditional_statement

    LPAREN  shift, and go to state 306
    LBRACE  shift, and go to state 157

    block                  go to state 307
    conditional_statement  go to state 308


State 304

  102 conditional_statement: LPAREN expression RPAREN KW_SI $@3 block $@4 conditional_non_statement •

    $default  reduce using rule 102 (conditional_statement)


State 305

  117 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE $@9 block •

    $default  reduce using rule 117 (iteration_statement)


State 306

  102 conditional_statement: LPAREN • expression RPAREN KW_SI $@3 block $@4 conditional_non_statement
  104                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 309
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 307

  106 conditional_non_statement: KW_NON block •

    $default  reduce using rule 106 (conditional_non_statement)


State 308

  107 conditional_non_statement: KW_NON conditional_statement •

    $default  reduce using rule 107 (conditional_non_statement)


State 309

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  102 conditional_statement: LPAREN expression • RPAREN KW_SI $@3 block $@4 conditional_non_statement
  104                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@5 causal_statement RBRACE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 310


State 310

  102 conditional_statement: LPAREN expression RPAREN • KW_SI $@3 block $@4 conditional_non_statement
  104                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@5 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 254
    KW_SI       shift, and go to state 256
