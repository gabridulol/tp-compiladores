Terminals unused in grammar

    OP_ADDR_OF
    OP_ACCESS_MEMBER
    OP_ACCESS_POINTER


State 3 conflicts: 1 shift/reduce
State 56 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 73 conflicts: 1 reduce/reduce
State 77 conflicts: 1 shift/reduce
State 120 conflicts: 1 shift/reduce
State 185 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | program statement

    3 statement: declaration
    4          | command

    5 declaration: var_decl
    6            | func_decl
    7            | type_decl
    8            | typedef_decl

    9 var_decl: IDENTIFIER type SEMICOLON
   10         | KW_MOL IDENTIFIER type SEMICOLON
   11         | IDENTIFIER type OP_ARROW_ASSIGN expression SEMICOLON
   12         | KW_MOL IDENTIFIER type OP_ARROW_ASSIGN expression SEMICOLON

   13 type_decl: IDENTIFIER LBRACE struct_body RBRACE KW_HOMUNCULUS SEMICOLON
   14          | IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

   15 struct_body: ε
   16            | struct_body var_decl

   17 enum_list: IDENTIFIER
   18          | enum_list PIPE IDENTIFIER

   19 typedef_decl: type IDENTIFIER KW_DESIGNARE SEMICOLON

   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN type LBRACE program RBRACE

   21 param_list_opt: ε
   22               | param_list

   23 param_list: param
   24           | param_list PIPE param

   25 param: IDENTIFIER type

   26 type: base_type
   27     | type OP_DEREF_POINTER
   28     | type OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY

   29 base_type: TYPE_VACUUM
   30          | TYPE_ATOMUS
   31          | TYPE_FRAGMENTUM
   32          | TYPE_FRACTIO
   33          | TYPE_QUANTUM
   34          | TYPE_MAGNUS
   35          | TYPE_MINIMUS
   36          | TYPE_SYMBOLUM
   37          | TYPE_SCRIPTUM
   38          | IDENTIFIER

   39 expression_opt: ε
   40               | expression

   41 command: if_command
   42        | while_command
   43        | for_command
   44        | switch_command
   45        | return_command SEMICOLON
   46        | assign_command SEMICOLON
   47        | func_call SEMICOLON
   48        | func_call OP_ARROW_ASSIGN expression SEMICOLON
   49        | break_command
   50        | continue_command
   51        | scan_command
   52        | print_command
   53        | block
   54        | SEMICOLON

   55 assign_command: expression OP_ARROW_ASSIGN expression

   56 if_command: LPAREN expression RPAREN KW_SI command else_part_opt

   57 else_part_opt: ε
   58              | KW_NON command

   59 while_command: LPAREN expression RPAREN KW_PERSISTO command

   60 for_command: LPAREN assign_command_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN KW_ITERARE command

   61 assign_command_opt: ε
   62                   | assign_command

   63 switch_command: LPAREN expression RPAREN KW_VERTERE LBRACE case_list default_case_opt RBRACE

   64 case_list: ε
   65          | case_list case_entry

   66 case_entry: KW_CASUS expression COLON block

   67 default_case_opt: ε
   68                 | KW_AXIOM COLON block

   69 return_command: expression_opt KW_REDIRE

   70 break_command: KW_RUPTIO SEMICOLON

   71 continue_command: KW_CONTINUUM SEMICOLON

   72 scan_command: LPAREN expression RPAREN KW_LECTURA SEMICOLON

   73 print_command: LPAREN expression RPAREN KW_REVELARE SEMICOLON

   74 block: LBRACE program RBRACE

   75 expression: expression KW_VEL expression
   76           | expression OP_LOGICAL_OR expression
   77           | expression KW_ET expression
   78           | expression OP_LOGICAL_AND expression
   79           | expression KW_AUT expression
   80           | expression OP_LOGICAL_XOR expression
   81           | expression OP_EQUAL expression
   82           | expression OP_NOT_EQUAL expression
   83           | expression OP_LESS_THAN expression
   84           | expression OP_GREATER_THAN expression
   85           | expression OP_LESS_EQUAL expression
   86           | expression OP_GREATER_EQUAL expression
   87           | expression OP_ADD expression
   88           | expression OP_SUBTRACT expression
   89           | expression OP_MULTIPLY expression
   90           | expression OP_DIVIDE expression
   91           | expression OP_MODULUS expression
   92           | expression OP_INTEGER_DIVIDE expression
   93           | expression OP_EXP expression
   94           | unary_expr

   95 unary_expr: primary
   96           | OP_SUBTRACT unary_expr
   97           | OP_LOGICAL_NOT unary_expr
   98           | KW_NE unary_expr
   99           | OP_DEREF_POINTER unary_expr
  100           | LPAREN type RPAREN unary_expr

  101 primary: IDENTIFIER
  102        | LIT_INT
  103        | LIT_FLOAT
  104        | LIT_STRING
  105        | LIT_CHAR
  106        | LIT_FACTUM
  107        | LIT_FICTUM
  108        | LPAREN expression RPAREN
  109        | func_call
  110        | sizeof_expr

  111 sizeof_expr: KW_MAGNITUDO LPAREN type RPAREN
  112            | KW_MAGNITUDO LPAREN expression RPAREN

  113 func_call: LPAREN arg_list_opt RPAREN IDENTIFIER

  114 arg_list_opt: ε
  115             | arg_list

  116 arg_list: expression
  117         | arg_list PIPE expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <str> (258) 9 10 11 12 13 14 17 18 19 20 25 38 101 113
    LIT_STRING <str> (259) 104
    LIT_CHAR <str> (260) 105
    LIT_INT <val_int> (261) 102
    LIT_FLOAT <val_float> (262) 103
    KW_SI (263) 56
    KW_NON (264) 58
    KW_ITERARE (265) 60
    KW_PERSISTO (266) 59
    KW_VERTERE (267) 63
    KW_CASUS (268) 66
    KW_AXIOM (269) 68
    KW_RUPTIO (270) 70
    KW_CONTINUUM (271) 71
    KW_REDIRE (272) 69
    KW_MOL (273) 10 12
    KW_HOMUNCULUS (274) 13
    KW_ENUMERARE (275) 14
    KW_DESIGNARE (276) 19
    KW_FORMULA (277) 20
    KW_REVELARE (278) 73
    KW_LECTURA (279) 72
    KW_MAGNITUDO (280) 111 112
    KW_ET (281) 77
    KW_VEL (282) 75
    KW_NE (283) 98
    KW_AUT (284) 79
    TYPE_VACUUM (285) 29
    TYPE_ATOMUS (286) 30
    TYPE_FRAGMENTUM (287) 31
    TYPE_FRACTIO (288) 32
    TYPE_QUANTUM (289) 33
    TYPE_MAGNUS (290) 34
    TYPE_MINIMUS (291) 35
    TYPE_SYMBOLUM (292) 36
    TYPE_SCRIPTUM (293) 37
    LIT_FACTUM (294) 106
    LIT_FICTUM (295) 107
    OP_ARROW_ASSIGN (296) 11 12 20 48 55
    OP_DEREF_POINTER (297) 27 99
    OP_ADDR_OF (298)
    OP_LSHIFT_ARRAY (299) 28
    OP_RSHIFT_ARRAY (300) 28
    OP_ACCESS_MEMBER (301)
    OP_ACCESS_POINTER (302)
    OP_EXP (303) 93
    OP_INTEGER_DIVIDE (304) 92
    OP_ADD (305) 87
    OP_SUBTRACT (306) 88 96
    OP_MULTIPLY (307) 89
    OP_DIVIDE (308) 90
    OP_MODULUS (309) 91
    OP_EQUAL (310) 81
    OP_NOT_EQUAL (311) 82
    OP_LESS_THAN (312) 83
    OP_GREATER_THAN (313) 84
    OP_LESS_EQUAL (314) 85
    OP_GREATER_EQUAL (315) 86
    OP_LOGICAL_AND (316) 78
    OP_LOGICAL_OR (317) 76
    OP_LOGICAL_NOT (318) 97
    OP_LOGICAL_XOR (319) 80
    LBRACE (320) 13 14 20 63 74
    RBRACE (321) 13 14 20 63 74
    SEMICOLON (322) 9 10 11 12 13 14 19 45 46 47 48 54 60 70 71 72 73
    LPAREN (323) 20 56 59 60 63 72 73 100 108 111 112 113
    RPAREN (324) 20 56 59 60 63 72 73 100 108 111 112 113
    PIPE (325) 18 24 117
    COLON (326) 66 68
    PREC_UNARY (327)
    UNARY_MINUS (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    program (75)
        on left: 1 2
        on right: 0 2 20 74
    statement (76)
        on left: 3 4
        on right: 2
    declaration (77)
        on left: 5 6 7 8
        on right: 3
    var_decl (78)
        on left: 9 10 11 12
        on right: 5 16
    type_decl (79)
        on left: 13 14
        on right: 7
    struct_body (80)
        on left: 15 16
        on right: 13 16
    enum_list (81)
        on left: 17 18
        on right: 14 18
    typedef_decl (82)
        on left: 19
        on right: 8
    func_decl (83)
        on left: 20
        on right: 6
    param_list_opt (84)
        on left: 21 22
        on right: 20
    param_list (85)
        on left: 23 24
        on right: 22 24
    param (86)
        on left: 25
        on right: 23 24
    type (87)
        on left: 26 27 28
        on right: 9 10 11 12 19 20 25 27 28 100 111
    base_type (88)
        on left: 29 30 31 32 33 34 35 36 37 38
        on right: 26
    expression_opt (89)
        on left: 39 40
        on right: 28 60 69
    command (90)
        on left: 41 42 43 44 45 46 47 48 49 50 51 52 53 54
        on right: 4 56 58 59 60
    assign_command (91)
        on left: 55
        on right: 46 62
    if_command (92)
        on left: 56
        on right: 41
    else_part_opt (93)
        on left: 57 58
        on right: 56
    while_command (94)
        on left: 59
        on right: 42
    for_command (95)
        on left: 60
        on right: 43
    assign_command_opt (96)
        on left: 61 62
        on right: 60
    switch_command (97)
        on left: 63
        on right: 44
    case_list (98)
        on left: 64 65
        on right: 63 65
    case_entry (99)
        on left: 66
        on right: 65
    default_case_opt (100)
        on left: 67 68
        on right: 63
    return_command (101)
        on left: 69
        on right: 45
    break_command (102)
        on left: 70
        on right: 49
    continue_command (103)
        on left: 71
        on right: 50
    scan_command (104)
        on left: 72
        on right: 51
    print_command (105)
        on left: 73
        on right: 52
    block (106)
        on left: 74
        on right: 53 66 68
    expression <str> (107)
        on left: 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94
        on right: 11 12 40 48 55 56 59 63 66 72 73 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 108 112 116 117
    unary_expr (108)
        on left: 95 96 97 98 99 100
        on right: 94 96 97 98 99 100
    primary <str> (109)
        on left: 101 102 103 104 105 106 107 108 109 110
        on right: 95
    sizeof_expr (110)
        on left: 111 112
        on right: 110
    func_call (111)
        on left: 113
        on right: 47 48 109
    arg_list_opt (112)
        on left: 114 115
        on right: 113
    arg_list (113)
        on left: 116 117
        on right: 115 117


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    2 program: program • statement

    $end              shift, and go to state 2
    IDENTIFIER        shift, and go to state 3
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_RUPTIO         shift, and go to state 8
    KW_CONTINUUM      shift, and go to state 9
    KW_MOL            shift, and go to state 10
    KW_FORMULA        shift, and go to state 11
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    TYPE_VACUUM       shift, and go to state 14
    TYPE_ATOMUS       shift, and go to state 15
    TYPE_FRAGMENTUM   shift, and go to state 16
    TYPE_FRACTIO      shift, and go to state 17
    TYPE_QUANTUM      shift, and go to state 18
    TYPE_MAGNUS       shift, and go to state 19
    TYPE_MINIMUS      shift, and go to state 20
    TYPE_SYMBOLUM     shift, and go to state 21
    TYPE_SCRIPTUM     shift, and go to state 22
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LBRACE            shift, and go to state 28
    SEMICOLON         shift, and go to state 29
    LPAREN            shift, and go to state 30

    $default  reduce using rule 39 (expression_opt)

    statement         go to state 31
    declaration       go to state 32
    var_decl          go to state 33
    type_decl         go to state 34
    typedef_decl      go to state 35
    func_decl         go to state 36
    type              go to state 37
    base_type         go to state 38
    expression_opt    go to state 39
    command           go to state 40
    assign_command    go to state 41
    if_command        go to state 42
    while_command     go to state 43
    for_command       go to state 44
    switch_command    go to state 45
    return_command    go to state 46
    break_command     go to state 47
    continue_command  go to state 48
    scan_command      go to state 49
    print_command     go to state 50
    block             go to state 51
    expression        go to state 52
    unary_expr        go to state 53
    primary           go to state 54
    sizeof_expr       go to state 55
    func_call         go to state 56


State 2

    0 $accept: program $end •

    $default  accept


State 3

    9 var_decl: IDENTIFIER • type SEMICOLON
   11         | IDENTIFIER • type OP_ARROW_ASSIGN expression SEMICOLON
   13 type_decl: IDENTIFIER • LBRACE struct_body RBRACE KW_HOMUNCULUS SEMICOLON
   14          | IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
   38 base_type: IDENTIFIER •
  101 primary: IDENTIFIER •

    IDENTIFIER       shift, and go to state 57
    TYPE_VACUUM      shift, and go to state 14
    TYPE_ATOMUS      shift, and go to state 15
    TYPE_FRAGMENTUM  shift, and go to state 16
    TYPE_FRACTIO     shift, and go to state 17
    TYPE_QUANTUM     shift, and go to state 18
    TYPE_MAGNUS      shift, and go to state 19
    TYPE_MINIMUS     shift, and go to state 20
    TYPE_SYMBOLUM    shift, and go to state 21
    TYPE_SCRIPTUM    shift, and go to state 22
    LBRACE           shift, and go to state 58

    IDENTIFIER        [reduce using rule 38 (base_type)]
    OP_DEREF_POINTER  reduce using rule 38 (base_type)
    OP_LSHIFT_ARRAY   reduce using rule 38 (base_type)
    $default          reduce using rule 101 (primary)

    type       go to state 59
    base_type  go to state 38

    shift/reduce conflict on token IDENTIFIER:
       38 base_type: IDENTIFIER •
       38 base_type: • IDENTIFIER
      First example: program IDENTIFIER • IDENTIFIER SEMICOLON
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 3: declaration
                          ↳ 5: var_decl
                               ↳ 9: IDENTIFIER type                     SEMICOLON
                                               ↳ 26: base_type
                                                     ↳ 38: • IDENTIFIER
      Second example: program IDENTIFIER • IDENTIFIER KW_DESIGNARE SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                 $end
             ↳ 2: program statement
                          ↳ 3: declaration
                               ↳ 8: typedef_decl
                                    ↳ 19: type                     IDENTIFIER KW_DESIGNARE SEMICOLON
                                          ↳ 26: base_type
                                                ↳ 38: IDENTIFIER •



State 4

  104 primary: LIT_STRING •

    $default  reduce using rule 104 (primary)


State 5

  105 primary: LIT_CHAR •

    $default  reduce using rule 105 (primary)


State 6

  102 primary: LIT_INT •

    $default  reduce using rule 102 (primary)


State 7

  103 primary: LIT_FLOAT •

    $default  reduce using rule 103 (primary)


State 8

   70 break_command: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 60


State 9

   71 continue_command: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 61


State 10

   10 var_decl: KW_MOL • IDENTIFIER type SEMICOLON
   12         | KW_MOL • IDENTIFIER type OP_ARROW_ASSIGN expression SEMICOLON

    IDENTIFIER  shift, and go to state 62


State 11

   20 func_decl: KW_FORMULA • LPAREN param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN type LBRACE program RBRACE

    LPAREN  shift, and go to state 63


State 12

  111 sizeof_expr: KW_MAGNITUDO • LPAREN type RPAREN
  112            | KW_MAGNITUDO • LPAREN expression RPAREN

    LPAREN  shift, and go to state 64


State 13

   98 unary_expr: KW_NE • unary_expr

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    unary_expr   go to state 67
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 14

   29 base_type: TYPE_VACUUM •

    $default  reduce using rule 29 (base_type)


State 15

   30 base_type: TYPE_ATOMUS •

    $default  reduce using rule 30 (base_type)


State 16

   31 base_type: TYPE_FRAGMENTUM •

    $default  reduce using rule 31 (base_type)


State 17

   32 base_type: TYPE_FRACTIO •

    $default  reduce using rule 32 (base_type)


State 18

   33 base_type: TYPE_QUANTUM •

    $default  reduce using rule 33 (base_type)


State 19

   34 base_type: TYPE_MAGNUS •

    $default  reduce using rule 34 (base_type)


State 20

   35 base_type: TYPE_MINIMUS •

    $default  reduce using rule 35 (base_type)


State 21

   36 base_type: TYPE_SYMBOLUM •

    $default  reduce using rule 36 (base_type)


State 22

   37 base_type: TYPE_SCRIPTUM •

    $default  reduce using rule 37 (base_type)


State 23

  106 primary: LIT_FACTUM •

    $default  reduce using rule 106 (primary)


State 24

  107 primary: LIT_FICTUM •

    $default  reduce using rule 107 (primary)


State 25

   99 unary_expr: OP_DEREF_POINTER • unary_expr

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    unary_expr   go to state 69
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 26

   96 unary_expr: OP_SUBTRACT • unary_expr

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    unary_expr   go to state 70
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 27

   97 unary_expr: OP_LOGICAL_NOT • unary_expr

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    unary_expr   go to state 71
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 28

   74 block: LBRACE • program RBRACE

    $default  reduce using rule 1 (program)

    program  go to state 72


State 29

   54 command: SEMICOLON •

    $default  reduce using rule 54 (command)


State 30

   56 if_command: LPAREN • expression RPAREN KW_SI command else_part_opt
   59 while_command: LPAREN • expression RPAREN KW_PERSISTO command
   60 for_command: LPAREN • assign_command_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN KW_ITERARE command
   63 switch_command: LPAREN • expression RPAREN KW_VERTERE LBRACE case_list default_case_opt RBRACE
   72 scan_command: LPAREN • expression RPAREN KW_LECTURA SEMICOLON
   73 print_command: LPAREN • expression RPAREN KW_REVELARE SEMICOLON
  100 unary_expr: LPAREN • type RPAREN unary_expr
  108 primary: LPAREN • expression RPAREN
  113 func_call: LPAREN • arg_list_opt RPAREN IDENTIFIER

    IDENTIFIER        shift, and go to state 73
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    TYPE_VACUUM       shift, and go to state 14
    TYPE_ATOMUS       shift, and go to state 15
    TYPE_FRAGMENTUM   shift, and go to state 16
    TYPE_FRACTIO      shift, and go to state 17
    TYPE_QUANTUM      shift, and go to state 18
    TYPE_MAGNUS       shift, and go to state 19
    TYPE_MINIMUS      shift, and go to state 20
    TYPE_SYMBOLUM     shift, and go to state 21
    TYPE_SCRIPTUM     shift, and go to state 22
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    RPAREN    reduce using rule 114 (arg_list_opt)
    $default  reduce using rule 61 (assign_command_opt)

    type                go to state 74
    base_type           go to state 38
    assign_command      go to state 75
    assign_command_opt  go to state 76
    expression          go to state 77
    unary_expr          go to state 53
    primary             go to state 54
    sizeof_expr         go to state 55
    func_call           go to state 68
    arg_list_opt        go to state 78
    arg_list            go to state 79


State 31

    2 program: program statement •

    $default  reduce using rule 2 (program)


State 32

    3 statement: declaration •

    $default  reduce using rule 3 (statement)


State 33

    5 declaration: var_decl •

    $default  reduce using rule 5 (declaration)


State 34

    7 declaration: type_decl •

    $default  reduce using rule 7 (declaration)


State 35

    8 declaration: typedef_decl •

    $default  reduce using rule 8 (declaration)


State 36

    6 declaration: func_decl •

    $default  reduce using rule 6 (declaration)


State 37

   19 typedef_decl: type • IDENTIFIER KW_DESIGNARE SEMICOLON
   27 type: type • OP_DEREF_POINTER
   28     | type • OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY

    IDENTIFIER        shift, and go to state 80
    OP_DEREF_POINTER  shift, and go to state 81
    OP_LSHIFT_ARRAY   shift, and go to state 82


State 38

   26 type: base_type •

    $default  reduce using rule 26 (type)


State 39

   69 return_command: expression_opt • KW_REDIRE

    KW_REDIRE  shift, and go to state 83


State 40

    4 statement: command •

    $default  reduce using rule 4 (statement)


State 41

   46 command: assign_command • SEMICOLON

    SEMICOLON  shift, and go to state 84


State 42

   41 command: if_command •

    $default  reduce using rule 41 (command)


State 43

   42 command: while_command •

    $default  reduce using rule 42 (command)


State 44

   43 command: for_command •

    $default  reduce using rule 43 (command)


State 45

   44 command: switch_command •

    $default  reduce using rule 44 (command)


State 46

   45 command: return_command • SEMICOLON

    SEMICOLON  shift, and go to state 85


State 47

   49 command: break_command •

    $default  reduce using rule 49 (command)


State 48

   50 command: continue_command •

    $default  reduce using rule 50 (command)


State 49

   51 command: scan_command •

    $default  reduce using rule 51 (command)


State 50

   52 command: print_command •

    $default  reduce using rule 52 (command)


State 51

   53 command: block •

    $default  reduce using rule 53 (command)


State 52

   40 expression_opt: expression •
   55 assign_command: expression • OP_ARROW_ASSIGN expression
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_ARROW_ASSIGN    shift, and go to state 89
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 40 (expression_opt)


State 53

   94 expression: unary_expr •

    $default  reduce using rule 94 (expression)


State 54

   95 unary_expr: primary •

    $default  reduce using rule 95 (unary_expr)


State 55

  110 primary: sizeof_expr •

    $default  reduce using rule 110 (primary)


State 56

   47 command: func_call • SEMICOLON
   48        | func_call • OP_ARROW_ASSIGN expression SEMICOLON
  109 primary: func_call •

    OP_ARROW_ASSIGN  shift, and go to state 106
    SEMICOLON        shift, and go to state 107

    OP_ARROW_ASSIGN  [reduce using rule 109 (primary)]
    $default         reduce using rule 109 (primary)

    shift/reduce conflict on token OP_ARROW_ASSIGN:
      109 primary: func_call •
       48 command: func_call • OP_ARROW_ASSIGN expression SEMICOLON
      Example: func_call • OP_ARROW_ASSIGN expression SEMICOLON
      Shift derivation
        command
        ↳ 48: func_call • OP_ARROW_ASSIGN expression SEMICOLON
      Reduce derivation
        command
        ↳ 46: assign_command                                                  SEMICOLON
              ↳ 55: expression                     OP_ARROW_ASSIGN expression
                    ↳ 94: unary_expr
                          ↳ 95: primary
                                ↳ 109: func_call •



State 57

   38 base_type: IDENTIFIER •

    $default  reduce using rule 38 (base_type)


State 58

   13 type_decl: IDENTIFIER LBRACE • struct_body RBRACE KW_HOMUNCULUS SEMICOLON
   14          | IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 108

    IDENTIFIER  [reduce using rule 15 (struct_body)]
    $default    reduce using rule 15 (struct_body)

    struct_body  go to state 109
    enum_list    go to state 110

    shift/reduce conflict on token IDENTIFIER:
       15 struct_body: ε •
       17 enum_list: • IDENTIFIER
      First example: program IDENTIFIER LBRACE • IDENTIFIER RBRACE KW_ENUMERARE SEMICOLON
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 3: declaration
                          ↳ 7: type_decl
                               ↳ 14: IDENTIFIER LBRACE enum_list          RBRACE KW_ENUMERARE SEMICOLON
                                                       ↳ 17: • IDENTIFIER
      Second example: program IDENTIFIER LBRACE • IDENTIFIER type SEMICOLON RBRACE KW_HOMUNCULUS SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                        $end
             ↳ 2: program statement
                          ↳ 3: declaration
                               ↳ 7: type_decl
                                    ↳ 13: IDENTIFIER LBRACE struct_body                                      RBRACE KW_HOMUNCULUS SEMICOLON
                                                            ↳ 16: struct_body var_decl
                                                                  ↳ 15: ε •   ↳ 9: IDENTIFIER type SEMICOLON



State 59

    9 var_decl: IDENTIFIER type • SEMICOLON
   11         | IDENTIFIER type • OP_ARROW_ASSIGN expression SEMICOLON
   27 type: type • OP_DEREF_POINTER
   28     | type • OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY

    OP_ARROW_ASSIGN   shift, and go to state 111
    OP_DEREF_POINTER  shift, and go to state 81
    OP_LSHIFT_ARRAY   shift, and go to state 82
    SEMICOLON         shift, and go to state 112


State 60

   70 break_command: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 70 (break_command)


State 61

   71 continue_command: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 71 (continue_command)


State 62

   10 var_decl: KW_MOL IDENTIFIER • type SEMICOLON
   12         | KW_MOL IDENTIFIER • type OP_ARROW_ASSIGN expression SEMICOLON

    IDENTIFIER       shift, and go to state 57
    TYPE_VACUUM      shift, and go to state 14
    TYPE_ATOMUS      shift, and go to state 15
    TYPE_FRAGMENTUM  shift, and go to state 16
    TYPE_FRACTIO     shift, and go to state 17
    TYPE_QUANTUM     shift, and go to state 18
    TYPE_MAGNUS      shift, and go to state 19
    TYPE_MINIMUS     shift, and go to state 20
    TYPE_SYMBOLUM    shift, and go to state 21
    TYPE_SCRIPTUM    shift, and go to state 22

    type       go to state 113
    base_type  go to state 38


State 63

   20 func_decl: KW_FORMULA LPAREN • param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN type LBRACE program RBRACE

    IDENTIFIER  shift, and go to state 114

    $default  reduce using rule 21 (param_list_opt)

    param_list_opt  go to state 115
    param_list      go to state 116
    param           go to state 117


State 64

  111 sizeof_expr: KW_MAGNITUDO LPAREN • type RPAREN
  112            | KW_MAGNITUDO LPAREN • expression RPAREN

    IDENTIFIER        shift, and go to state 73
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    TYPE_VACUUM       shift, and go to state 14
    TYPE_ATOMUS       shift, and go to state 15
    TYPE_FRAGMENTUM   shift, and go to state 16
    TYPE_FRACTIO      shift, and go to state 17
    TYPE_QUANTUM      shift, and go to state 18
    TYPE_MAGNUS       shift, and go to state 19
    TYPE_MINIMUS      shift, and go to state 20
    TYPE_SYMBOLUM     shift, and go to state 21
    TYPE_SCRIPTUM     shift, and go to state 22
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    type         go to state 118
    base_type    go to state 38
    expression   go to state 119
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 65

  101 primary: IDENTIFIER •

    $default  reduce using rule 101 (primary)


State 66

  100 unary_expr: LPAREN • type RPAREN unary_expr
  108 primary: LPAREN • expression RPAREN
  113 func_call: LPAREN • arg_list_opt RPAREN IDENTIFIER

    IDENTIFIER        shift, and go to state 73
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    TYPE_VACUUM       shift, and go to state 14
    TYPE_ATOMUS       shift, and go to state 15
    TYPE_FRAGMENTUM   shift, and go to state 16
    TYPE_FRACTIO      shift, and go to state 17
    TYPE_QUANTUM      shift, and go to state 18
    TYPE_MAGNUS       shift, and go to state 19
    TYPE_MINIMUS      shift, and go to state 20
    TYPE_SYMBOLUM     shift, and go to state 21
    TYPE_SCRIPTUM     shift, and go to state 22
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    $default  reduce using rule 114 (arg_list_opt)

    type          go to state 74
    base_type     go to state 38
    expression    go to state 120
    unary_expr    go to state 53
    primary       go to state 54
    sizeof_expr   go to state 55
    func_call     go to state 68
    arg_list_opt  go to state 78
    arg_list      go to state 79


State 67

   98 unary_expr: KW_NE unary_expr •

    $default  reduce using rule 98 (unary_expr)


State 68

  109 primary: func_call •

    $default  reduce using rule 109 (primary)


State 69

   99 unary_expr: OP_DEREF_POINTER unary_expr •

    $default  reduce using rule 99 (unary_expr)


State 70

   96 unary_expr: OP_SUBTRACT unary_expr •

    $default  reduce using rule 96 (unary_expr)


State 71

   97 unary_expr: OP_LOGICAL_NOT unary_expr •

    $default  reduce using rule 97 (unary_expr)


State 72

    2 program: program • statement
   74 block: LBRACE program • RBRACE

    IDENTIFIER        shift, and go to state 3
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_RUPTIO         shift, and go to state 8
    KW_CONTINUUM      shift, and go to state 9
    KW_MOL            shift, and go to state 10
    KW_FORMULA        shift, and go to state 11
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    TYPE_VACUUM       shift, and go to state 14
    TYPE_ATOMUS       shift, and go to state 15
    TYPE_FRAGMENTUM   shift, and go to state 16
    TYPE_FRACTIO      shift, and go to state 17
    TYPE_QUANTUM      shift, and go to state 18
    TYPE_MAGNUS       shift, and go to state 19
    TYPE_MINIMUS      shift, and go to state 20
    TYPE_SYMBOLUM     shift, and go to state 21
    TYPE_SCRIPTUM     shift, and go to state 22
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LBRACE            shift, and go to state 28
    RBRACE            shift, and go to state 121
    SEMICOLON         shift, and go to state 29
    LPAREN            shift, and go to state 30

    $default  reduce using rule 39 (expression_opt)

    statement         go to state 31
    declaration       go to state 32
    var_decl          go to state 33
    type_decl         go to state 34
    typedef_decl      go to state 35
    func_decl         go to state 36
    type              go to state 37
    base_type         go to state 38
    expression_opt    go to state 39
    command           go to state 40
    assign_command    go to state 41
    if_command        go to state 42
    while_command     go to state 43
    for_command       go to state 44
    switch_command    go to state 45
    return_command    go to state 46
    break_command     go to state 47
    continue_command  go to state 48
    scan_command      go to state 49
    print_command     go to state 50
    block             go to state 51
    expression        go to state 52
    unary_expr        go to state 53
    primary           go to state 54
    sizeof_expr       go to state 55
    func_call         go to state 56


State 73

   38 base_type: IDENTIFIER •
  101 primary: IDENTIFIER •

    OP_DEREF_POINTER  reduce using rule 38 (base_type)
    OP_LSHIFT_ARRAY   reduce using rule 38 (base_type)
    RPAREN            reduce using rule 38 (base_type)
    RPAREN            [reduce using rule 101 (primary)]
    $default          reduce using rule 101 (primary)

    reduce/reduce conflict on token RPAREN:
       38 base_type: IDENTIFIER •
      101 primary: IDENTIFIER •
      Example: LPAREN IDENTIFIER • RPAREN IDENTIFIER
      First reduce derivation
        unary_expr
        ↳ 100: LPAREN type                     RPAREN unary_expr
                      ↳ 26: base_type                 ↳ 95: primary
                            ↳ 38: IDENTIFIER •              ↳ 101: IDENTIFIER
      Second reduce derivation
        unary_expr
        ↳ 95: primary
              ↳ 109: func_call
                     ↳ 113: LPAREN arg_list_opt                                  RPAREN IDENTIFIER
                                   ↳ 115: arg_list
                                          ↳ 116: expression
                                                 ↳ 94: unary_expr
                                                       ↳ 95: primary
                                                             ↳ 101: IDENTIFIER •



State 74

   27 type: type • OP_DEREF_POINTER
   28     | type • OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY
  100 unary_expr: LPAREN type • RPAREN unary_expr

    OP_DEREF_POINTER  shift, and go to state 81
    OP_LSHIFT_ARRAY   shift, and go to state 82
    RPAREN            shift, and go to state 122


State 75

   62 assign_command_opt: assign_command •

    $default  reduce using rule 62 (assign_command_opt)


State 76

   60 for_command: LPAREN assign_command_opt • SEMICOLON expression_opt SEMICOLON expression_opt RPAREN KW_ITERARE command

    SEMICOLON  shift, and go to state 123


State 77

   55 assign_command: expression • OP_ARROW_ASSIGN expression
   56 if_command: LPAREN expression • RPAREN KW_SI command else_part_opt
   59 while_command: LPAREN expression • RPAREN KW_PERSISTO command
   63 switch_command: LPAREN expression • RPAREN KW_VERTERE LBRACE case_list default_case_opt RBRACE
   72 scan_command: LPAREN expression • RPAREN KW_LECTURA SEMICOLON
   73 print_command: LPAREN expression • RPAREN KW_REVELARE SEMICOLON
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression
  108 primary: LPAREN expression • RPAREN
  116 arg_list: expression •

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_ARROW_ASSIGN    shift, and go to state 89
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105
    RPAREN             shift, and go to state 124

    RPAREN    [reduce using rule 116 (arg_list)]
    $default  reduce using rule 116 (arg_list)

    shift/reduce conflict on token RPAREN:
      116 arg_list: expression •
       56 if_command: LPAREN expression • RPAREN KW_SI command else_part_opt
      First example: program LPAREN expression • RPAREN KW_SI command else_part_opt
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 4: command
                          ↳ 41: if_command
                                ↳ 56: LPAREN expression • RPAREN KW_SI command else_part_opt
      Second example: program LPAREN expression • RPAREN IDENTIFIER SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                      $end
             ↳ 2: program statement
                          ↳ 4: command
                               ↳ 47: func_call                                                  SEMICOLON
                                     ↳ 113: LPAREN arg_list_opt               RPAREN IDENTIFIER
                                                   ↳ 115: arg_list
                                                          ↳ 116: expression •

    shift/reduce conflict on token RPAREN:
      116 arg_list: expression •
       59 while_command: LPAREN expression • RPAREN KW_PERSISTO command
      First example: program LPAREN expression • RPAREN KW_PERSISTO command
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 4: command
                          ↳ 42: while_command
                                ↳ 59: LPAREN expression • RPAREN KW_PERSISTO command
      Second example: program LPAREN expression • RPAREN IDENTIFIER SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                      $end
             ↳ 2: program statement
                          ↳ 4: command
                               ↳ 47: func_call                                                  SEMICOLON
                                     ↳ 113: LPAREN arg_list_opt               RPAREN IDENTIFIER
                                                   ↳ 115: arg_list
                                                          ↳ 116: expression •

    shift/reduce conflict on token RPAREN:
      116 arg_list: expression •
       63 switch_command: LPAREN expression • RPAREN KW_VERTERE LBRACE case_list default_case_opt RBRACE
      First example: program LPAREN expression • RPAREN KW_VERTERE LBRACE case_list default_case_opt RBRACE
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 4: command
                          ↳ 44: switch_command
                                ↳ 63: LPAREN expression • RPAREN KW_VERTERE LBRACE case_list default_case_opt RBRACE
      Second example: program LPAREN expression • RPAREN IDENTIFIER SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                      $end
             ↳ 2: program statement
                          ↳ 4: command
                               ↳ 47: func_call                                                  SEMICOLON
                                     ↳ 113: LPAREN arg_list_opt               RPAREN IDENTIFIER
                                                   ↳ 115: arg_list
                                                          ↳ 116: expression •

    shift/reduce conflict on token RPAREN:
      116 arg_list: expression •
       72 scan_command: LPAREN expression • RPAREN KW_LECTURA SEMICOLON
      First example: program LPAREN expression • RPAREN KW_LECTURA SEMICOLON
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 4: command
                          ↳ 51: scan_command
                                ↳ 72: LPAREN expression • RPAREN KW_LECTURA SEMICOLON
      Second example: program LPAREN expression • RPAREN IDENTIFIER SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                      $end
             ↳ 2: program statement
                          ↳ 4: command
                               ↳ 47: func_call                                                  SEMICOLON
                                     ↳ 113: LPAREN arg_list_opt               RPAREN IDENTIFIER
                                                   ↳ 115: arg_list
                                                          ↳ 116: expression •

    shift/reduce conflict on token RPAREN:
      116 arg_list: expression •
       73 print_command: LPAREN expression • RPAREN KW_REVELARE SEMICOLON
      First example: program LPAREN expression • RPAREN KW_REVELARE SEMICOLON
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 4: command
                          ↳ 52: print_command
                                ↳ 73: LPAREN expression • RPAREN KW_REVELARE SEMICOLON
      Second example: program LPAREN expression • RPAREN IDENTIFIER SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                      $end
             ↳ 2: program statement
                          ↳ 4: command
                               ↳ 47: func_call                                                  SEMICOLON
                                     ↳ 113: LPAREN arg_list_opt               RPAREN IDENTIFIER
                                                   ↳ 115: arg_list
                                                          ↳ 116: expression •

    shift/reduce conflict on token RPAREN:
      116 arg_list: expression •
      108 primary: LPAREN expression • RPAREN
      First example: program LPAREN expression • RPAREN OP_ARROW_ASSIGN expression SEMICOLON
      Shift derivation
        program
        ↳ 2: program statement
                     ↳ 4: command
                          ↳ 46: assign_command                                                                 SEMICOLON
                                ↳ 55: expression                                    OP_ARROW_ASSIGN expression
                                      ↳ 94: unary_expr
                                            ↳ 95: primary
                                                  ↳ 108: LPAREN expression • RPAREN
      Second example: program LPAREN expression • RPAREN IDENTIFIER SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                      $end
             ↳ 2: program statement
                          ↳ 4: command
                               ↳ 47: func_call                                                  SEMICOLON
                                     ↳ 113: LPAREN arg_list_opt               RPAREN IDENTIFIER
                                                   ↳ 115: arg_list
                                                          ↳ 116: expression •



State 78

  113 func_call: LPAREN arg_list_opt • RPAREN IDENTIFIER

    RPAREN  shift, and go to state 125


State 79

  115 arg_list_opt: arg_list •
  117 arg_list: arg_list • PIPE expression

    PIPE  shift, and go to state 126

    $default  reduce using rule 115 (arg_list_opt)


State 80

   19 typedef_decl: type IDENTIFIER • KW_DESIGNARE SEMICOLON

    KW_DESIGNARE  shift, and go to state 127


State 81

   27 type: type OP_DEREF_POINTER •

    $default  reduce using rule 27 (type)


State 82

   28 type: type OP_LSHIFT_ARRAY • expression_opt OP_RSHIFT_ARRAY

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    $default  reduce using rule 39 (expression_opt)

    expression_opt  go to state 128
    expression      go to state 129
    unary_expr      go to state 53
    primary         go to state 54
    sizeof_expr     go to state 55
    func_call       go to state 68


State 83

   69 return_command: expression_opt KW_REDIRE •

    $default  reduce using rule 69 (return_command)


State 84

   46 command: assign_command SEMICOLON •

    $default  reduce using rule 46 (command)


State 85

   45 command: return_command SEMICOLON •

    $default  reduce using rule 45 (command)


State 86

   77 expression: expression KW_ET • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 130
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 87

   75 expression: expression KW_VEL • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 131
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 88

   79 expression: expression KW_AUT • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 132
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 89

   55 assign_command: expression OP_ARROW_ASSIGN • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 133
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 90

   93 expression: expression OP_EXP • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 134
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 91

   92 expression: expression OP_INTEGER_DIVIDE • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 135
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 92

   87 expression: expression OP_ADD • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 136
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 93

   88 expression: expression OP_SUBTRACT • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 137
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 94

   89 expression: expression OP_MULTIPLY • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 138
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 95

   90 expression: expression OP_DIVIDE • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 139
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 96

   91 expression: expression OP_MODULUS • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 140
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 97

   81 expression: expression OP_EQUAL • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 141
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 98

   82 expression: expression OP_NOT_EQUAL • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 142
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 99

   83 expression: expression OP_LESS_THAN • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 143
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 100

   84 expression: expression OP_GREATER_THAN • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 144
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 101

   85 expression: expression OP_LESS_EQUAL • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 145
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 102

   86 expression: expression OP_GREATER_EQUAL • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 146
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 103

   78 expression: expression OP_LOGICAL_AND • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 147
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 104

   76 expression: expression OP_LOGICAL_OR • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 148
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 105

   80 expression: expression OP_LOGICAL_XOR • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 149
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 106

   48 command: func_call OP_ARROW_ASSIGN • expression SEMICOLON

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 150
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 107

   47 command: func_call SEMICOLON •

    $default  reduce using rule 47 (command)


State 108

   17 enum_list: IDENTIFIER •

    $default  reduce using rule 17 (enum_list)


State 109

   13 type_decl: IDENTIFIER LBRACE struct_body • RBRACE KW_HOMUNCULUS SEMICOLON
   16 struct_body: struct_body • var_decl

    IDENTIFIER  shift, and go to state 151
    KW_MOL      shift, and go to state 10
    RBRACE      shift, and go to state 152

    var_decl  go to state 153


State 110

   14 type_decl: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
   18 enum_list: enum_list • PIPE IDENTIFIER

    RBRACE  shift, and go to state 154
    PIPE    shift, and go to state 155


State 111

   11 var_decl: IDENTIFIER type OP_ARROW_ASSIGN • expression SEMICOLON

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 156
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 112

    9 var_decl: IDENTIFIER type SEMICOLON •

    $default  reduce using rule 9 (var_decl)


State 113

   10 var_decl: KW_MOL IDENTIFIER type • SEMICOLON
   12         | KW_MOL IDENTIFIER type • OP_ARROW_ASSIGN expression SEMICOLON
   27 type: type • OP_DEREF_POINTER
   28     | type • OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY

    OP_ARROW_ASSIGN   shift, and go to state 157
    OP_DEREF_POINTER  shift, and go to state 81
    OP_LSHIFT_ARRAY   shift, and go to state 82
    SEMICOLON         shift, and go to state 158


State 114

   25 param: IDENTIFIER • type

    IDENTIFIER       shift, and go to state 57
    TYPE_VACUUM      shift, and go to state 14
    TYPE_ATOMUS      shift, and go to state 15
    TYPE_FRAGMENTUM  shift, and go to state 16
    TYPE_FRACTIO     shift, and go to state 17
    TYPE_QUANTUM     shift, and go to state 18
    TYPE_MAGNUS      shift, and go to state 19
    TYPE_MINIMUS     shift, and go to state 20
    TYPE_SYMBOLUM    shift, and go to state 21
    TYPE_SCRIPTUM    shift, and go to state 22

    type       go to state 159
    base_type  go to state 38


State 115

   20 func_decl: KW_FORMULA LPAREN param_list_opt • RPAREN IDENTIFIER OP_ARROW_ASSIGN type LBRACE program RBRACE

    RPAREN  shift, and go to state 160


State 116

   22 param_list_opt: param_list •
   24 param_list: param_list • PIPE param

    PIPE  shift, and go to state 161

    $default  reduce using rule 22 (param_list_opt)


State 117

   23 param_list: param •

    $default  reduce using rule 23 (param_list)


State 118

   27 type: type • OP_DEREF_POINTER
   28     | type • OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY
  111 sizeof_expr: KW_MAGNITUDO LPAREN type • RPAREN

    OP_DEREF_POINTER  shift, and go to state 81
    OP_LSHIFT_ARRAY   shift, and go to state 82
    RPAREN            shift, and go to state 162


State 119

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression
  112 sizeof_expr: KW_MAGNITUDO LPAREN expression • RPAREN

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105
    RPAREN             shift, and go to state 163


State 120

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression
  108 primary: LPAREN expression • RPAREN
  116 arg_list: expression •

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105
    RPAREN             shift, and go to state 164

    RPAREN    [reduce using rule 116 (arg_list)]
    $default  reduce using rule 116 (arg_list)

    shift/reduce conflict on token RPAREN:
      116 arg_list: expression •
      108 primary: LPAREN expression • RPAREN
      First example: program LPAREN LPAREN expression • RPAREN RPAREN KW_SI command else_part_opt $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                         $end
             ↳ 2: program statement
                          ↳ 4: if_command
                               ↳ 56: LPAREN expression                                    RPAREN KW_SI command else_part_opt
                                            ↳ 94: unary_expr
                                                  ↳ 95: primary
                                                        ↳ 108: LPAREN expression • RPAREN
      Second example: program LPAREN LPAREN expression • RPAREN IDENTIFIER RPAREN KW_SI command else_part_opt $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                               $end
             ↳ 2: program statement
                          ↳ 4: command
                               ↳ 41: if_command
                                     ↳ 56: LPAREN expression                                                                    RPAREN KW_SI command else_part_opt
                                                  ↳ 94: unary_expr
                                                        ↳ 95: primary
                                                              ↳ 109: func_call
                                                                     ↳ 113: LPAREN arg_list_opt               RPAREN IDENTIFIER
                                                                                   ↳ 115: arg_list
                                                                                          ↳ 116: expression •



State 121

   74 block: LBRACE program RBRACE •

    $default  reduce using rule 74 (block)


State 122

  100 unary_expr: LPAREN type RPAREN • unary_expr

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    unary_expr   go to state 165
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 123

   60 for_command: LPAREN assign_command_opt SEMICOLON • expression_opt SEMICOLON expression_opt RPAREN KW_ITERARE command

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    $default  reduce using rule 39 (expression_opt)

    expression_opt  go to state 166
    expression      go to state 129
    unary_expr      go to state 53
    primary         go to state 54
    sizeof_expr     go to state 55
    func_call       go to state 68


State 124

   56 if_command: LPAREN expression RPAREN • KW_SI command else_part_opt
   59 while_command: LPAREN expression RPAREN • KW_PERSISTO command
   63 switch_command: LPAREN expression RPAREN • KW_VERTERE LBRACE case_list default_case_opt RBRACE
   72 scan_command: LPAREN expression RPAREN • KW_LECTURA SEMICOLON
   73 print_command: LPAREN expression RPAREN • KW_REVELARE SEMICOLON
  108 primary: LPAREN expression RPAREN •

    KW_SI        shift, and go to state 167
    KW_PERSISTO  shift, and go to state 168
    KW_VERTERE   shift, and go to state 169
    KW_REVELARE  shift, and go to state 170
    KW_LECTURA   shift, and go to state 171

    $default  reduce using rule 108 (primary)


State 125

  113 func_call: LPAREN arg_list_opt RPAREN • IDENTIFIER

    IDENTIFIER  shift, and go to state 172


State 126

  117 arg_list: arg_list PIPE • expression

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 173
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 127

   19 typedef_decl: type IDENTIFIER KW_DESIGNARE • SEMICOLON

    SEMICOLON  shift, and go to state 174


State 128

   28 type: type OP_LSHIFT_ARRAY expression_opt • OP_RSHIFT_ARRAY

    OP_RSHIFT_ARRAY  shift, and go to state 175


State 129

   40 expression_opt: expression •
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 40 (expression_opt)


State 130

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   77           | expression KW_ET expression •
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 77 (expression)


State 131

   75 expression: expression • KW_VEL expression
   75           | expression KW_VEL expression •
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 75 (expression)


State 132

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   79           | expression KW_AUT expression •
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102

    $default  reduce using rule 79 (expression)


State 133

   55 assign_command: expression OP_ARROW_ASSIGN expression •
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 55 (assign_command)


State 134

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression
   93           | expression OP_EXP expression •

    OP_EXP  shift, and go to state 90

    $default  reduce using rule 93 (expression)


State 135

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   92           | expression OP_INTEGER_DIVIDE expression •
   93           | expression • OP_EXP expression

    OP_EXP  shift, and go to state 90

    $default  reduce using rule 92 (expression)


State 136

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   87           | expression OP_ADD expression •
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    $default  reduce using rule 87 (expression)


State 137

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   88           | expression OP_SUBTRACT expression •
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    $default  reduce using rule 88 (expression)


State 138

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   89           | expression OP_MULTIPLY expression •
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP  shift, and go to state 90

    $default  reduce using rule 89 (expression)


State 139

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   90           | expression OP_DIVIDE expression •
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP  shift, and go to state 90

    $default  reduce using rule 90 (expression)


State 140

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   91           | expression OP_MODULUS expression •
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP  shift, and go to state 90

    $default  reduce using rule 91 (expression)


State 141

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   81           | expression OP_EQUAL expression •
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    OP_EQUAL          error (nonassociative)
    OP_NOT_EQUAL      error (nonassociative)
    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 81 (expression)


State 142

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   82           | expression OP_NOT_EQUAL expression •
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    OP_EQUAL          error (nonassociative)
    OP_NOT_EQUAL      error (nonassociative)
    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 82 (expression)


State 143

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   83           | expression OP_LESS_THAN expression •
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    OP_EQUAL          error (nonassociative)
    OP_NOT_EQUAL      error (nonassociative)
    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 83 (expression)


State 144

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   84           | expression OP_GREATER_THAN expression •
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    OP_EQUAL          error (nonassociative)
    OP_NOT_EQUAL      error (nonassociative)
    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 84 (expression)


State 145

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   85           | expression OP_LESS_EQUAL expression •
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    OP_EQUAL          error (nonassociative)
    OP_NOT_EQUAL      error (nonassociative)
    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 85 (expression)


State 146

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   86           | expression OP_GREATER_EQUAL expression •
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96

    OP_EQUAL          error (nonassociative)
    OP_NOT_EQUAL      error (nonassociative)
    OP_LESS_THAN      error (nonassociative)
    OP_GREATER_THAN   error (nonassociative)
    OP_LESS_EQUAL     error (nonassociative)
    OP_GREATER_EQUAL  error (nonassociative)

    $default  reduce using rule 86 (expression)


State 147

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   78           | expression OP_LOGICAL_AND expression •
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 78 (expression)


State 148

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   76           | expression OP_LOGICAL_OR expression •
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 76 (expression)


State 149

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   80           | expression OP_LOGICAL_XOR expression •
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102

    $default  reduce using rule 80 (expression)


State 150

   48 command: func_call OP_ARROW_ASSIGN expression • SEMICOLON
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105
    SEMICOLON          shift, and go to state 176


State 151

    9 var_decl: IDENTIFIER • type SEMICOLON
   11         | IDENTIFIER • type OP_ARROW_ASSIGN expression SEMICOLON

    IDENTIFIER       shift, and go to state 57
    TYPE_VACUUM      shift, and go to state 14
    TYPE_ATOMUS      shift, and go to state 15
    TYPE_FRAGMENTUM  shift, and go to state 16
    TYPE_FRACTIO     shift, and go to state 17
    TYPE_QUANTUM     shift, and go to state 18
    TYPE_MAGNUS      shift, and go to state 19
    TYPE_MINIMUS     shift, and go to state 20
    TYPE_SYMBOLUM    shift, and go to state 21
    TYPE_SCRIPTUM    shift, and go to state 22

    type       go to state 59
    base_type  go to state 38


State 152

   13 type_decl: IDENTIFIER LBRACE struct_body RBRACE • KW_HOMUNCULUS SEMICOLON

    KW_HOMUNCULUS  shift, and go to state 177


State 153

   16 struct_body: struct_body var_decl •

    $default  reduce using rule 16 (struct_body)


State 154

   14 type_decl: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 178


State 155

   18 enum_list: enum_list PIPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 179


State 156

   11 var_decl: IDENTIFIER type OP_ARROW_ASSIGN expression • SEMICOLON
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105
    SEMICOLON          shift, and go to state 180


State 157

   12 var_decl: KW_MOL IDENTIFIER type OP_ARROW_ASSIGN • expression SEMICOLON

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 181
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 158

   10 var_decl: KW_MOL IDENTIFIER type SEMICOLON •

    $default  reduce using rule 10 (var_decl)


State 159

   25 param: IDENTIFIER type •
   27 type: type • OP_DEREF_POINTER
   28     | type • OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY

    OP_DEREF_POINTER  shift, and go to state 81
    OP_LSHIFT_ARRAY   shift, and go to state 82

    $default  reduce using rule 25 (param)


State 160

   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN • IDENTIFIER OP_ARROW_ASSIGN type LBRACE program RBRACE

    IDENTIFIER  shift, and go to state 182


State 161

   24 param_list: param_list PIPE • param

    IDENTIFIER  shift, and go to state 114

    param  go to state 183


State 162

  111 sizeof_expr: KW_MAGNITUDO LPAREN type RPAREN •

    $default  reduce using rule 111 (sizeof_expr)


State 163

  112 sizeof_expr: KW_MAGNITUDO LPAREN expression RPAREN •

    $default  reduce using rule 112 (sizeof_expr)


State 164

  108 primary: LPAREN expression RPAREN •

    $default  reduce using rule 108 (primary)


State 165

  100 unary_expr: LPAREN type RPAREN unary_expr •

    $default  reduce using rule 100 (unary_expr)


State 166

   60 for_command: LPAREN assign_command_opt SEMICOLON expression_opt • SEMICOLON expression_opt RPAREN KW_ITERARE command

    SEMICOLON  shift, and go to state 184


State 167

   56 if_command: LPAREN expression RPAREN KW_SI • command else_part_opt

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_RUPTIO         shift, and go to state 8
    KW_CONTINUUM      shift, and go to state 9
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LBRACE            shift, and go to state 28
    SEMICOLON         shift, and go to state 29
    LPAREN            shift, and go to state 30

    $default  reduce using rule 39 (expression_opt)

    expression_opt    go to state 39
    command           go to state 185
    assign_command    go to state 41
    if_command        go to state 42
    while_command     go to state 43
    for_command       go to state 44
    switch_command    go to state 45
    return_command    go to state 46
    break_command     go to state 47
    continue_command  go to state 48
    scan_command      go to state 49
    print_command     go to state 50
    block             go to state 51
    expression        go to state 52
    unary_expr        go to state 53
    primary           go to state 54
    sizeof_expr       go to state 55
    func_call         go to state 56


State 168

   59 while_command: LPAREN expression RPAREN KW_PERSISTO • command

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_RUPTIO         shift, and go to state 8
    KW_CONTINUUM      shift, and go to state 9
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LBRACE            shift, and go to state 28
    SEMICOLON         shift, and go to state 29
    LPAREN            shift, and go to state 30

    $default  reduce using rule 39 (expression_opt)

    expression_opt    go to state 39
    command           go to state 186
    assign_command    go to state 41
    if_command        go to state 42
    while_command     go to state 43
    for_command       go to state 44
    switch_command    go to state 45
    return_command    go to state 46
    break_command     go to state 47
    continue_command  go to state 48
    scan_command      go to state 49
    print_command     go to state 50
    block             go to state 51
    expression        go to state 52
    unary_expr        go to state 53
    primary           go to state 54
    sizeof_expr       go to state 55
    func_call         go to state 56


State 169

   63 switch_command: LPAREN expression RPAREN KW_VERTERE • LBRACE case_list default_case_opt RBRACE

    LBRACE  shift, and go to state 187


State 170

   73 print_command: LPAREN expression RPAREN KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 188


State 171

   72 scan_command: LPAREN expression RPAREN KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 189


State 172

  113 func_call: LPAREN arg_list_opt RPAREN IDENTIFIER •

    $default  reduce using rule 113 (func_call)


State 173

   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression
  117 arg_list: arg_list PIPE expression •

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105

    $default  reduce using rule 117 (arg_list)


State 174

   19 typedef_decl: type IDENTIFIER KW_DESIGNARE SEMICOLON •

    $default  reduce using rule 19 (typedef_decl)


State 175

   28 type: type OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY •

    $default  reduce using rule 28 (type)


State 176

   48 command: func_call OP_ARROW_ASSIGN expression SEMICOLON •

    $default  reduce using rule 48 (command)


State 177

   13 type_decl: IDENTIFIER LBRACE struct_body RBRACE KW_HOMUNCULUS • SEMICOLON

    SEMICOLON  shift, and go to state 190


State 178

   14 type_decl: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 191


State 179

   18 enum_list: enum_list PIPE IDENTIFIER •

    $default  reduce using rule 18 (enum_list)


State 180

   11 var_decl: IDENTIFIER type OP_ARROW_ASSIGN expression SEMICOLON •

    $default  reduce using rule 11 (var_decl)


State 181

   12 var_decl: KW_MOL IDENTIFIER type OP_ARROW_ASSIGN expression • SEMICOLON
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105
    SEMICOLON          shift, and go to state 192


State 182

   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN IDENTIFIER • OP_ARROW_ASSIGN type LBRACE program RBRACE

    OP_ARROW_ASSIGN  shift, and go to state 193


State 183

   24 param_list: param_list PIPE param •

    $default  reduce using rule 24 (param_list)


State 184

   60 for_command: LPAREN assign_command_opt SEMICOLON expression_opt SEMICOLON • expression_opt RPAREN KW_ITERARE command

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    $default  reduce using rule 39 (expression_opt)

    expression_opt  go to state 194
    expression      go to state 129
    unary_expr      go to state 53
    primary         go to state 54
    sizeof_expr     go to state 55
    func_call       go to state 68


State 185

   56 if_command: LPAREN expression RPAREN KW_SI command • else_part_opt

    KW_NON  shift, and go to state 195

    KW_NON    [reduce using rule 57 (else_part_opt)]
    $default  reduce using rule 57 (else_part_opt)

    else_part_opt  go to state 196

    shift/reduce conflict on token KW_NON:
       57 else_part_opt: ε •
       58 else_part_opt: • KW_NON command
      Example: LPAREN expression RPAREN KW_SI LPAREN expression RPAREN KW_SI command • KW_NON command
      Shift derivation
        if_command
        ↳ 56: LPAREN expression RPAREN KW_SI command                                                                   else_part_opt
                                             ↳ 41: if_command                                                          ↳ 56: ε
                                                   ↳ 56: LPAREN expression RPAREN KW_SI command else_part_opt
                                                                                                ↳ 58: • KW_NON command
      Reduce derivation
        if_command
        ↳ 56: LPAREN expression RPAREN KW_SI command                                                          else_part_opt
                                             ↳ 41: if_command                                                 ↳ 58: KW_NON command
                                                   ↳ 56: LPAREN expression RPAREN KW_SI command else_part_opt
                                                                                                ↳ 57: ε •



State 186

   59 while_command: LPAREN expression RPAREN KW_PERSISTO command •

    $default  reduce using rule 59 (while_command)


State 187

   63 switch_command: LPAREN expression RPAREN KW_VERTERE LBRACE • case_list default_case_opt RBRACE

    $default  reduce using rule 64 (case_list)

    case_list  go to state 197


State 188

   73 print_command: LPAREN expression RPAREN KW_REVELARE SEMICOLON •

    $default  reduce using rule 73 (print_command)


State 189

   72 scan_command: LPAREN expression RPAREN KW_LECTURA SEMICOLON •

    $default  reduce using rule 72 (scan_command)


State 190

   13 type_decl: IDENTIFIER LBRACE struct_body RBRACE KW_HOMUNCULUS SEMICOLON •

    $default  reduce using rule 13 (type_decl)


State 191

   14 type_decl: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 14 (type_decl)


State 192

   12 var_decl: KW_MOL IDENTIFIER type OP_ARROW_ASSIGN expression SEMICOLON •

    $default  reduce using rule 12 (var_decl)


State 193

   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN • type LBRACE program RBRACE

    IDENTIFIER       shift, and go to state 57
    TYPE_VACUUM      shift, and go to state 14
    TYPE_ATOMUS      shift, and go to state 15
    TYPE_FRAGMENTUM  shift, and go to state 16
    TYPE_FRACTIO     shift, and go to state 17
    TYPE_QUANTUM     shift, and go to state 18
    TYPE_MAGNUS      shift, and go to state 19
    TYPE_MINIMUS     shift, and go to state 20
    TYPE_SYMBOLUM    shift, and go to state 21
    TYPE_SCRIPTUM    shift, and go to state 22

    type       go to state 198
    base_type  go to state 38


State 194

   60 for_command: LPAREN assign_command_opt SEMICOLON expression_opt SEMICOLON expression_opt • RPAREN KW_ITERARE command

    RPAREN  shift, and go to state 199


State 195

   58 else_part_opt: KW_NON • command

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_RUPTIO         shift, and go to state 8
    KW_CONTINUUM      shift, and go to state 9
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LBRACE            shift, and go to state 28
    SEMICOLON         shift, and go to state 29
    LPAREN            shift, and go to state 30

    $default  reduce using rule 39 (expression_opt)

    expression_opt    go to state 39
    command           go to state 200
    assign_command    go to state 41
    if_command        go to state 42
    while_command     go to state 43
    for_command       go to state 44
    switch_command    go to state 45
    return_command    go to state 46
    break_command     go to state 47
    continue_command  go to state 48
    scan_command      go to state 49
    print_command     go to state 50
    block             go to state 51
    expression        go to state 52
    unary_expr        go to state 53
    primary           go to state 54
    sizeof_expr       go to state 55
    func_call         go to state 56


State 196

   56 if_command: LPAREN expression RPAREN KW_SI command else_part_opt •

    $default  reduce using rule 56 (if_command)


State 197

   63 switch_command: LPAREN expression RPAREN KW_VERTERE LBRACE case_list • default_case_opt RBRACE
   65 case_list: case_list • case_entry

    KW_CASUS  shift, and go to state 201
    KW_AXIOM  shift, and go to state 202

    $default  reduce using rule 67 (default_case_opt)

    case_entry        go to state 203
    default_case_opt  go to state 204


State 198

   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN type • LBRACE program RBRACE
   27 type: type • OP_DEREF_POINTER
   28     | type • OP_LSHIFT_ARRAY expression_opt OP_RSHIFT_ARRAY

    OP_DEREF_POINTER  shift, and go to state 81
    OP_LSHIFT_ARRAY   shift, and go to state 82
    LBRACE            shift, and go to state 205


State 199

   60 for_command: LPAREN assign_command_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN • KW_ITERARE command

    KW_ITERARE  shift, and go to state 206


State 200

   58 else_part_opt: KW_NON command •

    $default  reduce using rule 58 (else_part_opt)


State 201

   66 case_entry: KW_CASUS • expression COLON block

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LPAREN            shift, and go to state 66

    expression   go to state 207
    unary_expr   go to state 53
    primary      go to state 54
    sizeof_expr  go to state 55
    func_call    go to state 68


State 202

   68 default_case_opt: KW_AXIOM • COLON block

    COLON  shift, and go to state 208


State 203

   65 case_list: case_list case_entry •

    $default  reduce using rule 65 (case_list)


State 204

   63 switch_command: LPAREN expression RPAREN KW_VERTERE LBRACE case_list default_case_opt • RBRACE

    RBRACE  shift, and go to state 209


State 205

   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN type LBRACE • program RBRACE

    $default  reduce using rule 1 (program)

    program  go to state 210


State 206

   60 for_command: LPAREN assign_command_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN KW_ITERARE • command

    IDENTIFIER        shift, and go to state 65
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_RUPTIO         shift, and go to state 8
    KW_CONTINUUM      shift, and go to state 9
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LBRACE            shift, and go to state 28
    SEMICOLON         shift, and go to state 29
    LPAREN            shift, and go to state 30

    $default  reduce using rule 39 (expression_opt)

    expression_opt    go to state 39
    command           go to state 211
    assign_command    go to state 41
    if_command        go to state 42
    while_command     go to state 43
    for_command       go to state 44
    switch_command    go to state 45
    return_command    go to state 46
    break_command     go to state 47
    continue_command  go to state 48
    scan_command      go to state 49
    print_command     go to state 50
    block             go to state 51
    expression        go to state 52
    unary_expr        go to state 53
    primary           go to state 54
    sizeof_expr       go to state 55
    func_call         go to state 56


State 207

   66 case_entry: KW_CASUS expression • COLON block
   75 expression: expression • KW_VEL expression
   76           | expression • OP_LOGICAL_OR expression
   77           | expression • KW_ET expression
   78           | expression • OP_LOGICAL_AND expression
   79           | expression • KW_AUT expression
   80           | expression • OP_LOGICAL_XOR expression
   81           | expression • OP_EQUAL expression
   82           | expression • OP_NOT_EQUAL expression
   83           | expression • OP_LESS_THAN expression
   84           | expression • OP_GREATER_THAN expression
   85           | expression • OP_LESS_EQUAL expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_ADD expression
   88           | expression • OP_SUBTRACT expression
   89           | expression • OP_MULTIPLY expression
   90           | expression • OP_DIVIDE expression
   91           | expression • OP_MODULUS expression
   92           | expression • OP_INTEGER_DIVIDE expression
   93           | expression • OP_EXP expression

    KW_ET              shift, and go to state 86
    KW_VEL             shift, and go to state 87
    KW_AUT             shift, and go to state 88
    OP_EXP             shift, and go to state 90
    OP_INTEGER_DIVIDE  shift, and go to state 91
    OP_ADD             shift, and go to state 92
    OP_SUBTRACT        shift, and go to state 93
    OP_MULTIPLY        shift, and go to state 94
    OP_DIVIDE          shift, and go to state 95
    OP_MODULUS         shift, and go to state 96
    OP_EQUAL           shift, and go to state 97
    OP_NOT_EQUAL       shift, and go to state 98
    OP_LESS_THAN       shift, and go to state 99
    OP_GREATER_THAN    shift, and go to state 100
    OP_LESS_EQUAL      shift, and go to state 101
    OP_GREATER_EQUAL   shift, and go to state 102
    OP_LOGICAL_AND     shift, and go to state 103
    OP_LOGICAL_OR      shift, and go to state 104
    OP_LOGICAL_XOR     shift, and go to state 105
    COLON              shift, and go to state 212


State 208

   68 default_case_opt: KW_AXIOM COLON • block

    LBRACE  shift, and go to state 28

    block  go to state 213


State 209

   63 switch_command: LPAREN expression RPAREN KW_VERTERE LBRACE case_list default_case_opt RBRACE •

    $default  reduce using rule 63 (switch_command)


State 210

    2 program: program • statement
   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN type LBRACE program • RBRACE

    IDENTIFIER        shift, and go to state 3
    LIT_STRING        shift, and go to state 4
    LIT_CHAR          shift, and go to state 5
    LIT_INT           shift, and go to state 6
    LIT_FLOAT         shift, and go to state 7
    KW_RUPTIO         shift, and go to state 8
    KW_CONTINUUM      shift, and go to state 9
    KW_MOL            shift, and go to state 10
    KW_FORMULA        shift, and go to state 11
    KW_MAGNITUDO      shift, and go to state 12
    KW_NE             shift, and go to state 13
    TYPE_VACUUM       shift, and go to state 14
    TYPE_ATOMUS       shift, and go to state 15
    TYPE_FRAGMENTUM   shift, and go to state 16
    TYPE_FRACTIO      shift, and go to state 17
    TYPE_QUANTUM      shift, and go to state 18
    TYPE_MAGNUS       shift, and go to state 19
    TYPE_MINIMUS      shift, and go to state 20
    TYPE_SYMBOLUM     shift, and go to state 21
    TYPE_SCRIPTUM     shift, and go to state 22
    LIT_FACTUM        shift, and go to state 23
    LIT_FICTUM        shift, and go to state 24
    OP_DEREF_POINTER  shift, and go to state 25
    OP_SUBTRACT       shift, and go to state 26
    OP_LOGICAL_NOT    shift, and go to state 27
    LBRACE            shift, and go to state 28
    RBRACE            shift, and go to state 214
    SEMICOLON         shift, and go to state 29
    LPAREN            shift, and go to state 30

    $default  reduce using rule 39 (expression_opt)

    statement         go to state 31
    declaration       go to state 32
    var_decl          go to state 33
    type_decl         go to state 34
    typedef_decl      go to state 35
    func_decl         go to state 36
    type              go to state 37
    base_type         go to state 38
    expression_opt    go to state 39
    command           go to state 40
    assign_command    go to state 41
    if_command        go to state 42
    while_command     go to state 43
    for_command       go to state 44
    switch_command    go to state 45
    return_command    go to state 46
    break_command     go to state 47
    continue_command  go to state 48
    scan_command      go to state 49
    print_command     go to state 50
    block             go to state 51
    expression        go to state 52
    unary_expr        go to state 53
    primary           go to state 54
    sizeof_expr       go to state 55
    func_call         go to state 56


State 211

   60 for_command: LPAREN assign_command_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN KW_ITERARE command •

    $default  reduce using rule 60 (for_command)


State 212

   66 case_entry: KW_CASUS expression COLON • block

    LBRACE  shift, and go to state 28

    block  go to state 215


State 213

   68 default_case_opt: KW_AXIOM COLON block •

    $default  reduce using rule 68 (default_case_opt)


State 214

   20 func_decl: KW_FORMULA LPAREN param_list_opt RPAREN IDENTIFIER OP_ARROW_ASSIGN type LBRACE program RBRACE •

    $default  reduce using rule 20 (func_decl)


State 215

   66 case_entry: KW_CASUS expression COLON block •

    $default  reduce using rule 66 (case_entry)
