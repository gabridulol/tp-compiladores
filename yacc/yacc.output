Nonterminals useless in grammar

    assing_value


Terminals unused in grammar

    LEX_ERROR


Rules useless in grammar

  150 assing_value: IDENTIFIER
  151             | vector_access
  152             | pointer_statement
  153             | struct_member_lvalue


Rules useless in parser due to conflicts

  145 pointer_assignment: OP_ADDR_OF IDENTIFIER

  146 pointer_dereference: OP_DEREF_POINTER IDENTIFIER


State 55 conflicts: 24 reduce/reduce
State 57 conflicts: 24 reduce/reduce
State 94 conflicts: 1 shift/reduce, 18 reduce/reduce
State 100 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 180 conflicts: 1 shift/reduce
State 206 conflicts: 1 reduce/reduce
State 208 conflicts: 1 shift/reduce
State 224 conflicts: 19 shift/reduce
State 226 conflicts: 1 shift/reduce, 21 reduce/reduce
State 246 conflicts: 19 shift/reduce
State 247 conflicts: 21 reduce/reduce


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: global_statement_list alchemia_statement

    2 global_statement_list: ε
    3                      | global_statement_list global_statement

    4 global_statement: import_statement
    5                 | declaration_statement
    6                 | function_declaration_statement
    7                 | type_define_statement

    8 $@1: ε

    9 block: LBRACE $@1 statement_list RBRACE

   10 $@2: ε

   11 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@2 block

   12 statement_list: ε
   13               | statement_list statement

   14 statement: conditional_statement
   15          | expression_statement
   16          | iteration_statement
   17          | io_functions
   18          | declaration_statement
   19          | function_call_statement
   20          | type_define_statement
   21          | vector_statement
   22          | jump_statement
   23          | causal_statement
   24          | enum_assignment
   25          | assignment_statement

   26 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

   27 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER SEMICOLON
   29                     | expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON

   30 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON

   31 expression_statement: expression SEMICOLON

   32 primary_expression: IDENTIFIER
   33                   | constant
   34                   | string
   35                   | LPAREN expression RPAREN
   36                   | vector_access
   37                   | pointer_statement

   38 unary_expression: primary_expression
   39                 | OP_LOGICAL_NOT unary_expression
   40                 | OP_DEREF_POINTER unary_expression
   41                 | OP_ADDR_OF unary_expression
   42                 | OP_SUBTRACT unary_expression

   43 expression: unary_expression
   44           | expression OP_ADD unary_expression
   45           | expression OP_SUBTRACT unary_expression
   46           | expression OP_MULTIPLY unary_expression
   47           | expression OP_DIVIDE unary_expression
   48           | expression OP_MODULUS unary_expression
   49           | expression OP_EXP unary_expression
   50           | expression OP_INTEGER_DIVIDE unary_expression
   51           | expression OP_EQUAL unary_expression
   52           | expression OP_NOT_EQUAL unary_expression
   53           | expression OP_LESS_THAN unary_expression
   54           | expression OP_GREATER_THAN unary_expression
   55           | expression OP_LESS_EQUAL unary_expression
   56           | expression OP_GREATER_EQUAL unary_expression
   57           | expression OP_LOGICAL_AND unary_expression
   58           | expression OP_LOGICAL_OR unary_expression
   59           | expression OP_LOGICAL_XOR unary_expression
   60           | expression OP_ASSIGN IDENTIFIER

   61 constant: LIT_INT
   62         | LIT_FLOAT
   63         | LIT_FACTUM
   64         | LIT_FICTUM
   65         | LIT_CHAR

   66 string: LIT_STRING

   67 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON
   68                      | expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   69                      | pointer_declaration

   70 opcional_constant: KW_MOL
   71                  | ε

   72 list_declaration_statement: ε
   73                           | declaration_statement list_declaration_statement

   74 type_specifier: KW_TYPE_ATOMUS
   75               | KW_TYPE_FRACTIO
   76               | KW_TYPE_FRAGMENTUM
   77               | KW_TYPE_MAGNUS
   78               | KW_TYPE_MINIMUS
   79               | KW_TYPE_QUANTUM
   80               | KW_TYPE_SCRIPTUM
   81               | KW_TYPE_SYMBOLUM
   82               | KW_TYPE_VACUUM
   83               | IDENTIFIER
   84               | IDENTIFIER KW_ENUMERARE
   85               | OP_DEREF_POINTER type_specifier

   86 $@3: ε

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE statement_list RBRACE

   88 parameter_list: ε
   89               | parameter
   90               | parameter_list PIPE parameter

   91 parameter: IDENTIFIER type_specifier

   92 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON

   93 argument_list: expression
   94              | argument_list PIPE expression

   95 jump_statement: KW_CONTINUUM SEMICOLON
   96               | KW_RUPTIO SEMICOLON
   97               | KW_REDIRE SEMICOLON
   98               | expression KW_REDIRE SEMICOLON

   99 conditional_statement: LPAREN expression RPAREN KW_SI block
  100                      | LPAREN expression RPAREN KW_SI block conditional_non_statement

  101 $@4: ε

  102 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

  103 conditional_non_statement: KW_NON block
  104                          | KW_NON conditional_statement

  105 causal_statement: KW_CASUS expression COLON statement_list
  106                 | KW_AXIOM COLON statement_list

  107 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block
  108                    | LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block
  109                    | LPAREN expression_statement expression_statement RPAREN KW_ITERARE block
  110                    | LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block
  111                    | LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block

  112 io_functions: function_input_output
  113             | function_magnitudo

  114 function_input_output: identifier_langle_list
  115                      | identifier_rangle_list

  116 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON
  117                       | IDENTIFIER LANGLE identifier_langle_list

  118 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON
  119                       | IDENTIFIER RANGLE identifier_rangle_list

  120 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON

  121 type_expression: type_specifier

  122 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON
  123                      | type_define_struct
  124                      | type_define_enum

  125 $@5: ε

  126 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

  127 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

  128 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

  129 enum_list: IDENTIFIER
  130          | IDENTIFIER OP_ASSIGN LIT_INT
  131          | IDENTIFIER OP_ASSIGN LIT_CHAR
  132          | enum_list PIPE IDENTIFIER
  133          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT
  134          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

  135 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  136                 | LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

  137 vector_access: IDENTIFIER LANGLE expression RANGLE

  138 pointer_statement: pointer_assignment
  139                  | pointer_dereference
  140                  | member_access_direct
  141                  | member_access_dereference
  142                  | member_access_pointer

  143 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON
  144                    | expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

  145 pointer_assignment: OP_ADDR_OF IDENTIFIER

  146 pointer_dereference: OP_DEREF_POINTER IDENTIFIER

  147 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

  148 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

  149 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_MAIN (258) 11
    KW_CASUS (259) 105
    KW_AXIOM (260) 106
    KW_CONTINUUM (261) 95
    KW_RUPTIO (262) 96
    KW_VERTERE (263) 102
    KW_DESIGNARE (264) 122 126
    KW_ENUMERARE (265) 84 127 128
    KW_EVOCARE (266) 30
    KW_FORMULA (267) 87
    KW_HOMUNCULUS (268) 126
    KW_ITERARE (269) 108 109 110 111
    KW_LECTURA (270) 116
    KW_MAGNITUDO (271) 120
    KW_MOL (272) 70
    KW_NON (273) 103 104
    KW_PERSISTO (274) 107
    KW_REDIRE (275) 97 98
    KW_REVELARE (276) 118
    KW_SI (277) 99 100
    KW_TYPE_ATOMUS (278) 74
    KW_TYPE_FRACTIO (279) 75
    KW_TYPE_FRAGMENTUM (280) 76
    KW_TYPE_MAGNUS (281) 77
    KW_TYPE_MINIMUS (282) 78
    KW_TYPE_QUANTUM (283) 79
    KW_TYPE_SCRIPTUM (284) 80
    KW_TYPE_SYMBOLUM (285) 81
    KW_TYPE_VACUUM (286) 82
    LIT_FACTUM (287) 63
    LIT_FICTUM (288) 64
    LIT_FLOAT <val_float> (289) 62
    LIT_INT <val_int> (290) 61 130 133
    LIT_CHAR <str> (291) 65 131 134
    LIT_STRING <str> (292) 66
    OP_ACCESS_POINTER (293) 149
    OP_ASSIGN (294) 27 28 29 60 68 87 128 130 131 133 134 136 144
    OP_GREATER_EQUAL (295) 56
    OP_LESS_EQUAL (296) 55
    OP_EQUAL (297) 51
    OP_NOT_EQUAL (298) 52
    OP_INTEGER_DIVIDE (299) 50
    OP_EXP (300) 49
    OP_LOGICAL_AND (301) 57
    OP_LOGICAL_OR (302) 58
    OP_MULTIPLY (303) 46
    OP_ADD (304) 44
    OP_SUBTRACT (305) 42 45
    OP_DIVIDE (306) 47
    OP_MODULUS (307) 48
    OP_ACCESS_MEMBER (308) 26 147 148
    OP_LOGICAL_NOT (309) 39
    OP_GREATER_THAN (310) 54
    OP_LESS_THAN (311) 53
    OP_LOGICAL_XOR (312) 59
    OP_ADDR_OF (313) 41 145
    OP_DEREF_POINTER (314) 40 85 143 144 146 148
    LANGLE (315) 29 116 117 135 137
    RANGLE (316) 29 118 119 135 137
    COLON (317) 105 106
    LPAREN (318) 11 35 87 92 99 100 102 107 108 109 110 111 120 148
    RPAREN (319) 11 35 87 92 99 100 102 107 108 109 110 111 120 148
    LBRACKET (320) 136
    RBRACKET (321) 136
    LBRACE (322) 9 87 102 126 127
    RBRACE (323) 9 87 102 126 127
    PIPE (324) 90 94 132 133 134
    SEMICOLON (325) 27 28 29 30 31 67 68 92 95 96 97 98 116 118 120 122 126 127 128 135 136 143 144
    IDENTIFIER <str> (326) 11 26 28 29 30 32 60 67 68 83 84 87 91 92 116 117 118 119 122 126 127 128 129 130 131 132 133 134 135 136 137 143 144 145 146 147 148 149
    LEX_ERROR (327)


Nonterminals, with rules where they appear

    $accept (73)
        on left: 0
    translation_unit (74)
        on left: 1
        on right: 0
    global_statement_list (75)
        on left: 2 3
        on right: 1 3
    global_statement (76)
        on left: 4 5 6 7
        on right: 3
    block <ptr> (77)
        on left: 9
        on right: 11 99 100 103 107 108 109 110 111
    $@1 (78)
        on left: 8
        on right: 9
    alchemia_statement (79)
        on left: 11
        on right: 1
    $@2 (80)
        on left: 10
        on right: 11
    statement_list (81)
        on left: 12 13
        on right: 9 13 87 105 106
    statement (82)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25
        on right: 13
    struct_member_lvalue <ptr> (83)
        on left: 26
        on right: 27
    assignment_statement (84)
        on left: 27 28 29
        on right: 25
    import_statement (85)
        on left: 30
        on right: 4
    expression_statement <expr> (86)
        on left: 31
        on right: 15 108 109 110 111
    primary_expression <expr> (87)
        on left: 32 33 34 35 36 37
        on right: 38
    unary_expression <expr> (88)
        on left: 38 39 40 41 42
        on right: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    expression <expr> (89)
        on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
        on right: 27 28 29 31 35 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 68 93 94 98 99 100 102 105 107 108 110 135 137 144
    constant <expr> (90)
        on left: 61 62 63 64 65
        on right: 33
    string <expr> (91)
        on left: 66
        on right: 34
    declaration_statement <ptr> (92)
        on left: 67 68 69
        on right: 5 18 73 110 111
    opcional_constant (93)
        on left: 70 71
        on right: 67 68
    list_declaration_statement (94)
        on left: 72 73
        on right: 73 126
    type_specifier <str> (95)
        on left: 74 75 76 77 78 79 80 81 82 83 84 85
        on right: 67 68 85 87 91 121 122 135 143 144
    function_declaration_statement (96)
        on left: 87
        on right: 6
    $@3 (97)
        on left: 86
        on right: 87
    parameter_list (98)
        on left: 88 89 90
        on right: 87 90
    parameter (99)
        on left: 91
        on right: 89 90
    function_call_statement (100)
        on left: 92
        on right: 19
    argument_list <arg_list> (101)
        on left: 93 94
        on right: 92 94 136
    jump_statement (102)
        on left: 95 96 97 98
        on right: 22
    conditional_statement <expr> (103)
        on left: 99 100 102
        on right: 14 104
    $@4 (104)
        on left: 101
        on right: 102
    conditional_non_statement (105)
        on left: 103 104
        on right: 100
    causal_statement (106)
        on left: 105 106
        on right: 23 102
    iteration_statement (107)
        on left: 107 108 109 110 111
        on right: 16
    io_functions (108)
        on left: 112 113
        on right: 17
    function_input_output (109)
        on left: 114 115
        on right: 112
    identifier_langle_list (110)
        on left: 116 117
        on right: 114 117
    identifier_rangle_list (111)
        on left: 118 119
        on right: 115 119
    function_magnitudo (112)
        on left: 120
        on right: 113
    type_expression (113)
        on left: 121
        on right: 120
    type_define_statement (114)
        on left: 122 123 124
        on right: 7 20
    type_define_struct (115)
        on left: 126
        on right: 123
    $@5 (116)
        on left: 125
        on right: 126
    type_define_enum (117)
        on left: 127
        on right: 124
    enum_assignment (118)
        on left: 128
        on right: 24
    enum_list (119)
        on left: 129 130 131 132 133 134
        on right: 127 132 133 134
    vector_statement (120)
        on left: 135 136
        on right: 21
    vector_access <expr> (121)
        on left: 137
        on right: 36
    pointer_statement <expr> (122)
        on left: 138 139 140 141 142
        on right: 37
    pointer_declaration (123)
        on left: 143 144
        on right: 69
    pointer_assignment <expr> (124)
        on left: 145
        on right: 138
    pointer_dereference <expr> (125)
        on left: 146
        on right: 139
    member_access_direct <expr> (126)
        on left: 147
        on right: 140
    member_access_dereference <expr> (127)
        on left: 148
        on right: 141
    member_access_pointer <expr> (128)
        on left: 149
        on right: 142


State 0

    0 $accept: • translation_unit $end

    $default  reduce using rule 2 (global_statement_list)

    translation_unit       go to state 1
    global_statement_list  go to state 2


State 1

    0 $accept: translation_unit • $end

    $end  shift, and go to state 3


State 2

    1 translation_unit: global_statement_list • alchemia_statement
    3 global_statement_list: global_statement_list • global_statement

    KW_DESIGNARE      shift, and go to state 4
    KW_FORMULA        shift, and go to state 5
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 17

    global_statement                go to state 18
    alchemia_statement              go to state 19
    import_statement                go to state 20
    primary_expression              go to state 21
    unary_expression                go to state 22
    expression                      go to state 23
    constant                        go to state 24
    string                          go to state 25
    declaration_statement           go to state 26
    function_declaration_statement  go to state 27
    type_define_statement           go to state 28
    type_define_struct              go to state 29
    type_define_enum                go to state 30
    vector_access                   go to state 31
    pointer_statement               go to state 32
    pointer_declaration             go to state 33
    pointer_assignment              go to state 34
    pointer_dereference             go to state 35
    member_access_direct            go to state 36
    member_access_dereference       go to state 37
    member_access_pointer           go to state 38


State 3

    0 $accept: translation_unit $end •

    $default  accept


State 4

  122 type_define_statement: KW_DESIGNARE • type_specifier IDENTIFIER SEMICOLON
  126 type_define_struct: KW_DESIGNARE • IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 49

    type_specifier  go to state 50


State 5

   87 function_declaration_statement: KW_FORMULA • LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE statement_list RBRACE

    LPAREN  shift, and go to state 51


State 6

   63 constant: LIT_FACTUM •

    $default  reduce using rule 63 (constant)


State 7

   64 constant: LIT_FICTUM •

    $default  reduce using rule 64 (constant)


State 8

   62 constant: LIT_FLOAT •

    $default  reduce using rule 62 (constant)


State 9

   61 constant: LIT_INT •

    $default  reduce using rule 61 (constant)


State 10

   65 constant: LIT_CHAR •

    $default  reduce using rule 65 (constant)


State 11

   66 string: LIT_STRING •

    $default  reduce using rule 66 (string)


State 12

   42 unary_expression: OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 53
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 13

   39 unary_expression: OP_LOGICAL_NOT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 54
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 14

   41 unary_expression: OP_ADDR_OF • unary_expression
  145 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 55

    primary_expression         go to state 21
    unary_expression           go to state 56
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 15

   40 unary_expression: OP_DEREF_POINTER • unary_expression
  146 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 57

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 16

   35 primary_expression: LPAREN • expression RPAREN
  148 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 59
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 60
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 17

   11 alchemia_statement: IDENTIFIER • LPAREN RPAREN KW_MAIN $@2 block
   30 import_statement: IDENTIFIER • KW_EVOCARE SEMICOLON
   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  127 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  143 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_EVOCARE          shift, and go to state 61
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    LPAREN              shift, and go to state 66
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 18

    3 global_statement_list: global_statement_list global_statement •

    $default  reduce using rule 3 (global_statement_list)


State 19

    1 translation_unit: global_statement_list alchemia_statement •

    $default  reduce using rule 1 (translation_unit)


State 20

    4 global_statement: import_statement •

    $default  reduce using rule 4 (global_statement)


State 21

   38 unary_expression: primary_expression •

    $default  reduce using rule 38 (unary_expression)


State 22

   43 expression: unary_expression •

    $default  reduce using rule 43 (expression)


State 23

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   68 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  144 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86


State 24

   33 primary_expression: constant •

    $default  reduce using rule 33 (primary_expression)


State 25

   34 primary_expression: string •

    $default  reduce using rule 34 (primary_expression)


State 26

    5 global_statement: declaration_statement •

    $default  reduce using rule 5 (global_statement)


State 27

    6 global_statement: function_declaration_statement •

    $default  reduce using rule 6 (global_statement)


State 28

    7 global_statement: type_define_statement •

    $default  reduce using rule 7 (global_statement)


State 29

  123 type_define_statement: type_define_struct •

    $default  reduce using rule 123 (type_define_statement)


State 30

  124 type_define_statement: type_define_enum •

    $default  reduce using rule 124 (type_define_statement)


State 31

   36 primary_expression: vector_access •

    $default  reduce using rule 36 (primary_expression)


State 32

   37 primary_expression: pointer_statement •

    $default  reduce using rule 37 (primary_expression)


State 33

   69 declaration_statement: pointer_declaration •

    $default  reduce using rule 69 (declaration_statement)


State 34

  138 pointer_statement: pointer_assignment •

    $default  reduce using rule 138 (pointer_statement)


State 35

  139 pointer_statement: pointer_dereference •

    $default  reduce using rule 139 (pointer_statement)


State 36

  140 pointer_statement: member_access_direct •

    $default  reduce using rule 140 (pointer_statement)


State 37

  141 pointer_statement: member_access_dereference •

    $default  reduce using rule 141 (pointer_statement)


State 38

  142 pointer_statement: member_access_pointer •

    $default  reduce using rule 142 (pointer_statement)


State 39

   74 type_specifier: KW_TYPE_ATOMUS •

    $default  reduce using rule 74 (type_specifier)


State 40

   75 type_specifier: KW_TYPE_FRACTIO •

    $default  reduce using rule 75 (type_specifier)


State 41

   76 type_specifier: KW_TYPE_FRAGMENTUM •

    $default  reduce using rule 76 (type_specifier)


State 42

   77 type_specifier: KW_TYPE_MAGNUS •

    $default  reduce using rule 77 (type_specifier)


State 43

   78 type_specifier: KW_TYPE_MINIMUS •

    $default  reduce using rule 78 (type_specifier)


State 44

   79 type_specifier: KW_TYPE_QUANTUM •

    $default  reduce using rule 79 (type_specifier)


State 45

   80 type_specifier: KW_TYPE_SCRIPTUM •

    $default  reduce using rule 80 (type_specifier)


State 46

   81 type_specifier: KW_TYPE_SYMBOLUM •

    $default  reduce using rule 81 (type_specifier)


State 47

   82 type_specifier: KW_TYPE_VACUUM •

    $default  reduce using rule 82 (type_specifier)


State 48

   85 type_specifier: OP_DEREF_POINTER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 87


State 49

   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  126 type_define_struct: KW_DESIGNARE IDENTIFIER • LBRACE $@5 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_ENUMERARE  shift, and go to state 88
    LBRACE        shift, and go to state 89

    $default  reduce using rule 83 (type_specifier)


State 50

  122 type_define_statement: KW_DESIGNARE type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 90


State 51

   87 function_declaration_statement: KW_FORMULA LPAREN • parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 88 (parameter_list)

    parameter_list  go to state 92
    parameter       go to state 93


State 52

   32 primary_expression: IDENTIFIER •
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    $default  reduce using rule 32 (primary_expression)


State 53

   42 unary_expression: OP_SUBTRACT unary_expression •

    $default  reduce using rule 42 (unary_expression)


State 54

   39 unary_expression: OP_LOGICAL_NOT unary_expression •

    $default  reduce using rule 39 (unary_expression)


State 55

   32 primary_expression: IDENTIFIER •
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  145 pointer_assignment: OP_ADDR_OF IDENTIFIER •
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 32 (primary_expression)
    KW_REDIRE          [reduce using rule 145 (pointer_assignment)]
    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 145 (pointer_assignment)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 145 (pointer_assignment)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 145 (pointer_assignment)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 145 (pointer_assignment)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 145 (pointer_assignment)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 145 (pointer_assignment)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 145 (pointer_assignment)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 145 (pointer_assignment)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 145 (pointer_assignment)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 145 (pointer_assignment)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 145 (pointer_assignment)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 145 (pointer_assignment)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 145 (pointer_assignment)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 145 (pointer_assignment)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 145 (pointer_assignment)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 145 (pointer_assignment)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 145 (pointer_assignment)]
    RANGLE             reduce using rule 32 (primary_expression)
    RANGLE             [reduce using rule 145 (pointer_assignment)]
    COLON              reduce using rule 32 (primary_expression)
    COLON              [reduce using rule 145 (pointer_assignment)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 145 (pointer_assignment)]
    RBRACKET           reduce using rule 32 (primary_expression)
    RBRACKET           [reduce using rule 145 (pointer_assignment)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 145 (pointer_assignment)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 145 (pointer_assignment)]
    $default           reduce using rule 32 (primary_expression)


State 56

   41 unary_expression: OP_ADDR_OF unary_expression •

    $default  reduce using rule 41 (unary_expression)


State 57

   32 primary_expression: IDENTIFIER •
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 32 (primary_expression)
    KW_REDIRE          [reduce using rule 146 (pointer_dereference)]
    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 146 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 146 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 146 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 146 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 146 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 146 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 146 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 146 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 146 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 146 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 146 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 146 (pointer_dereference)]
    RANGLE             reduce using rule 32 (primary_expression)
    RANGLE             [reduce using rule 146 (pointer_dereference)]
    COLON              reduce using rule 32 (primary_expression)
    COLON              [reduce using rule 146 (pointer_dereference)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 146 (pointer_dereference)]
    RBRACKET           reduce using rule 32 (primary_expression)
    RBRACKET           [reduce using rule 146 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 146 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 146 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 58

   40 unary_expression: OP_DEREF_POINTER unary_expression •

    $default  reduce using rule 40 (unary_expression)


State 59

   40 unary_expression: OP_DEREF_POINTER • unary_expression
  146 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  148 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 94

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 60

   35 primary_expression: LPAREN expression • RPAREN
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 96


State 61

   30 import_statement: IDENTIFIER KW_EVOCARE • SEMICOLON

    SEMICOLON  shift, and go to state 97


State 62

  149 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 98


State 63

  147 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 99


State 64

   85 type_specifier: OP_DEREF_POINTER • type_specifier
  143 pointer_declaration: IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 100


State 65

  137 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 66

   11 alchemia_statement: IDENTIFIER LPAREN • RPAREN KW_MAIN $@2 block

    RPAREN  shift, and go to state 102


State 67

  127 type_define_enum: IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 103

    enum_list  go to state 104


State 68

   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE

    KW_ENUMERARE  shift, and go to state 88

    $default  reduce using rule 83 (type_specifier)


State 69

   67 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 71 (opcional_constant)

    opcional_constant  go to state 106


State 70

   60 expression: expression OP_ASSIGN • IDENTIFIER
   68 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  144 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    IDENTIFIER  shift, and go to state 107


State 71

   56 expression: expression OP_GREATER_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 108
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 72

   55 expression: expression OP_LESS_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 109
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 73

   51 expression: expression OP_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 110
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 74

   52 expression: expression OP_NOT_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 111
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 75

   50 expression: expression OP_INTEGER_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 112
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 76

   49 expression: expression OP_EXP • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 113
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 77

   57 expression: expression OP_LOGICAL_AND • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 114
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 78

   58 expression: expression OP_LOGICAL_OR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 115
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 79

   46 expression: expression OP_MULTIPLY • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 116
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 80

   44 expression: expression OP_ADD • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 117
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 81

   45 expression: expression OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 118
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 82

   47 expression: expression OP_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 119
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 83

   48 expression: expression OP_MODULUS • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 120
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 84

   54 expression: expression OP_GREATER_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 121
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 85

   53 expression: expression OP_LESS_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 122
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 86

   59 expression: expression OP_LOGICAL_XOR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 123
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 87

   85 type_specifier: OP_DEREF_POINTER type_specifier •

    $default  reduce using rule 85 (type_specifier)


State 88

   84 type_specifier: IDENTIFIER KW_ENUMERARE •

    $default  reduce using rule 84 (type_specifier)


State 89

  126 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE • $@5 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    $default  reduce using rule 125 ($@5)

    $@5  go to state 124


State 90

  122 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 125


State 91

   91 parameter: IDENTIFIER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 126


State 92

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list • RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE statement_list RBRACE
   90 parameter_list: parameter_list • PIPE parameter

    RPAREN  shift, and go to state 127
    PIPE    shift, and go to state 128


State 93

   89 parameter_list: parameter •

    $default  reduce using rule 89 (parameter_list)


State 94

   32 primary_expression: IDENTIFIER •
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  148 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 129

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 146 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 146 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 146 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 146 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 146 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 146 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 146 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 146 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 146 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 146 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 146 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 146 (pointer_dereference)]
    RPAREN             [reduce using rule 32 (primary_expression)]
    RPAREN             [reduce using rule 146 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 95

   60 expression: expression OP_ASSIGN • IDENTIFIER

    IDENTIFIER  shift, and go to state 130


State 96

   35 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 35 (primary_expression)


State 97

   30 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON •

    $default  reduce using rule 30 (import_statement)


State 98

  149 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER •

    $default  reduce using rule 149 (member_access_pointer)


State 99

  147 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 147 (member_access_direct)


State 100

   85 type_specifier: OP_DEREF_POINTER type_specifier •
  143 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 131

    SEMICOLON  [reduce using rule 85 (type_specifier)]
    $default   reduce using rule 85 (type_specifier)


State 101

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  137 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 132


State 102

   11 alchemia_statement: IDENTIFIER LPAREN RPAREN • KW_MAIN $@2 block

    KW_MAIN  shift, and go to state 133


State 103

  129 enum_list: IDENTIFIER •
  130          | IDENTIFIER • OP_ASSIGN LIT_INT
  131          | IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 134

    $default  reduce using rule 129 (enum_list)


State 104

  127 type_define_enum: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
  132 enum_list: enum_list • PIPE IDENTIFIER
  133          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_INT
  134          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

    RBRACE  shift, and go to state 135
    PIPE    shift, and go to state 136


State 105

   70 opcional_constant: KW_MOL •

    $default  reduce using rule 70 (opcional_constant)


State 106

   67 declaration_statement: IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 137


State 107

   60 expression: expression OP_ASSIGN IDENTIFIER •
   68 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  144 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 138
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 60 (expression)

    type_specifier  go to state 139


State 108

   56 expression: expression OP_GREATER_EQUAL unary_expression •

    $default  reduce using rule 56 (expression)


State 109

   55 expression: expression OP_LESS_EQUAL unary_expression •

    $default  reduce using rule 55 (expression)


State 110

   51 expression: expression OP_EQUAL unary_expression •

    $default  reduce using rule 51 (expression)


State 111

   52 expression: expression OP_NOT_EQUAL unary_expression •

    $default  reduce using rule 52 (expression)


State 112

   50 expression: expression OP_INTEGER_DIVIDE unary_expression •

    $default  reduce using rule 50 (expression)


State 113

   49 expression: expression OP_EXP unary_expression •

    $default  reduce using rule 49 (expression)


State 114

   57 expression: expression OP_LOGICAL_AND unary_expression •

    $default  reduce using rule 57 (expression)


State 115

   58 expression: expression OP_LOGICAL_OR unary_expression •

    $default  reduce using rule 58 (expression)


State 116

   46 expression: expression OP_MULTIPLY unary_expression •

    $default  reduce using rule 46 (expression)


State 117

   44 expression: expression OP_ADD unary_expression •

    $default  reduce using rule 44 (expression)


State 118

   45 expression: expression OP_SUBTRACT unary_expression •

    $default  reduce using rule 45 (expression)


State 119

   47 expression: expression OP_DIVIDE unary_expression •

    $default  reduce using rule 47 (expression)


State 120

   48 expression: expression OP_MODULUS unary_expression •

    $default  reduce using rule 48 (expression)


State 121

   54 expression: expression OP_GREATER_THAN unary_expression •

    $default  reduce using rule 54 (expression)


State 122

   53 expression: expression OP_LESS_THAN unary_expression •

    $default  reduce using rule 53 (expression)


State 123

   59 expression: expression OP_LOGICAL_XOR unary_expression •

    $default  reduce using rule 59 (expression)


State 124

  126 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@5 • list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 140

    $default  reduce using rule 72 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 141
    list_declaration_statement  go to state 142
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 125

  122 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 122 (type_define_statement)


State 126

   91 parameter: IDENTIFIER type_specifier •

    $default  reduce using rule 91 (parameter)


State 127

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN • IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 143


State 128

   90 parameter_list: parameter_list PIPE • parameter

    IDENTIFIER  shift, and go to state 91

    parameter  go to state 144


State 129

  148 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN • OP_ACCESS_MEMBER IDENTIFIER

    OP_ACCESS_MEMBER  shift, and go to state 145


State 130

   60 expression: expression OP_ASSIGN IDENTIFIER •

    $default  reduce using rule 60 (expression)


State 131

  143 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 143 (pointer_declaration)


State 132

  137 vector_access: IDENTIFIER LANGLE expression RANGLE •

    $default  reduce using rule 137 (vector_access)


State 133

   11 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN • $@2 block

    $default  reduce using rule 10 ($@2)

    $@2  go to state 146


State 134

  130 enum_list: IDENTIFIER OP_ASSIGN • LIT_INT
  131          | IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 147
    LIT_CHAR  shift, and go to state 148


State 135

  127 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 149


State 136

  132 enum_list: enum_list PIPE • IDENTIFIER
  133          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_INT
  134          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_CHAR

    IDENTIFIER  shift, and go to state 150


State 137

   67 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 67 (declaration_statement)


State 138

   85 type_specifier: OP_DEREF_POINTER • type_specifier
  144 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 151


State 139

   68 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 71 (opcional_constant)

    opcional_constant  go to state 152


State 140

   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  143 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 141

   73 list_declaration_statement: declaration_statement • list_declaration_statement

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 140

    $default  reduce using rule 72 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 141
    list_declaration_statement  go to state 153
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 142

  126 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@5 list_declaration_statement • RBRACE KW_HOMUNCULUS SEMICOLON

    RBRACE  shift, and go to state 154


State 143

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER • OP_ASSIGN type_specifier $@3 LBRACE statement_list RBRACE

    OP_ASSIGN  shift, and go to state 155


State 144

   90 parameter_list: parameter_list PIPE parameter •

    $default  reduce using rule 90 (parameter_list)


State 145

  148 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 156


State 146

   11 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@2 • block

    LBRACE  shift, and go to state 157

    block  go to state 158


State 147

  130 enum_list: IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 130 (enum_list)


State 148

  131 enum_list: IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 131 (enum_list)


State 149

  127 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 159


State 150

  132 enum_list: enum_list PIPE IDENTIFIER •
  133          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_INT
  134          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 160

    $default  reduce using rule 132 (enum_list)


State 151

   85 type_specifier: OP_DEREF_POINTER type_specifier •
  144 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 161

    SEMICOLON  [reduce using rule 85 (type_specifier)]
    $default   reduce using rule 85 (type_specifier)


State 152

   68 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 162


State 153

   73 list_declaration_statement: declaration_statement list_declaration_statement •

    $default  reduce using rule 73 (list_declaration_statement)


State 154

  126 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE • KW_HOMUNCULUS SEMICOLON

    KW_HOMUNCULUS  shift, and go to state 163


State 155

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN • type_specifier $@3 LBRACE statement_list RBRACE

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 164


State 156

  148 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 148 (member_access_dereference)


State 157

    9 block: LBRACE • $@1 statement_list RBRACE

    $default  reduce using rule 8 ($@1)

    $@1  go to state 165


State 158

   11 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN $@2 block •

    $default  reduce using rule 11 (alchemia_statement)


State 159

  127 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 127 (type_define_enum)


State 160

  133 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_INT
  134          | enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 166
    LIT_CHAR  shift, and go to state 167


State 161

  144 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 144 (pointer_declaration)


State 162

   68 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 68 (declaration_statement)


State 163

  126 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_HOMUNCULUS • SEMICOLON

    SEMICOLON  shift, and go to state 168


State 164

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier • $@3 LBRACE statement_list RBRACE

    $default  reduce using rule 86 ($@3)

    $@3  go to state 169


State 165

    9 block: LBRACE $@1 • statement_list RBRACE

    $default  reduce using rule 12 (statement_list)

    statement_list  go to state 170


State 166

  133 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 133 (enum_list)


State 167

  134 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 134 (enum_list)


State 168

  126 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@5 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON •

    $default  reduce using rule 126 (type_define_struct)


State 169

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 • LBRACE statement_list RBRACE

    LBRACE  shift, and go to state 171


State 170

    9 block: LBRACE $@1 statement_list • RBRACE
   13 statement_list: statement_list • statement

    KW_CASUS          shift, and go to state 172
    KW_AXIOM          shift, and go to state 173
    KW_CONTINUUM      shift, and go to state 174
    KW_RUPTIO         shift, and go to state 175
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 176
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 177
    LBRACKET          shift, and go to state 178
    RBRACE            shift, and go to state 179
    IDENTIFIER        shift, and go to state 180

    statement                  go to state 181
    assignment_statement       go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 197
    vector_statement           go to state 198
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 171

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE • statement_list RBRACE

    $default  reduce using rule 12 (statement_list)

    statement_list  go to state 199


State 172

  105 causal_statement: KW_CASUS • expression COLON statement_list

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 200
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 173

  106 causal_statement: KW_AXIOM • COLON statement_list

    COLON  shift, and go to state 201


State 174

   95 jump_statement: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 202


State 175

   96 jump_statement: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 203


State 176

   97 jump_statement: KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 204


State 177

   35 primary_expression: LPAREN • expression RPAREN
   92 function_call_statement: LPAREN • argument_list RPAREN IDENTIFIER SEMICOLON
   99 conditional_statement: LPAREN • expression RPAREN KW_SI block
  100                      | LPAREN • expression RPAREN KW_SI block conditional_non_statement
  102                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  107 iteration_statement: LPAREN • expression RPAREN KW_PERSISTO block
  108                    | LPAREN • expression_statement expression_statement expression RPAREN KW_ITERARE block
  109                    | LPAREN • expression_statement expression_statement RPAREN KW_ITERARE block
  110                    | LPAREN • declaration_statement expression_statement expression RPAREN KW_ITERARE block
  111                    | LPAREN • declaration_statement expression_statement RPAREN KW_ITERARE block
  120 function_magnitudo: LPAREN • type_expression RPAREN KW_MAGNITUDO SEMICOLON
  148 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 205
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 206

    expression_statement       go to state 207
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 208
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 209
    type_specifier             go to state 210
    argument_list              go to state 211
    type_expression            go to state 212
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 178

  136 vector_statement: LBRACKET • argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 213
    constant                   go to state 24
    string                     go to state 25
    argument_list              go to state 214
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 179

    9 block: LBRACE $@1 statement_list RBRACE •

    $default  reduce using rule 9 (block)


State 180

   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  116 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  117                       | IDENTIFIER • LANGLE identifier_langle_list
  118 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  119                       | IDENTIFIER • RANGLE identifier_rangle_list
  127 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  128 enum_assignment: IDENTIFIER • OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON
  135 vector_statement: IDENTIFIER • type_specifier LANGLE expression RANGLE SEMICOLON
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  143 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ASSIGN           shift, and go to state 215
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 216
    RANGLE              shift, and go to state 217
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    OP_ASSIGN  [reduce using rule 32 (primary_expression)]
    $default   reduce using rule 32 (primary_expression)

    type_specifier  go to state 218


State 181

   13 statement_list: statement_list statement •

    $default  reduce using rule 13 (statement_list)


State 182

   25 statement: assignment_statement •

    $default  reduce using rule 25 (statement)


State 183

   15 statement: expression_statement •

    $default  reduce using rule 15 (statement)


State 184

   27 assignment_statement: expression • OP_ASSIGN struct_member_lvalue SEMICOLON
   28                     | expression • OP_ASSIGN IDENTIFIER SEMICOLON
   29                     | expression • OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   31 expression_statement: expression • SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   68 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   98 jump_statement: expression • KW_REDIRE SEMICOLON
  144 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    KW_REDIRE          shift, and go to state 219
    OP_ASSIGN          shift, and go to state 220
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 221


State 185

   18 statement: declaration_statement •

    $default  reduce using rule 18 (statement)


State 186

   19 statement: function_call_statement •

    $default  reduce using rule 19 (statement)


State 187

   22 statement: jump_statement •

    $default  reduce using rule 22 (statement)


State 188

   14 statement: conditional_statement •

    $default  reduce using rule 14 (statement)


State 189

   23 statement: causal_statement •

    $default  reduce using rule 23 (statement)


State 190

   16 statement: iteration_statement •

    $default  reduce using rule 16 (statement)


State 191

   17 statement: io_functions •

    $default  reduce using rule 17 (statement)


State 192

  112 io_functions: function_input_output •

    $default  reduce using rule 112 (io_functions)


State 193

  114 function_input_output: identifier_langle_list •

    $default  reduce using rule 114 (function_input_output)


State 194

  115 function_input_output: identifier_rangle_list •

    $default  reduce using rule 115 (function_input_output)


State 195

  113 io_functions: function_magnitudo •

    $default  reduce using rule 113 (io_functions)


State 196

   20 statement: type_define_statement •

    $default  reduce using rule 20 (statement)


State 197

   24 statement: enum_assignment •

    $default  reduce using rule 24 (statement)


State 198

   21 statement: vector_statement •

    $default  reduce using rule 21 (statement)


State 199

   13 statement_list: statement_list • statement
   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE statement_list • RBRACE

    KW_CASUS          shift, and go to state 172
    KW_AXIOM          shift, and go to state 173
    KW_CONTINUUM      shift, and go to state 174
    KW_RUPTIO         shift, and go to state 175
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 176
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 177
    LBRACKET          shift, and go to state 178
    RBRACE            shift, and go to state 222
    IDENTIFIER        shift, and go to state 180

    statement                  go to state 181
    assignment_statement       go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 197
    vector_statement           go to state 198
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 200

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  105 causal_statement: KW_CASUS expression • COLON statement_list

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    COLON              shift, and go to state 223


State 201

  106 causal_statement: KW_AXIOM COLON • statement_list

    $default  reduce using rule 12 (statement_list)

    statement_list  go to state 224


State 202

   95 jump_statement: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 95 (jump_statement)


State 203

   96 jump_statement: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 96 (jump_statement)


State 204

   97 jump_statement: KW_REDIRE SEMICOLON •

    $default  reduce using rule 97 (jump_statement)


State 205

   40 unary_expression: OP_DEREF_POINTER • unary_expression
   85 type_specifier: OP_DEREF_POINTER • type_specifier
  146 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  148 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 225
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 226

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 206

   32 primary_expression: IDENTIFIER •
   67 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  143 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE        shift, and go to state 88
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    RPAREN    reduce using rule 32 (primary_expression)
    RPAREN    [reduce using rule 83 (type_specifier)]
    $default  reduce using rule 32 (primary_expression)

    type_specifier  go to state 69


State 207

  108 iteration_statement: LPAREN expression_statement • expression_statement expression RPAREN KW_ITERARE block
  109                    | LPAREN expression_statement • expression_statement RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 227
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 228
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 208

   31 expression_statement: expression • SEMICOLON
   35 primary_expression: LPAREN expression • RPAREN
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   68 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   93 argument_list: expression •
   99 conditional_statement: LPAREN expression • RPAREN KW_SI block
  100                      | LPAREN expression • RPAREN KW_SI block conditional_non_statement
  102                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE
  107 iteration_statement: LPAREN expression • RPAREN KW_PERSISTO block
  144 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 229
    SEMICOLON          shift, and go to state 221

    RPAREN    [reduce using rule 93 (argument_list)]
    $default  reduce using rule 93 (argument_list)


State 209

  110 iteration_statement: LPAREN declaration_statement • expression_statement expression RPAREN KW_ITERARE block
  111                    | LPAREN declaration_statement • expression_statement RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 230
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 228
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 210

  121 type_expression: type_specifier •

    $default  reduce using rule 121 (type_expression)


State 211

   92 function_call_statement: LPAREN argument_list • RPAREN IDENTIFIER SEMICOLON
   94 argument_list: argument_list • PIPE expression

    RPAREN  shift, and go to state 231
    PIPE    shift, and go to state 232


State 212

  120 function_magnitudo: LPAREN type_expression • RPAREN KW_MAGNITUDO SEMICOLON

    RPAREN  shift, and go to state 233


State 213

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   93 argument_list: expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 93 (argument_list)


State 214

   94 argument_list: argument_list • PIPE expression
  136 vector_statement: LBRACKET argument_list • RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    RBRACKET  shift, and go to state 234
    PIPE      shift, and go to state 232


State 215

  128 enum_assignment: IDENTIFIER OP_ASSIGN • IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 235


State 216

  116 identifier_langle_list: IDENTIFIER LANGLE • KW_LECTURA SEMICOLON
  117                       | IDENTIFIER LANGLE • identifier_langle_list
  137 vector_access: IDENTIFIER LANGLE • expression RANGLE

    KW_LECTURA        shift, and go to state 236
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 237

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    identifier_langle_list     go to state 238
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 217

  118 identifier_rangle_list: IDENTIFIER RANGLE • KW_REVELARE SEMICOLON
  119                       | IDENTIFIER RANGLE • identifier_rangle_list

    KW_REVELARE  shift, and go to state 239
    IDENTIFIER   shift, and go to state 240

    identifier_rangle_list  go to state 241


State 218

   67 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON
  135 vector_statement: IDENTIFIER type_specifier • LANGLE expression RANGLE SEMICOLON

    KW_MOL  shift, and go to state 105
    LANGLE  shift, and go to state 242

    $default  reduce using rule 71 (opcional_constant)

    opcional_constant  go to state 106


State 219

   98 jump_statement: expression KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 243


State 220

   27 assignment_statement: expression OP_ASSIGN • struct_member_lvalue SEMICOLON
   28                     | expression OP_ASSIGN • IDENTIFIER SEMICOLON
   29                     | expression OP_ASSIGN • IDENTIFIER LANGLE expression RANGLE SEMICOLON
   60 expression: expression OP_ASSIGN • IDENTIFIER
   68 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  144 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    IDENTIFIER  shift, and go to state 244

    struct_member_lvalue  go to state 245


State 221

   31 expression_statement: expression SEMICOLON •

    $default  reduce using rule 31 (expression_statement)


State 222

   87 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@3 LBRACE statement_list RBRACE •

    $default  reduce using rule 87 (function_declaration_statement)


State 223

  105 causal_statement: KW_CASUS expression COLON • statement_list

    $default  reduce using rule 12 (statement_list)

    statement_list  go to state 246


State 224

   13 statement_list: statement_list • statement
  106 causal_statement: KW_AXIOM COLON statement_list •

    KW_CASUS          shift, and go to state 172
    KW_AXIOM          shift, and go to state 173
    KW_CONTINUUM      shift, and go to state 174
    KW_RUPTIO         shift, and go to state 175
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 176
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 177
    LBRACKET          shift, and go to state 178
    IDENTIFIER        shift, and go to state 180

    KW_CASUS          [reduce using rule 106 (causal_statement)]
    KW_AXIOM          [reduce using rule 106 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 106 (causal_statement)]
    KW_RUPTIO         [reduce using rule 106 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 106 (causal_statement)]
    KW_REDIRE         [reduce using rule 106 (causal_statement)]
    LIT_FACTUM        [reduce using rule 106 (causal_statement)]
    LIT_FICTUM        [reduce using rule 106 (causal_statement)]
    LIT_FLOAT         [reduce using rule 106 (causal_statement)]
    LIT_INT           [reduce using rule 106 (causal_statement)]
    LIT_CHAR          [reduce using rule 106 (causal_statement)]
    LIT_STRING        [reduce using rule 106 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 106 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 106 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 106 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 106 (causal_statement)]
    LPAREN            [reduce using rule 106 (causal_statement)]
    LBRACKET          [reduce using rule 106 (causal_statement)]
    IDENTIFIER        [reduce using rule 106 (causal_statement)]
    $default          reduce using rule 106 (causal_statement)

    statement                  go to state 181
    assignment_statement       go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 197
    vector_statement           go to state 198
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 225

   40 unary_expression: OP_DEREF_POINTER • unary_expression
   85 type_specifier: OP_DEREF_POINTER • type_specifier
  146 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 225
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 247

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 226

   32 primary_expression: IDENTIFIER •
   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  148 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 129

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 146 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 146 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 146 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 146 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 146 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 146 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 146 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 146 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 146 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 146 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 146 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 146 (pointer_dereference)]
    RPAREN             [reduce using rule 32 (primary_expression)]
    RPAREN             [reduce using rule 83 (type_specifier)]
    RPAREN             [reduce using rule 146 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 146 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 146 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 227

  108 iteration_statement: LPAREN expression_statement expression_statement • expression RPAREN KW_ITERARE block
  109                    | LPAREN expression_statement expression_statement • RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 248
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 249
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 228

   31 expression_statement: expression • SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 221


State 229

   35 primary_expression: LPAREN expression RPAREN •
   99 conditional_statement: LPAREN expression RPAREN • KW_SI block
  100                      | LPAREN expression RPAREN • KW_SI block conditional_non_statement
  102                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE
  107 iteration_statement: LPAREN expression RPAREN • KW_PERSISTO block

    KW_VERTERE   shift, and go to state 250
    KW_PERSISTO  shift, and go to state 251
    KW_SI        shift, and go to state 252

    $default  reduce using rule 35 (primary_expression)


State 230

  110 iteration_statement: LPAREN declaration_statement expression_statement • expression RPAREN KW_ITERARE block
  111                    | LPAREN declaration_statement expression_statement • RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 253
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 254
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 231

   92 function_call_statement: LPAREN argument_list RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 255


State 232

   94 argument_list: argument_list PIPE • expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 256
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 233

  120 function_magnitudo: LPAREN type_expression RPAREN • KW_MAGNITUDO SEMICOLON

    KW_MAGNITUDO  shift, and go to state 257


State 234

  136 vector_statement: LBRACKET argument_list RBRACKET • OP_ASSIGN IDENTIFIER SEMICOLON

    OP_ASSIGN  shift, and go to state 258


State 235

  128 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER • IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 259


State 236

  116 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 260


State 237

   32 primary_expression: IDENTIFIER •
  116 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  117                       | IDENTIFIER • LANGLE identifier_langle_list
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 216

    $default  reduce using rule 32 (primary_expression)


State 238

  117 identifier_langle_list: IDENTIFIER LANGLE identifier_langle_list •

    $default  reduce using rule 117 (identifier_langle_list)


State 239

  118 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 261


State 240

  118 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  119                       | IDENTIFIER • RANGLE identifier_rangle_list

    RANGLE  shift, and go to state 217


State 241

  119 identifier_rangle_list: IDENTIFIER RANGLE identifier_rangle_list •

    $default  reduce using rule 119 (identifier_rangle_list)


State 242

  135 vector_statement: IDENTIFIER type_specifier LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 262
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 243

   98 jump_statement: expression KW_REDIRE SEMICOLON •

    $default  reduce using rule 98 (jump_statement)


State 244

   26 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   28 assignment_statement: expression OP_ASSIGN IDENTIFIER • SEMICOLON
   29                     | expression OP_ASSIGN IDENTIFIER • LANGLE expression RANGLE SEMICOLON
   60 expression: expression OP_ASSIGN IDENTIFIER •
   68 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  144 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_MEMBER    shift, and go to state 263
    OP_DEREF_POINTER    shift, and go to state 138
    LANGLE              shift, and go to state 264
    SEMICOLON           shift, and go to state 265
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 60 (expression)

    type_specifier  go to state 139


State 245

   27 assignment_statement: expression OP_ASSIGN struct_member_lvalue • SEMICOLON

    SEMICOLON  shift, and go to state 266


State 246

   13 statement_list: statement_list • statement
  105 causal_statement: KW_CASUS expression COLON statement_list •

    KW_CASUS          shift, and go to state 172
    KW_AXIOM          shift, and go to state 173
    KW_CONTINUUM      shift, and go to state 174
    KW_RUPTIO         shift, and go to state 175
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 176
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 177
    LBRACKET          shift, and go to state 178
    IDENTIFIER        shift, and go to state 180

    KW_CASUS          [reduce using rule 105 (causal_statement)]
    KW_AXIOM          [reduce using rule 105 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 105 (causal_statement)]
    KW_RUPTIO         [reduce using rule 105 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 105 (causal_statement)]
    KW_REDIRE         [reduce using rule 105 (causal_statement)]
    LIT_FACTUM        [reduce using rule 105 (causal_statement)]
    LIT_FICTUM        [reduce using rule 105 (causal_statement)]
    LIT_FLOAT         [reduce using rule 105 (causal_statement)]
    LIT_INT           [reduce using rule 105 (causal_statement)]
    LIT_CHAR          [reduce using rule 105 (causal_statement)]
    LIT_STRING        [reduce using rule 105 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 105 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 105 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 105 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 105 (causal_statement)]
    LPAREN            [reduce using rule 105 (causal_statement)]
    LBRACKET          [reduce using rule 105 (causal_statement)]
    IDENTIFIER        [reduce using rule 105 (causal_statement)]
    $default          reduce using rule 105 (causal_statement)

    statement                  go to state 181
    assignment_statement       go to state 182
    expression_statement       go to state 183
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 184
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 185
    function_call_statement    go to state 186
    jump_statement             go to state 187
    conditional_statement      go to state 188
    causal_statement           go to state 189
    iteration_statement        go to state 190
    io_functions               go to state 191
    function_input_output      go to state 192
    identifier_langle_list     go to state 193
    identifier_rangle_list     go to state 194
    function_magnitudo         go to state 195
    type_define_statement      go to state 196
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 197
    vector_statement           go to state 198
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 247

   32 primary_expression: IDENTIFIER •
   83 type_specifier: IDENTIFIER •
   84               | IDENTIFIER • KW_ENUMERARE
  137 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  147 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  149 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    OP_ASSIGN          reduce using rule 32 (primary_expression)
    OP_ASSIGN          [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 32 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 146 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 32 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 146 (pointer_dereference)]
    OP_EQUAL           reduce using rule 32 (primary_expression)
    OP_EQUAL           [reduce using rule 146 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 32 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 146 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 32 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 146 (pointer_dereference)]
    OP_EXP             reduce using rule 32 (primary_expression)
    OP_EXP             [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 32 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 32 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 146 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 32 (primary_expression)
    OP_MULTIPLY        [reduce using rule 146 (pointer_dereference)]
    OP_ADD             reduce using rule 32 (primary_expression)
    OP_ADD             [reduce using rule 146 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 32 (primary_expression)
    OP_SUBTRACT        [reduce using rule 146 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 32 (primary_expression)
    OP_DIVIDE          [reduce using rule 146 (pointer_dereference)]
    OP_MODULUS         reduce using rule 32 (primary_expression)
    OP_MODULUS         [reduce using rule 146 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 32 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 146 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 32 (primary_expression)
    OP_LESS_THAN       [reduce using rule 146 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 32 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 146 (pointer_dereference)]
    RPAREN             reduce using rule 32 (primary_expression)
    RPAREN             [reduce using rule 83 (type_specifier)]
    RPAREN             [reduce using rule 146 (pointer_dereference)]
    PIPE               reduce using rule 32 (primary_expression)
    PIPE               [reduce using rule 146 (pointer_dereference)]
    SEMICOLON          reduce using rule 32 (primary_expression)
    SEMICOLON          [reduce using rule 146 (pointer_dereference)]
    $default           reduce using rule 32 (primary_expression)


State 248

  109 iteration_statement: LPAREN expression_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 267


State 249

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  108 iteration_statement: LPAREN expression_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 268


State 250

  102 conditional_statement: LPAREN expression RPAREN KW_VERTERE • LBRACE $@4 causal_statement RBRACE

    LBRACE  shift, and go to state 269


State 251

  107 iteration_statement: LPAREN expression RPAREN KW_PERSISTO • block

    LBRACE  shift, and go to state 157

    block  go to state 270


State 252

   99 conditional_statement: LPAREN expression RPAREN KW_SI • block
  100                      | LPAREN expression RPAREN KW_SI • block conditional_non_statement

    LBRACE  shift, and go to state 157

    block  go to state 271


State 253

  111 iteration_statement: LPAREN declaration_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 272


State 254

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  110 iteration_statement: LPAREN declaration_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 273


State 255

   92 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 274


State 256

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   94 argument_list: argument_list PIPE expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 94 (argument_list)


State 257

  120 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO • SEMICOLON

    SEMICOLON  shift, and go to state 275


State 258

  136 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 276


State 259

  128 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 277


State 260

  116 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON •

    $default  reduce using rule 116 (identifier_langle_list)


State 261

  118 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON •

    $default  reduce using rule 118 (identifier_rangle_list)


State 262

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
  135 vector_statement: IDENTIFIER type_specifier LANGLE expression • RANGLE SEMICOLON

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 278


State 263

   26 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 279


State 264

   29 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 280
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 265

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 28 (assignment_statement)


State 266

   27 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON •

    $default  reduce using rule 27 (assignment_statement)


State 267

  109 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 281


State 268

  108 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 282


State 269

  102 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE • $@4 causal_statement RBRACE

    $default  reduce using rule 101 ($@4)

    $@4  go to state 283


State 270

  107 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block •

    $default  reduce using rule 107 (iteration_statement)


State 271

   99 conditional_statement: LPAREN expression RPAREN KW_SI block •
  100                      | LPAREN expression RPAREN KW_SI block • conditional_non_statement

    KW_NON  shift, and go to state 284

    $default  reduce using rule 99 (conditional_statement)

    conditional_non_statement  go to state 285


State 272

  111 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 286


State 273

  110 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 287


State 274

   92 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 92 (function_call_statement)


State 275

  120 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON •

    $default  reduce using rule 120 (function_magnitudo)


State 276

  136 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 288


State 277

  128 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 289


State 278

  135 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 290


State 279

   26 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 26 (struct_member_lvalue)


State 280

   29 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression • RANGLE SEMICOLON
   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 291


State 281

  109 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 109 (iteration_statement)


State 282

  108 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 292


State 283

  102 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 • causal_statement RBRACE

    KW_CASUS  shift, and go to state 172
    KW_AXIOM  shift, and go to state 173

    causal_statement  go to state 293


State 284

  103 conditional_non_statement: KW_NON • block
  104                          | KW_NON • conditional_statement

    LPAREN  shift, and go to state 294
    LBRACE  shift, and go to state 157

    block                  go to state 295
    conditional_statement  go to state 296


State 285

  100 conditional_statement: LPAREN expression RPAREN KW_SI block conditional_non_statement •

    $default  reduce using rule 100 (conditional_statement)


State 286

  111 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 111 (iteration_statement)


State 287

  110 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 297


State 288

  136 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 136 (vector_statement)


State 289

  128 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 128 (enum_assignment)


State 290

  135 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 135 (vector_statement)


State 291

   29 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 298


State 292

  108 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 108 (iteration_statement)


State 293

  102 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement • RBRACE

    RBRACE  shift, and go to state 299


State 294

   99 conditional_statement: LPAREN • expression RPAREN KW_SI block
  100                      | LPAREN • expression RPAREN KW_SI block conditional_non_statement
  102                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 300
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 295

  103 conditional_non_statement: KW_NON block •

    $default  reduce using rule 103 (conditional_non_statement)


State 296

  104 conditional_non_statement: KW_NON conditional_statement •

    $default  reduce using rule 104 (conditional_non_statement)


State 297

  110 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 110 (iteration_statement)


State 298

   29 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 29 (assignment_statement)


State 299

  102 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE •

    $default  reduce using rule 102 (conditional_statement)


State 300

   44 expression: expression • OP_ADD unary_expression
   45           | expression • OP_SUBTRACT unary_expression
   46           | expression • OP_MULTIPLY unary_expression
   47           | expression • OP_DIVIDE unary_expression
   48           | expression • OP_MODULUS unary_expression
   49           | expression • OP_EXP unary_expression
   50           | expression • OP_INTEGER_DIVIDE unary_expression
   51           | expression • OP_EQUAL unary_expression
   52           | expression • OP_NOT_EQUAL unary_expression
   53           | expression • OP_LESS_THAN unary_expression
   54           | expression • OP_GREATER_THAN unary_expression
   55           | expression • OP_LESS_EQUAL unary_expression
   56           | expression • OP_GREATER_EQUAL unary_expression
   57           | expression • OP_LOGICAL_AND unary_expression
   58           | expression • OP_LOGICAL_OR unary_expression
   59           | expression • OP_LOGICAL_XOR unary_expression
   60           | expression • OP_ASSIGN IDENTIFIER
   99 conditional_statement: LPAREN expression • RPAREN KW_SI block
  100                      | LPAREN expression • RPAREN KW_SI block conditional_non_statement
  102                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@4 causal_statement RBRACE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 301


State 301

   99 conditional_statement: LPAREN expression RPAREN • KW_SI block
  100                      | LPAREN expression RPAREN • KW_SI block conditional_non_statement
  102                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@4 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 250
    KW_SI       shift, and go to state 252
