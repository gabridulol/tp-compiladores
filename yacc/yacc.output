Terminals unused in grammar

    LEX_ERROR


State 55 conflicts: 24 reduce/reduce
State 57 conflicts: 24 reduce/reduce
State 94 conflicts: 1 shift/reduce, 18 reduce/reduce
State 100 conflicts: 1 shift/reduce
State 164 conflicts: 24 reduce/reduce
State 165 conflicts: 1 shift/reduce
State 191 conflicts: 1 shift/reduce
State 217 conflicts: 1 reduce/reduce
State 219 conflicts: 1 shift/reduce
State 235 conflicts: 19 shift/reduce
State 237 conflicts: 1 shift/reduce, 21 reduce/reduce
State 255 conflicts: 1 shift/reduce
State 256 conflicts: 1 shift/reduce
State 258 conflicts: 19 shift/reduce
State 259 conflicts: 21 reduce/reduce
State 301 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: global_statement_list alchemia_statement

    2 global_statement_list: ε
    3                      | global_statement_list global_statement

    4 global_statement: import_statement
    5                 | declaration_statement
    6                 | function_declaration_statement
    7                 | type_define_statement

    8 $@1: ε

    9 block: LBRACE $@1 statement_list RBRACE

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN block

   11 statement_list: ε
   12               | statement_list statement

   13 statement: conditional_statement
   14          | expression_statement
   15          | iteration_statement
   16          | io_functions
   17          | declaration_statement
   18          | function_call_statement
   19          | type_define_statement
   20          | vector_statement
   21          | jump_statement
   22          | causal_statement
   23          | enum_assignment
   24          | assignment_statement

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON

   29 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON

   30 expression_statement: expression SEMICOLON

   31 primary_expression: IDENTIFIER
   32                   | constant
   33                   | string
   34                   | LPAREN expression RPAREN
   35                   | vector_access
   36                   | pointer_statement

   37 unary_expression: primary_expression
   38                 | OP_LOGICAL_NOT unary_expression
   39                 | OP_DEREF_POINTER unary_expression
   40                 | OP_ADDR_OF unary_expression
   41                 | OP_SUBTRACT unary_expression

   42 expression: unary_expression
   43           | expression OP_ADD unary_expression
   44           | expression OP_SUBTRACT unary_expression
   45           | expression OP_MULTIPLY unary_expression
   46           | expression OP_DIVIDE unary_expression
   47           | expression OP_MODULUS unary_expression
   48           | expression OP_EXP unary_expression
   49           | expression OP_INTEGER_DIVIDE unary_expression
   50           | expression OP_EQUAL unary_expression
   51           | expression OP_NOT_EQUAL unary_expression
   52           | expression OP_LESS_THAN unary_expression
   53           | expression OP_GREATER_THAN unary_expression
   54           | expression OP_LESS_EQUAL unary_expression
   55           | expression OP_GREATER_EQUAL unary_expression
   56           | expression OP_LOGICAL_AND unary_expression
   57           | expression OP_LOGICAL_OR unary_expression
   58           | expression OP_LOGICAL_XOR unary_expression
   59           | expression OP_ASSIGN assing_value

   60 constant: LIT_INT
   61         | LIT_FLOAT
   62         | LIT_FACTUM
   63         | LIT_FICTUM
   64         | LIT_CHAR

   65 string: LIT_STRING

   66 assing_value: IDENTIFIER
   67             | vector_access
   68             | pointer_statement
   69             | struct_member_lvalue

   70 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON
   71                      | expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   72                      | pointer_declaration

   73 opcional_constant: KW_MOL
   74                  | ε

   75 list_declaration_statement: ε
   76                           | declaration_statement list_declaration_statement

   77 type_specifier: KW_TYPE_ATOMUS
   78               | KW_TYPE_FRACTIO
   79               | KW_TYPE_FRAGMENTUM
   80               | KW_TYPE_MAGNUS
   81               | KW_TYPE_MINIMUS
   82               | KW_TYPE_QUANTUM
   83               | KW_TYPE_SCRIPTUM
   84               | KW_TYPE_SYMBOLUM
   85               | KW_TYPE_VACUUM
   86               | IDENTIFIER
   87               | IDENTIFIER KW_ENUMERARE
   88               | OP_DEREF_POINTER type_specifier

   89 $@2: ε

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

   91 parameter_list: ε
   92               | parameter
   93               | parameter_list PIPE parameter

   94 parameter: IDENTIFIER type_specifier

   95 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON

   96 argument_list: expression
   97              | argument_list PIPE expression

   98 jump_statement: KW_CONTINUUM SEMICOLON
   99               | KW_RUPTIO SEMICOLON
  100               | KW_REDIRE SEMICOLON
  101               | expression KW_REDIRE SEMICOLON

  102 conditional_statement: LPAREN expression RPAREN KW_SI block
  103                      | LPAREN expression RPAREN KW_SI block conditional_non_statement

  104 $@3: ε

  105 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@3 causal_statement RBRACE

  106 conditional_non_statement: KW_NON block
  107                          | KW_NON conditional_statement

  108 causal_statement: KW_CASUS expression COLON statement_list
  109                 | KW_AXIOM COLON statement_list

  110 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block
  111                    | LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block
  112                    | LPAREN expression_statement expression_statement RPAREN KW_ITERARE block
  113                    | LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block
  114                    | LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block

  115 io_functions: function_input_output
  116             | function_magnitudo

  117 function_input_output: identifier_langle_list
  118                      | identifier_rangle_list

  119 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON
  120                       | IDENTIFIER LANGLE identifier_langle_list

  121 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON
  122                       | IDENTIFIER RANGLE identifier_rangle_list

  123 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON

  124 type_expression: type_specifier

  125 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON
  126                      | type_define_struct
  127                      | type_define_enum

  128 $@4: ε

  129 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@4 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

  130 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON

  131 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

  132 enum_list: IDENTIFIER
  133          | IDENTIFIER OP_ASSIGN LIT_INT
  134          | IDENTIFIER OP_ASSIGN LIT_CHAR
  135          | enum_list PIPE IDENTIFIER
  136          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT
  137          | enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

  138 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON
  139                 | LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

  140 vector_access: IDENTIFIER LANGLE expression RANGLE

  141 pointer_statement: pointer_assignment
  142                  | pointer_dereference
  143                  | member_access_direct
  144                  | member_access_dereference
  145                  | member_access_pointer

  146 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON
  147                    | expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

  148 pointer_assignment: OP_ADDR_OF IDENTIFIER

  149 pointer_dereference: OP_DEREF_POINTER IDENTIFIER

  150 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

  152 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_MAIN (258) 10
    KW_CASUS (259) 108
    KW_AXIOM (260) 109
    KW_CONTINUUM (261) 98
    KW_RUPTIO (262) 99
    KW_VERTERE (263) 105
    KW_DESIGNARE (264) 125 129
    KW_ENUMERARE (265) 87 130 131
    KW_EVOCARE (266) 29
    KW_FORMULA (267) 90
    KW_HOMUNCULUS (268) 129
    KW_ITERARE (269) 111 112 113 114
    KW_LECTURA (270) 119
    KW_MAGNITUDO (271) 123
    KW_MOL (272) 73
    KW_NON (273) 106 107
    KW_PERSISTO (274) 110
    KW_REDIRE (275) 100 101
    KW_REVELARE (276) 121
    KW_SI (277) 102 103
    KW_TYPE_ATOMUS (278) 77
    KW_TYPE_FRACTIO (279) 78
    KW_TYPE_FRAGMENTUM (280) 79
    KW_TYPE_MAGNUS (281) 80
    KW_TYPE_MINIMUS (282) 81
    KW_TYPE_QUANTUM (283) 82
    KW_TYPE_SCRIPTUM (284) 83
    KW_TYPE_SYMBOLUM (285) 84
    KW_TYPE_VACUUM (286) 85
    LIT_FACTUM (287) 62
    LIT_FICTUM (288) 63
    LIT_FLOAT <val_float> (289) 61
    LIT_INT <val_int> (290) 60 133 136
    LIT_CHAR <str> (291) 64 134 137
    LIT_STRING <str> (292) 65
    OP_ACCESS_POINTER (293) 152
    OP_ASSIGN (294) 26 27 28 59 71 90 131 133 134 136 137 139 147
    OP_GREATER_EQUAL (295) 55
    OP_LESS_EQUAL (296) 54
    OP_EQUAL (297) 50
    OP_NOT_EQUAL (298) 51
    OP_INTEGER_DIVIDE (299) 49
    OP_EXP (300) 48
    OP_LOGICAL_AND (301) 56
    OP_LOGICAL_OR (302) 57
    OP_MULTIPLY (303) 45
    OP_ADD (304) 43
    OP_SUBTRACT (305) 41 44
    OP_DIVIDE (306) 46
    OP_MODULUS (307) 47
    OP_ACCESS_MEMBER (308) 25 150 151
    OP_LOGICAL_NOT (309) 38
    OP_GREATER_THAN (310) 53
    OP_LESS_THAN (311) 52
    OP_LOGICAL_XOR (312) 58
    OP_ADDR_OF (313) 40 148
    OP_DEREF_POINTER (314) 39 88 146 147 149 151
    LANGLE (315) 28 119 120 138 140
    RANGLE (316) 28 121 122 138 140
    COLON (317) 108 109
    LPAREN (318) 10 34 90 95 102 103 105 110 111 112 113 114 123 151
    RPAREN (319) 10 34 90 95 102 103 105 110 111 112 113 114 123 151
    LBRACKET (320) 139
    RBRACKET (321) 139
    LBRACE (322) 9 90 105 129 130
    RBRACE (323) 9 90 105 129 130
    PIPE (324) 93 97 135 136 137
    SEMICOLON (325) 26 27 28 29 30 70 71 95 98 99 100 101 119 121 123 125 129 130 131 138 139 146 147
    IDENTIFIER <str> (326) 10 25 27 28 29 31 66 70 71 86 87 90 94 95 119 120 121 122 125 129 130 131 132 133 134 135 136 137 138 139 140 146 147 148 149 150 151 152
    LEX_ERROR (327)


Nonterminals, with rules where they appear

    $accept (73)
        on left: 0
    translation_unit (74)
        on left: 1
        on right: 0
    global_statement_list (75)
        on left: 2 3
        on right: 1 3
    global_statement (76)
        on left: 4 5 6 7
        on right: 3
    block <ptr> (77)
        on left: 9
        on right: 10 102 103 106 110 111 112 113 114
    $@1 (78)
        on left: 8
        on right: 9
    alchemia_statement (79)
        on left: 10
        on right: 1
    statement_list (80)
        on left: 11 12
        on right: 9 12 90 108 109
    statement (81)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24
        on right: 12
    struct_member_lvalue <ptr> (82)
        on left: 25
        on right: 26 69
    assignment_statement (83)
        on left: 26 27 28
        on right: 24
    import_statement (84)
        on left: 29
        on right: 4
    expression_statement <expr> (85)
        on left: 30
        on right: 14 111 112 113 114
    primary_expression <expr> (86)
        on left: 31 32 33 34 35 36
        on right: 37
    unary_expression <expr> (87)
        on left: 37 38 39 40 41
        on right: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
    expression <expr> (88)
        on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 26 27 28 30 34 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 71 96 97 101 102 103 105 108 110 111 113 138 140 147
    constant <expr> (89)
        on left: 60 61 62 63 64
        on right: 32
    string <expr> (90)
        on left: 65
        on right: 33
    assing_value (91)
        on left: 66 67 68 69
        on right: 59
    declaration_statement <ptr> (92)
        on left: 70 71 72
        on right: 5 17 76 113 114
    opcional_constant (93)
        on left: 73 74
        on right: 70 71
    list_declaration_statement (94)
        on left: 75 76
        on right: 76 129
    type_specifier <str> (95)
        on left: 77 78 79 80 81 82 83 84 85 86 87 88
        on right: 70 71 88 90 94 124 125 138 146 147
    function_declaration_statement (96)
        on left: 90
        on right: 6
    $@2 (97)
        on left: 89
        on right: 90
    parameter_list (98)
        on left: 91 92 93
        on right: 90 93
    parameter (99)
        on left: 94
        on right: 92 93
    function_call_statement (100)
        on left: 95
        on right: 18
    argument_list <arg_list> (101)
        on left: 96 97
        on right: 95 97 139
    jump_statement (102)
        on left: 98 99 100 101
        on right: 21
    conditional_statement <expr> (103)
        on left: 102 103 105
        on right: 13 107
    $@3 (104)
        on left: 104
        on right: 105
    conditional_non_statement (105)
        on left: 106 107
        on right: 103
    causal_statement (106)
        on left: 108 109
        on right: 22 105
    iteration_statement (107)
        on left: 110 111 112 113 114
        on right: 15
    io_functions (108)
        on left: 115 116
        on right: 16
    function_input_output (109)
        on left: 117 118
        on right: 115
    identifier_langle_list (110)
        on left: 119 120
        on right: 117 120
    identifier_rangle_list (111)
        on left: 121 122
        on right: 118 122
    function_magnitudo (112)
        on left: 123
        on right: 116
    type_expression (113)
        on left: 124
        on right: 123
    type_define_statement (114)
        on left: 125 126 127
        on right: 7 19
    type_define_struct (115)
        on left: 129
        on right: 126
    $@4 (116)
        on left: 128
        on right: 129
    type_define_enum (117)
        on left: 130
        on right: 127
    enum_assignment (118)
        on left: 131
        on right: 23
    enum_list (119)
        on left: 132 133 134 135 136 137
        on right: 130 135 136 137
    vector_statement (120)
        on left: 138 139
        on right: 20
    vector_access <expr> (121)
        on left: 140
        on right: 35 67
    pointer_statement <expr> (122)
        on left: 141 142 143 144 145
        on right: 36 68
    pointer_declaration (123)
        on left: 146 147
        on right: 72
    pointer_assignment <expr> (124)
        on left: 148
        on right: 141
    pointer_dereference <expr> (125)
        on left: 149
        on right: 142
    member_access_direct <expr> (126)
        on left: 150
        on right: 143
    member_access_dereference <expr> (127)
        on left: 151
        on right: 144
    member_access_pointer <expr> (128)
        on left: 152
        on right: 145


State 0

    0 $accept: • translation_unit $end

    $default  reduce using rule 2 (global_statement_list)

    translation_unit       go to state 1
    global_statement_list  go to state 2


State 1

    0 $accept: translation_unit • $end

    $end  shift, and go to state 3


State 2

    1 translation_unit: global_statement_list • alchemia_statement
    3 global_statement_list: global_statement_list • global_statement

    KW_DESIGNARE      shift, and go to state 4
    KW_FORMULA        shift, and go to state 5
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 17

    global_statement                go to state 18
    alchemia_statement              go to state 19
    import_statement                go to state 20
    primary_expression              go to state 21
    unary_expression                go to state 22
    expression                      go to state 23
    constant                        go to state 24
    string                          go to state 25
    declaration_statement           go to state 26
    function_declaration_statement  go to state 27
    type_define_statement           go to state 28
    type_define_struct              go to state 29
    type_define_enum                go to state 30
    vector_access                   go to state 31
    pointer_statement               go to state 32
    pointer_declaration             go to state 33
    pointer_assignment              go to state 34
    pointer_dereference             go to state 35
    member_access_direct            go to state 36
    member_access_dereference       go to state 37
    member_access_pointer           go to state 38


State 3

    0 $accept: translation_unit $end •

    $default  accept


State 4

  125 type_define_statement: KW_DESIGNARE • type_specifier IDENTIFIER SEMICOLON
  129 type_define_struct: KW_DESIGNARE • IDENTIFIER LBRACE $@4 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 49

    type_specifier  go to state 50


State 5

   90 function_declaration_statement: KW_FORMULA • LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    LPAREN  shift, and go to state 51


State 6

   62 constant: LIT_FACTUM •

    $default  reduce using rule 62 (constant)


State 7

   63 constant: LIT_FICTUM •

    $default  reduce using rule 63 (constant)


State 8

   61 constant: LIT_FLOAT •

    $default  reduce using rule 61 (constant)


State 9

   60 constant: LIT_INT •

    $default  reduce using rule 60 (constant)


State 10

   64 constant: LIT_CHAR •

    $default  reduce using rule 64 (constant)


State 11

   65 string: LIT_STRING •

    $default  reduce using rule 65 (string)


State 12

   41 unary_expression: OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 53
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 13

   38 unary_expression: OP_LOGICAL_NOT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 54
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 14

   40 unary_expression: OP_ADDR_OF • unary_expression
  148 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 55

    primary_expression         go to state 21
    unary_expression           go to state 56
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 15

   39 unary_expression: OP_DEREF_POINTER • unary_expression
  149 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 57

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 16

   34 primary_expression: LPAREN • expression RPAREN
  151 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 59
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 60
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 17

   10 alchemia_statement: IDENTIFIER • LPAREN RPAREN KW_MAIN block
   29 import_statement: IDENTIFIER • KW_EVOCARE SEMICOLON
   31 primary_expression: IDENTIFIER •
   70 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  130 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_EVOCARE          shift, and go to state 61
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    LPAREN              shift, and go to state 66
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 31 (primary_expression)

    type_specifier  go to state 69


State 18

    3 global_statement_list: global_statement_list global_statement •

    $default  reduce using rule 3 (global_statement_list)


State 19

    1 translation_unit: global_statement_list alchemia_statement •

    $default  reduce using rule 1 (translation_unit)


State 20

    4 global_statement: import_statement •

    $default  reduce using rule 4 (global_statement)


State 21

   37 unary_expression: primary_expression •

    $default  reduce using rule 37 (unary_expression)


State 22

   42 expression: unary_expression •

    $default  reduce using rule 42 (expression)


State 23

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
   71 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  147 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86


State 24

   32 primary_expression: constant •

    $default  reduce using rule 32 (primary_expression)


State 25

   33 primary_expression: string •

    $default  reduce using rule 33 (primary_expression)


State 26

    5 global_statement: declaration_statement •

    $default  reduce using rule 5 (global_statement)


State 27

    6 global_statement: function_declaration_statement •

    $default  reduce using rule 6 (global_statement)


State 28

    7 global_statement: type_define_statement •

    $default  reduce using rule 7 (global_statement)


State 29

  126 type_define_statement: type_define_struct •

    $default  reduce using rule 126 (type_define_statement)


State 30

  127 type_define_statement: type_define_enum •

    $default  reduce using rule 127 (type_define_statement)


State 31

   35 primary_expression: vector_access •

    $default  reduce using rule 35 (primary_expression)


State 32

   36 primary_expression: pointer_statement •

    $default  reduce using rule 36 (primary_expression)


State 33

   72 declaration_statement: pointer_declaration •

    $default  reduce using rule 72 (declaration_statement)


State 34

  141 pointer_statement: pointer_assignment •

    $default  reduce using rule 141 (pointer_statement)


State 35

  142 pointer_statement: pointer_dereference •

    $default  reduce using rule 142 (pointer_statement)


State 36

  143 pointer_statement: member_access_direct •

    $default  reduce using rule 143 (pointer_statement)


State 37

  144 pointer_statement: member_access_dereference •

    $default  reduce using rule 144 (pointer_statement)


State 38

  145 pointer_statement: member_access_pointer •

    $default  reduce using rule 145 (pointer_statement)


State 39

   77 type_specifier: KW_TYPE_ATOMUS •

    $default  reduce using rule 77 (type_specifier)


State 40

   78 type_specifier: KW_TYPE_FRACTIO •

    $default  reduce using rule 78 (type_specifier)


State 41

   79 type_specifier: KW_TYPE_FRAGMENTUM •

    $default  reduce using rule 79 (type_specifier)


State 42

   80 type_specifier: KW_TYPE_MAGNUS •

    $default  reduce using rule 80 (type_specifier)


State 43

   81 type_specifier: KW_TYPE_MINIMUS •

    $default  reduce using rule 81 (type_specifier)


State 44

   82 type_specifier: KW_TYPE_QUANTUM •

    $default  reduce using rule 82 (type_specifier)


State 45

   83 type_specifier: KW_TYPE_SCRIPTUM •

    $default  reduce using rule 83 (type_specifier)


State 46

   84 type_specifier: KW_TYPE_SYMBOLUM •

    $default  reduce using rule 84 (type_specifier)


State 47

   85 type_specifier: KW_TYPE_VACUUM •

    $default  reduce using rule 85 (type_specifier)


State 48

   88 type_specifier: OP_DEREF_POINTER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 87


State 49

   86 type_specifier: IDENTIFIER •
   87               | IDENTIFIER • KW_ENUMERARE
  129 type_define_struct: KW_DESIGNARE IDENTIFIER • LBRACE $@4 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    KW_ENUMERARE  shift, and go to state 88
    LBRACE        shift, and go to state 89

    $default  reduce using rule 86 (type_specifier)


State 50

  125 type_define_statement: KW_DESIGNARE type_specifier • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 90


State 51

   90 function_declaration_statement: KW_FORMULA LPAREN • parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 91 (parameter_list)

    parameter_list  go to state 92
    parameter       go to state 93


State 52

   31 primary_expression: IDENTIFIER •
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    $default  reduce using rule 31 (primary_expression)


State 53

   41 unary_expression: OP_SUBTRACT unary_expression •

    $default  reduce using rule 41 (unary_expression)


State 54

   38 unary_expression: OP_LOGICAL_NOT unary_expression •

    $default  reduce using rule 38 (unary_expression)


State 55

   31 primary_expression: IDENTIFIER •
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  148 pointer_assignment: OP_ADDR_OF IDENTIFIER •
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 31 (primary_expression)
    KW_REDIRE          [reduce using rule 148 (pointer_assignment)]
    OP_ASSIGN          reduce using rule 31 (primary_expression)
    OP_ASSIGN          [reduce using rule 148 (pointer_assignment)]
    OP_GREATER_EQUAL   reduce using rule 31 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 148 (pointer_assignment)]
    OP_LESS_EQUAL      reduce using rule 31 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 148 (pointer_assignment)]
    OP_EQUAL           reduce using rule 31 (primary_expression)
    OP_EQUAL           [reduce using rule 148 (pointer_assignment)]
    OP_NOT_EQUAL       reduce using rule 31 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 148 (pointer_assignment)]
    OP_INTEGER_DIVIDE  reduce using rule 31 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 148 (pointer_assignment)]
    OP_EXP             reduce using rule 31 (primary_expression)
    OP_EXP             [reduce using rule 148 (pointer_assignment)]
    OP_LOGICAL_AND     reduce using rule 31 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 148 (pointer_assignment)]
    OP_LOGICAL_OR      reduce using rule 31 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 148 (pointer_assignment)]
    OP_MULTIPLY        reduce using rule 31 (primary_expression)
    OP_MULTIPLY        [reduce using rule 148 (pointer_assignment)]
    OP_ADD             reduce using rule 31 (primary_expression)
    OP_ADD             [reduce using rule 148 (pointer_assignment)]
    OP_SUBTRACT        reduce using rule 31 (primary_expression)
    OP_SUBTRACT        [reduce using rule 148 (pointer_assignment)]
    OP_DIVIDE          reduce using rule 31 (primary_expression)
    OP_DIVIDE          [reduce using rule 148 (pointer_assignment)]
    OP_MODULUS         reduce using rule 31 (primary_expression)
    OP_MODULUS         [reduce using rule 148 (pointer_assignment)]
    OP_GREATER_THAN    reduce using rule 31 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 148 (pointer_assignment)]
    OP_LESS_THAN       reduce using rule 31 (primary_expression)
    OP_LESS_THAN       [reduce using rule 148 (pointer_assignment)]
    OP_LOGICAL_XOR     reduce using rule 31 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 148 (pointer_assignment)]
    RANGLE             reduce using rule 31 (primary_expression)
    RANGLE             [reduce using rule 148 (pointer_assignment)]
    COLON              reduce using rule 31 (primary_expression)
    COLON              [reduce using rule 148 (pointer_assignment)]
    RPAREN             reduce using rule 31 (primary_expression)
    RPAREN             [reduce using rule 148 (pointer_assignment)]
    RBRACKET           reduce using rule 31 (primary_expression)
    RBRACKET           [reduce using rule 148 (pointer_assignment)]
    PIPE               reduce using rule 31 (primary_expression)
    PIPE               [reduce using rule 148 (pointer_assignment)]
    SEMICOLON          reduce using rule 31 (primary_expression)
    SEMICOLON          [reduce using rule 148 (pointer_assignment)]
    $default           reduce using rule 31 (primary_expression)


State 56

   40 unary_expression: OP_ADDR_OF unary_expression •

    $default  reduce using rule 40 (unary_expression)


State 57

   31 primary_expression: IDENTIFIER •
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  149 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    KW_REDIRE          reduce using rule 31 (primary_expression)
    KW_REDIRE          [reduce using rule 149 (pointer_dereference)]
    OP_ASSIGN          reduce using rule 31 (primary_expression)
    OP_ASSIGN          [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 31 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 149 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 31 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 149 (pointer_dereference)]
    OP_EQUAL           reduce using rule 31 (primary_expression)
    OP_EQUAL           [reduce using rule 149 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 31 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 149 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 31 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 149 (pointer_dereference)]
    OP_EXP             reduce using rule 31 (primary_expression)
    OP_EXP             [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 31 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 31 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 149 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 31 (primary_expression)
    OP_MULTIPLY        [reduce using rule 149 (pointer_dereference)]
    OP_ADD             reduce using rule 31 (primary_expression)
    OP_ADD             [reduce using rule 149 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 31 (primary_expression)
    OP_SUBTRACT        [reduce using rule 149 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 31 (primary_expression)
    OP_DIVIDE          [reduce using rule 149 (pointer_dereference)]
    OP_MODULUS         reduce using rule 31 (primary_expression)
    OP_MODULUS         [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 31 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 149 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 31 (primary_expression)
    OP_LESS_THAN       [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 31 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 149 (pointer_dereference)]
    RANGLE             reduce using rule 31 (primary_expression)
    RANGLE             [reduce using rule 149 (pointer_dereference)]
    COLON              reduce using rule 31 (primary_expression)
    COLON              [reduce using rule 149 (pointer_dereference)]
    RPAREN             reduce using rule 31 (primary_expression)
    RPAREN             [reduce using rule 149 (pointer_dereference)]
    RBRACKET           reduce using rule 31 (primary_expression)
    RBRACKET           [reduce using rule 149 (pointer_dereference)]
    PIPE               reduce using rule 31 (primary_expression)
    PIPE               [reduce using rule 149 (pointer_dereference)]
    SEMICOLON          reduce using rule 31 (primary_expression)
    SEMICOLON          [reduce using rule 149 (pointer_dereference)]
    $default           reduce using rule 31 (primary_expression)


State 58

   39 unary_expression: OP_DEREF_POINTER unary_expression •

    $default  reduce using rule 39 (unary_expression)


State 59

   39 unary_expression: OP_DEREF_POINTER • unary_expression
  149 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  151 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 94

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 60

   34 primary_expression: LPAREN expression • RPAREN
   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 96


State 61

   29 import_statement: IDENTIFIER KW_EVOCARE • SEMICOLON

    SEMICOLON  shift, and go to state 97


State 62

  152 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 98


State 63

  150 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 99


State 64

   88 type_specifier: OP_DEREF_POINTER • type_specifier
  146 pointer_declaration: IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 100


State 65

  140 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 66

   10 alchemia_statement: IDENTIFIER LPAREN • RPAREN KW_MAIN block

    RPAREN  shift, and go to state 102


State 67

  130 type_define_enum: IDENTIFIER LBRACE • enum_list RBRACE KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 103

    enum_list  go to state 104


State 68

   86 type_specifier: IDENTIFIER •
   87               | IDENTIFIER • KW_ENUMERARE

    KW_ENUMERARE  shift, and go to state 88

    $default  reduce using rule 86 (type_specifier)


State 69

   70 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 74 (opcional_constant)

    opcional_constant  go to state 106


State 70

   59 expression: expression OP_ASSIGN • assing_value
   71 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  147 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ADDR_OF        shift, and go to state 107
    OP_DEREF_POINTER  shift, and go to state 108
    LPAREN            shift, and go to state 109
    IDENTIFIER        shift, and go to state 110

    struct_member_lvalue       go to state 111
    assing_value               go to state 112
    vector_access              go to state 113
    pointer_statement          go to state 114
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 71

   55 expression: expression OP_GREATER_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 115
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 72

   54 expression: expression OP_LESS_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 116
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 73

   50 expression: expression OP_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 117
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 74

   51 expression: expression OP_NOT_EQUAL • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 118
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 75

   49 expression: expression OP_INTEGER_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 119
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 76

   48 expression: expression OP_EXP • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 120
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 77

   56 expression: expression OP_LOGICAL_AND • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 121
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 78

   57 expression: expression OP_LOGICAL_OR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 122
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 79

   45 expression: expression OP_MULTIPLY • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 123
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 80

   43 expression: expression OP_ADD • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 124
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 81

   44 expression: expression OP_SUBTRACT • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 125
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 82

   46 expression: expression OP_DIVIDE • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 126
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 83

   47 expression: expression OP_MODULUS • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 127
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 84

   53 expression: expression OP_GREATER_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 128
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 85

   52 expression: expression OP_LESS_THAN • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 129
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 86

   58 expression: expression OP_LOGICAL_XOR • unary_expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 130
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 87

   88 type_specifier: OP_DEREF_POINTER type_specifier •

    $default  reduce using rule 88 (type_specifier)


State 88

   87 type_specifier: IDENTIFIER KW_ENUMERARE •

    $default  reduce using rule 87 (type_specifier)


State 89

  129 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE • $@4 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    $default  reduce using rule 128 ($@4)

    $@4  go to state 131


State 90

  125 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 132


State 91

   94 parameter: IDENTIFIER • type_specifier

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 133


State 92

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list • RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE
   93 parameter_list: parameter_list • PIPE parameter

    RPAREN  shift, and go to state 134
    PIPE    shift, and go to state 135


State 93

   92 parameter_list: parameter •

    $default  reduce using rule 92 (parameter_list)


State 94

   31 primary_expression: IDENTIFIER •
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  149 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 136

    OP_ASSIGN          reduce using rule 31 (primary_expression)
    OP_ASSIGN          [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 31 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 149 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 31 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 149 (pointer_dereference)]
    OP_EQUAL           reduce using rule 31 (primary_expression)
    OP_EQUAL           [reduce using rule 149 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 31 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 149 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 31 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 149 (pointer_dereference)]
    OP_EXP             reduce using rule 31 (primary_expression)
    OP_EXP             [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 31 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 31 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 149 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 31 (primary_expression)
    OP_MULTIPLY        [reduce using rule 149 (pointer_dereference)]
    OP_ADD             reduce using rule 31 (primary_expression)
    OP_ADD             [reduce using rule 149 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 31 (primary_expression)
    OP_SUBTRACT        [reduce using rule 149 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 31 (primary_expression)
    OP_DIVIDE          [reduce using rule 149 (pointer_dereference)]
    OP_MODULUS         reduce using rule 31 (primary_expression)
    OP_MODULUS         [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 31 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 149 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 31 (primary_expression)
    OP_LESS_THAN       [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 31 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 149 (pointer_dereference)]
    RPAREN             [reduce using rule 31 (primary_expression)]
    RPAREN             [reduce using rule 149 (pointer_dereference)]
    $default           reduce using rule 31 (primary_expression)


State 95

   59 expression: expression OP_ASSIGN • assing_value

    OP_ADDR_OF        shift, and go to state 107
    OP_DEREF_POINTER  shift, and go to state 108
    LPAREN            shift, and go to state 109
    IDENTIFIER        shift, and go to state 137

    struct_member_lvalue       go to state 111
    assing_value               go to state 112
    vector_access              go to state 113
    pointer_statement          go to state 114
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 96

   34 primary_expression: LPAREN expression RPAREN •

    $default  reduce using rule 34 (primary_expression)


State 97

   29 import_statement: IDENTIFIER KW_EVOCARE SEMICOLON •

    $default  reduce using rule 29 (import_statement)


State 98

  152 member_access_pointer: IDENTIFIER OP_ACCESS_POINTER IDENTIFIER •

    $default  reduce using rule 152 (member_access_pointer)


State 99

  150 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 150 (member_access_direct)


State 100

   88 type_specifier: OP_DEREF_POINTER type_specifier •
  146 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 138

    SEMICOLON  [reduce using rule 88 (type_specifier)]
    $default   reduce using rule 88 (type_specifier)


State 101

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
  140 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 139


State 102

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN • KW_MAIN block

    KW_MAIN  shift, and go to state 140


State 103

  132 enum_list: IDENTIFIER •
  133          | IDENTIFIER • OP_ASSIGN LIT_INT
  134          | IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 141

    $default  reduce using rule 132 (enum_list)


State 104

  130 type_define_enum: IDENTIFIER LBRACE enum_list • RBRACE KW_ENUMERARE SEMICOLON
  135 enum_list: enum_list • PIPE IDENTIFIER
  136          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_INT
  137          | enum_list • PIPE IDENTIFIER OP_ASSIGN LIT_CHAR

    RBRACE  shift, and go to state 142
    PIPE    shift, and go to state 143


State 105

   73 opcional_constant: KW_MOL •

    $default  reduce using rule 73 (opcional_constant)


State 106

   70 declaration_statement: IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 144


State 107

  148 pointer_assignment: OP_ADDR_OF • IDENTIFIER

    IDENTIFIER  shift, and go to state 145


State 108

  149 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    IDENTIFIER  shift, and go to state 146


State 109

  151 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    OP_DEREF_POINTER  shift, and go to state 147


State 110

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   66 assing_value: IDENTIFIER •
   71 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  147 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 148
    OP_DEREF_POINTER    shift, and go to state 149
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 66 (assing_value)

    type_specifier  go to state 150


State 111

   69 assing_value: struct_member_lvalue •

    $default  reduce using rule 69 (assing_value)


State 112

   59 expression: expression OP_ASSIGN assing_value •

    $default  reduce using rule 59 (expression)


State 113

   67 assing_value: vector_access •

    $default  reduce using rule 67 (assing_value)


State 114

   68 assing_value: pointer_statement •

    $default  reduce using rule 68 (assing_value)


State 115

   55 expression: expression OP_GREATER_EQUAL unary_expression •

    $default  reduce using rule 55 (expression)


State 116

   54 expression: expression OP_LESS_EQUAL unary_expression •

    $default  reduce using rule 54 (expression)


State 117

   50 expression: expression OP_EQUAL unary_expression •

    $default  reduce using rule 50 (expression)


State 118

   51 expression: expression OP_NOT_EQUAL unary_expression •

    $default  reduce using rule 51 (expression)


State 119

   49 expression: expression OP_INTEGER_DIVIDE unary_expression •

    $default  reduce using rule 49 (expression)


State 120

   48 expression: expression OP_EXP unary_expression •

    $default  reduce using rule 48 (expression)


State 121

   56 expression: expression OP_LOGICAL_AND unary_expression •

    $default  reduce using rule 56 (expression)


State 122

   57 expression: expression OP_LOGICAL_OR unary_expression •

    $default  reduce using rule 57 (expression)


State 123

   45 expression: expression OP_MULTIPLY unary_expression •

    $default  reduce using rule 45 (expression)


State 124

   43 expression: expression OP_ADD unary_expression •

    $default  reduce using rule 43 (expression)


State 125

   44 expression: expression OP_SUBTRACT unary_expression •

    $default  reduce using rule 44 (expression)


State 126

   46 expression: expression OP_DIVIDE unary_expression •

    $default  reduce using rule 46 (expression)


State 127

   47 expression: expression OP_MODULUS unary_expression •

    $default  reduce using rule 47 (expression)


State 128

   53 expression: expression OP_GREATER_THAN unary_expression •

    $default  reduce using rule 53 (expression)


State 129

   52 expression: expression OP_LESS_THAN unary_expression •

    $default  reduce using rule 52 (expression)


State 130

   58 expression: expression OP_LOGICAL_XOR unary_expression •

    $default  reduce using rule 58 (expression)


State 131

  129 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@4 • list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 151

    $default  reduce using rule 75 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 152
    list_declaration_statement  go to state 153
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 132

  125 type_define_statement: KW_DESIGNARE type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 125 (type_define_statement)


State 133

   94 parameter: IDENTIFIER type_specifier •

    $default  reduce using rule 94 (parameter)


State 134

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN • IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    IDENTIFIER  shift, and go to state 154


State 135

   93 parameter_list: parameter_list PIPE • parameter

    IDENTIFIER  shift, and go to state 91

    parameter  go to state 155


State 136

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN • OP_ACCESS_MEMBER IDENTIFIER

    OP_ACCESS_MEMBER  shift, and go to state 156


State 137

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   66 assing_value: IDENTIFIER •
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 148
    LANGLE             shift, and go to state 65

    $default  reduce using rule 66 (assing_value)


State 138

  146 pointer_declaration: IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 146 (pointer_declaration)


State 139

  140 vector_access: IDENTIFIER LANGLE expression RANGLE •

    $default  reduce using rule 140 (vector_access)


State 140

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN • block

    LBRACE  shift, and go to state 157

    block  go to state 158


State 141

  133 enum_list: IDENTIFIER OP_ASSIGN • LIT_INT
  134          | IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 159
    LIT_CHAR  shift, and go to state 160


State 142

  130 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 161


State 143

  135 enum_list: enum_list PIPE • IDENTIFIER
  136          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_INT
  137          | enum_list PIPE • IDENTIFIER OP_ASSIGN LIT_CHAR

    IDENTIFIER  shift, and go to state 162


State 144

   70 declaration_statement: IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 70 (declaration_statement)


State 145

  148 pointer_assignment: OP_ADDR_OF IDENTIFIER •

    $default  reduce using rule 148 (pointer_assignment)


State 146

  149 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •

    $default  reduce using rule 149 (pointer_dereference)


State 147

  151 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    IDENTIFIER  shift, and go to state 163


State 148

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER
  150 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 164


State 149

   88 type_specifier: OP_DEREF_POINTER • type_specifier
  147 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER • type_specifier SEMICOLON

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 165


State 150

   71 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier • opcional_constant SEMICOLON

    KW_MOL  shift, and go to state 105

    $default  reduce using rule 74 (opcional_constant)

    opcional_constant  go to state 166


State 151

   31 primary_expression: IDENTIFIER •
   70 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    $default  reduce using rule 31 (primary_expression)

    type_specifier  go to state 69


State 152

   76 list_declaration_statement: declaration_statement • list_declaration_statement

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 151

    $default  reduce using rule 75 (list_declaration_statement)

    primary_expression          go to state 21
    unary_expression            go to state 22
    expression                  go to state 23
    constant                    go to state 24
    string                      go to state 25
    declaration_statement       go to state 152
    list_declaration_statement  go to state 167
    vector_access               go to state 31
    pointer_statement           go to state 32
    pointer_declaration         go to state 33
    pointer_assignment          go to state 34
    pointer_dereference         go to state 35
    member_access_direct        go to state 36
    member_access_dereference   go to state 37
    member_access_pointer       go to state 38


State 153

  129 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@4 list_declaration_statement • RBRACE KW_HOMUNCULUS SEMICOLON

    RBRACE  shift, and go to state 168


State 154

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER • OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE

    OP_ASSIGN  shift, and go to state 169


State 155

   93 parameter_list: parameter_list PIPE parameter •

    $default  reduce using rule 93 (parameter_list)


State 156

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER • IDENTIFIER

    IDENTIFIER  shift, and go to state 170


State 157

    9 block: LBRACE • $@1 statement_list RBRACE

    $default  reduce using rule 8 ($@1)

    $@1  go to state 171


State 158

   10 alchemia_statement: IDENTIFIER LPAREN RPAREN KW_MAIN block •

    $default  reduce using rule 10 (alchemia_statement)


State 159

  133 enum_list: IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 133 (enum_list)


State 160

  134 enum_list: IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 134 (enum_list)


State 161

  130 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 172


State 162

  135 enum_list: enum_list PIPE IDENTIFIER •
  136          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_INT
  137          | enum_list PIPE IDENTIFIER • OP_ASSIGN LIT_CHAR

    OP_ASSIGN  shift, and go to state 173

    $default  reduce using rule 135 (enum_list)


State 163

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER

    RPAREN  shift, and go to state 136


State 164

   25 struct_member_lvalue: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •
  150 member_access_direct: IDENTIFIER OP_ACCESS_MEMBER IDENTIFIER •

    KW_REDIRE          reduce using rule 25 (struct_member_lvalue)
    KW_REDIRE          [reduce using rule 150 (member_access_direct)]
    OP_ASSIGN          reduce using rule 25 (struct_member_lvalue)
    OP_ASSIGN          [reduce using rule 150 (member_access_direct)]
    OP_GREATER_EQUAL   reduce using rule 25 (struct_member_lvalue)
    OP_GREATER_EQUAL   [reduce using rule 150 (member_access_direct)]
    OP_LESS_EQUAL      reduce using rule 25 (struct_member_lvalue)
    OP_LESS_EQUAL      [reduce using rule 150 (member_access_direct)]
    OP_EQUAL           reduce using rule 25 (struct_member_lvalue)
    OP_EQUAL           [reduce using rule 150 (member_access_direct)]
    OP_NOT_EQUAL       reduce using rule 25 (struct_member_lvalue)
    OP_NOT_EQUAL       [reduce using rule 150 (member_access_direct)]
    OP_INTEGER_DIVIDE  reduce using rule 25 (struct_member_lvalue)
    OP_INTEGER_DIVIDE  [reduce using rule 150 (member_access_direct)]
    OP_EXP             reduce using rule 25 (struct_member_lvalue)
    OP_EXP             [reduce using rule 150 (member_access_direct)]
    OP_LOGICAL_AND     reduce using rule 25 (struct_member_lvalue)
    OP_LOGICAL_AND     [reduce using rule 150 (member_access_direct)]
    OP_LOGICAL_OR      reduce using rule 25 (struct_member_lvalue)
    OP_LOGICAL_OR      [reduce using rule 150 (member_access_direct)]
    OP_MULTIPLY        reduce using rule 25 (struct_member_lvalue)
    OP_MULTIPLY        [reduce using rule 150 (member_access_direct)]
    OP_ADD             reduce using rule 25 (struct_member_lvalue)
    OP_ADD             [reduce using rule 150 (member_access_direct)]
    OP_SUBTRACT        reduce using rule 25 (struct_member_lvalue)
    OP_SUBTRACT        [reduce using rule 150 (member_access_direct)]
    OP_DIVIDE          reduce using rule 25 (struct_member_lvalue)
    OP_DIVIDE          [reduce using rule 150 (member_access_direct)]
    OP_MODULUS         reduce using rule 25 (struct_member_lvalue)
    OP_MODULUS         [reduce using rule 150 (member_access_direct)]
    OP_GREATER_THAN    reduce using rule 25 (struct_member_lvalue)
    OP_GREATER_THAN    [reduce using rule 150 (member_access_direct)]
    OP_LESS_THAN       reduce using rule 25 (struct_member_lvalue)
    OP_LESS_THAN       [reduce using rule 150 (member_access_direct)]
    OP_LOGICAL_XOR     reduce using rule 25 (struct_member_lvalue)
    OP_LOGICAL_XOR     [reduce using rule 150 (member_access_direct)]
    RANGLE             reduce using rule 25 (struct_member_lvalue)
    RANGLE             [reduce using rule 150 (member_access_direct)]
    COLON              reduce using rule 25 (struct_member_lvalue)
    COLON              [reduce using rule 150 (member_access_direct)]
    RPAREN             reduce using rule 25 (struct_member_lvalue)
    RPAREN             [reduce using rule 150 (member_access_direct)]
    RBRACKET           reduce using rule 25 (struct_member_lvalue)
    RBRACKET           [reduce using rule 150 (member_access_direct)]
    PIPE               reduce using rule 25 (struct_member_lvalue)
    PIPE               [reduce using rule 150 (member_access_direct)]
    SEMICOLON          reduce using rule 25 (struct_member_lvalue)
    SEMICOLON          [reduce using rule 150 (member_access_direct)]
    $default           reduce using rule 25 (struct_member_lvalue)


State 165

   88 type_specifier: OP_DEREF_POINTER type_specifier •
  147 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier • SEMICOLON

    SEMICOLON  shift, and go to state 174

    SEMICOLON  [reduce using rule 88 (type_specifier)]
    $default   reduce using rule 88 (type_specifier)


State 166

   71 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant • SEMICOLON

    SEMICOLON  shift, and go to state 175


State 167

   76 list_declaration_statement: declaration_statement list_declaration_statement •

    $default  reduce using rule 76 (list_declaration_statement)


State 168

  129 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@4 list_declaration_statement RBRACE • KW_HOMUNCULUS SEMICOLON

    KW_HOMUNCULUS  shift, and go to state 176


State 169

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN • type_specifier $@2 LBRACE statement_list RBRACE

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_DEREF_POINTER    shift, and go to state 48
    IDENTIFIER          shift, and go to state 68

    type_specifier  go to state 177


State 170

  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER •

    $default  reduce using rule 151 (member_access_dereference)


State 171

    9 block: LBRACE $@1 • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 178


State 172

  130 type_define_enum: IDENTIFIER LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 130 (type_define_enum)


State 173

  136 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_INT
  137          | enum_list PIPE IDENTIFIER OP_ASSIGN • LIT_CHAR

    LIT_INT   shift, and go to state 179
    LIT_CHAR  shift, and go to state 180


State 174

  147 pointer_declaration: expression OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON •

    $default  reduce using rule 147 (pointer_declaration)


State 175

   71 declaration_statement: expression OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON •

    $default  reduce using rule 71 (declaration_statement)


State 176

  129 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@4 list_declaration_statement RBRACE KW_HOMUNCULUS • SEMICOLON

    SEMICOLON  shift, and go to state 181


State 177

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier • $@2 LBRACE statement_list RBRACE

    $default  reduce using rule 89 ($@2)

    $@2  go to state 182


State 178

    9 block: LBRACE $@1 statement_list • RBRACE
   12 statement_list: statement_list • statement

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 188
    LBRACKET          shift, and go to state 189
    RBRACE            shift, and go to state 190
    IDENTIFIER        shift, and go to state 191

    statement                  go to state 192
    assignment_statement       go to state 193
    expression_statement       go to state 194
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 195
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 196
    function_call_statement    go to state 197
    jump_statement             go to state 198
    conditional_statement      go to state 199
    causal_statement           go to state 200
    iteration_statement        go to state 201
    io_functions               go to state 202
    function_input_output      go to state 203
    identifier_langle_list     go to state 204
    identifier_rangle_list     go to state 205
    function_magnitudo         go to state 206
    type_define_statement      go to state 207
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 208
    vector_statement           go to state 209
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 179

  136 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_INT •

    $default  reduce using rule 136 (enum_list)


State 180

  137 enum_list: enum_list PIPE IDENTIFIER OP_ASSIGN LIT_CHAR •

    $default  reduce using rule 137 (enum_list)


State 181

  129 type_define_struct: KW_DESIGNARE IDENTIFIER LBRACE $@4 list_declaration_statement RBRACE KW_HOMUNCULUS SEMICOLON •

    $default  reduce using rule 129 (type_define_struct)


State 182

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 • LBRACE statement_list RBRACE

    LBRACE  shift, and go to state 210


State 183

  108 causal_statement: KW_CASUS • expression COLON statement_list

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 211
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 184

  109 causal_statement: KW_AXIOM • COLON statement_list

    COLON  shift, and go to state 212


State 185

   98 jump_statement: KW_CONTINUUM • SEMICOLON

    SEMICOLON  shift, and go to state 213


State 186

   99 jump_statement: KW_RUPTIO • SEMICOLON

    SEMICOLON  shift, and go to state 214


State 187

  100 jump_statement: KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 215


State 188

   34 primary_expression: LPAREN • expression RPAREN
   95 function_call_statement: LPAREN • argument_list RPAREN IDENTIFIER SEMICOLON
  102 conditional_statement: LPAREN • expression RPAREN KW_SI block
  103                      | LPAREN • expression RPAREN KW_SI block conditional_non_statement
  105                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@3 causal_statement RBRACE
  110 iteration_statement: LPAREN • expression RPAREN KW_PERSISTO block
  111                    | LPAREN • expression_statement expression_statement expression RPAREN KW_ITERARE block
  112                    | LPAREN • expression_statement expression_statement RPAREN KW_ITERARE block
  113                    | LPAREN • declaration_statement expression_statement expression RPAREN KW_ITERARE block
  114                    | LPAREN • declaration_statement expression_statement RPAREN KW_ITERARE block
  123 function_magnitudo: LPAREN • type_expression RPAREN KW_MAGNITUDO SEMICOLON
  151 member_access_dereference: LPAREN • OP_DEREF_POINTER IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 216
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 217

    expression_statement       go to state 218
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 219
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 220
    type_specifier             go to state 221
    argument_list              go to state 222
    type_expression            go to state 223
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 189

  139 vector_statement: LBRACKET • argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 224
    constant                   go to state 24
    string                     go to state 25
    argument_list              go to state 225
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 190

    9 block: LBRACE $@1 statement_list RBRACE •

    $default  reduce using rule 9 (block)


State 191

   31 primary_expression: IDENTIFIER •
   70 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
  119 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  120                       | IDENTIFIER • LANGLE identifier_langle_list
  121 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  122                       | IDENTIFIER • RANGLE identifier_rangle_list
  130 type_define_enum: IDENTIFIER • LBRACE enum_list RBRACE KW_ENUMERARE SEMICOLON
  131 enum_assignment: IDENTIFIER • OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON
  138 vector_statement: IDENTIFIER • type_specifier LANGLE expression RANGLE SEMICOLON
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ASSIGN           shift, and go to state 226
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 227
    RANGLE              shift, and go to state 228
    LBRACE              shift, and go to state 67
    IDENTIFIER          shift, and go to state 68

    OP_ASSIGN  [reduce using rule 31 (primary_expression)]
    $default   reduce using rule 31 (primary_expression)

    type_specifier  go to state 229


State 192

   12 statement_list: statement_list statement •

    $default  reduce using rule 12 (statement_list)


State 193

   24 statement: assignment_statement •

    $default  reduce using rule 24 (statement)


State 194

   14 statement: expression_statement •

    $default  reduce using rule 14 (statement)


State 195

   26 assignment_statement: expression • OP_ASSIGN struct_member_lvalue SEMICOLON
   27                     | expression • OP_ASSIGN IDENTIFIER SEMICOLON
   28                     | expression • OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON
   30 expression_statement: expression • SEMICOLON
   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
   71 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
  101 jump_statement: expression • KW_REDIRE SEMICOLON
  147 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    KW_REDIRE          shift, and go to state 230
    OP_ASSIGN          shift, and go to state 231
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 232


State 196

   17 statement: declaration_statement •

    $default  reduce using rule 17 (statement)


State 197

   18 statement: function_call_statement •

    $default  reduce using rule 18 (statement)


State 198

   21 statement: jump_statement •

    $default  reduce using rule 21 (statement)


State 199

   13 statement: conditional_statement •

    $default  reduce using rule 13 (statement)


State 200

   22 statement: causal_statement •

    $default  reduce using rule 22 (statement)


State 201

   15 statement: iteration_statement •

    $default  reduce using rule 15 (statement)


State 202

   16 statement: io_functions •

    $default  reduce using rule 16 (statement)


State 203

  115 io_functions: function_input_output •

    $default  reduce using rule 115 (io_functions)


State 204

  117 function_input_output: identifier_langle_list •

    $default  reduce using rule 117 (function_input_output)


State 205

  118 function_input_output: identifier_rangle_list •

    $default  reduce using rule 118 (function_input_output)


State 206

  116 io_functions: function_magnitudo •

    $default  reduce using rule 116 (io_functions)


State 207

   19 statement: type_define_statement •

    $default  reduce using rule 19 (statement)


State 208

   23 statement: enum_assignment •

    $default  reduce using rule 23 (statement)


State 209

   20 statement: vector_statement •

    $default  reduce using rule 20 (statement)


State 210

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE • statement_list RBRACE

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 233


State 211

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
  108 causal_statement: KW_CASUS expression • COLON statement_list

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    COLON              shift, and go to state 234


State 212

  109 causal_statement: KW_AXIOM COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 235


State 213

   98 jump_statement: KW_CONTINUUM SEMICOLON •

    $default  reduce using rule 98 (jump_statement)


State 214

   99 jump_statement: KW_RUPTIO SEMICOLON •

    $default  reduce using rule 99 (jump_statement)


State 215

  100 jump_statement: KW_REDIRE SEMICOLON •

    $default  reduce using rule 100 (jump_statement)


State 216

   39 unary_expression: OP_DEREF_POINTER • unary_expression
   88 type_specifier: OP_DEREF_POINTER • type_specifier
  149 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER
  151 member_access_dereference: LPAREN OP_DEREF_POINTER • IDENTIFIER RPAREN OP_ACCESS_MEMBER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 236
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 237

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 217

   31 primary_expression: IDENTIFIER •
   70 declaration_statement: IDENTIFIER • type_specifier opcional_constant SEMICOLON
   86 type_specifier: IDENTIFIER •
   87               | IDENTIFIER • KW_ENUMERARE
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  146 pointer_declaration: IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE        shift, and go to state 88
    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 63
    OP_DEREF_POINTER    shift, and go to state 64
    LANGLE              shift, and go to state 65
    IDENTIFIER          shift, and go to state 68

    RPAREN    reduce using rule 31 (primary_expression)
    RPAREN    [reduce using rule 86 (type_specifier)]
    $default  reduce using rule 31 (primary_expression)

    type_specifier  go to state 69


State 218

  111 iteration_statement: LPAREN expression_statement • expression_statement expression RPAREN KW_ITERARE block
  112                    | LPAREN expression_statement • expression_statement RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 238
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 239
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 219

   30 expression_statement: expression • SEMICOLON
   34 primary_expression: LPAREN expression • RPAREN
   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
   71 declaration_statement: expression • OP_ASSIGN IDENTIFIER type_specifier opcional_constant SEMICOLON
   96 argument_list: expression •
  102 conditional_statement: LPAREN expression • RPAREN KW_SI block
  103                      | LPAREN expression • RPAREN KW_SI block conditional_non_statement
  105                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@3 causal_statement RBRACE
  110 iteration_statement: LPAREN expression • RPAREN KW_PERSISTO block
  147 pointer_declaration: expression • OP_ASSIGN IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ASSIGN          shift, and go to state 70
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 240
    SEMICOLON          shift, and go to state 232

    RPAREN    [reduce using rule 96 (argument_list)]
    $default  reduce using rule 96 (argument_list)


State 220

  113 iteration_statement: LPAREN declaration_statement • expression_statement expression RPAREN KW_ITERARE block
  114                    | LPAREN declaration_statement • expression_statement RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    expression_statement       go to state 241
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 239
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 221

  124 type_expression: type_specifier •

    $default  reduce using rule 124 (type_expression)


State 222

   95 function_call_statement: LPAREN argument_list • RPAREN IDENTIFIER SEMICOLON
   97 argument_list: argument_list • PIPE expression

    RPAREN  shift, and go to state 242
    PIPE    shift, and go to state 243


State 223

  123 function_magnitudo: LPAREN type_expression • RPAREN KW_MAGNITUDO SEMICOLON

    RPAREN  shift, and go to state 244


State 224

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
   96 argument_list: expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 96 (argument_list)


State 225

   97 argument_list: argument_list • PIPE expression
  139 vector_statement: LBRACKET argument_list • RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON

    RBRACKET  shift, and go to state 245
    PIPE      shift, and go to state 243


State 226

  131 enum_assignment: IDENTIFIER OP_ASSIGN • IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 246


State 227

  119 identifier_langle_list: IDENTIFIER LANGLE • KW_LECTURA SEMICOLON
  120                       | IDENTIFIER LANGLE • identifier_langle_list
  140 vector_access: IDENTIFIER LANGLE • expression RANGLE

    KW_LECTURA        shift, and go to state 247
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 248

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 101
    constant                   go to state 24
    string                     go to state 25
    identifier_langle_list     go to state 249
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 228

  121 identifier_rangle_list: IDENTIFIER RANGLE • KW_REVELARE SEMICOLON
  122                       | IDENTIFIER RANGLE • identifier_rangle_list

    KW_REVELARE  shift, and go to state 250
    IDENTIFIER   shift, and go to state 251

    identifier_rangle_list  go to state 252


State 229

   70 declaration_statement: IDENTIFIER type_specifier • opcional_constant SEMICOLON
  138 vector_statement: IDENTIFIER type_specifier • LANGLE expression RANGLE SEMICOLON

    KW_MOL  shift, and go to state 105
    LANGLE  shift, and go to state 253

    $default  reduce using rule 74 (opcional_constant)

    opcional_constant  go to state 106


State 230

  101 jump_statement: expression KW_REDIRE • SEMICOLON

    SEMICOLON  shift, and go to state 254


State 231

   26 assignment_statement: expression OP_ASSIGN • struct_member_lvalue SEMICOLON
   27                     | expression OP_ASSIGN • IDENTIFIER SEMICOLON
   28                     | expression OP_ASSIGN • IDENTIFIER LANGLE expression RANGLE SEMICOLON
   59 expression: expression OP_ASSIGN • assing_value
   71 declaration_statement: expression OP_ASSIGN • IDENTIFIER type_specifier opcional_constant SEMICOLON
  147 pointer_declaration: expression OP_ASSIGN • IDENTIFIER OP_DEREF_POINTER type_specifier SEMICOLON

    OP_ADDR_OF        shift, and go to state 107
    OP_DEREF_POINTER  shift, and go to state 108
    LPAREN            shift, and go to state 109
    IDENTIFIER        shift, and go to state 255

    struct_member_lvalue       go to state 256
    assing_value               go to state 112
    vector_access              go to state 113
    pointer_statement          go to state 114
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 232

   30 expression_statement: expression SEMICOLON •

    $default  reduce using rule 30 (expression_statement)


State 233

   12 statement_list: statement_list • statement
   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list • RBRACE

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 188
    LBRACKET          shift, and go to state 189
    RBRACE            shift, and go to state 257
    IDENTIFIER        shift, and go to state 191

    statement                  go to state 192
    assignment_statement       go to state 193
    expression_statement       go to state 194
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 195
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 196
    function_call_statement    go to state 197
    jump_statement             go to state 198
    conditional_statement      go to state 199
    causal_statement           go to state 200
    iteration_statement        go to state 201
    io_functions               go to state 202
    function_input_output      go to state 203
    identifier_langle_list     go to state 204
    identifier_rangle_list     go to state 205
    function_magnitudo         go to state 206
    type_define_statement      go to state 207
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 208
    vector_statement           go to state 209
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 234

  108 causal_statement: KW_CASUS expression COLON • statement_list

    $default  reduce using rule 11 (statement_list)

    statement_list  go to state 258


State 235

   12 statement_list: statement_list • statement
  109 causal_statement: KW_AXIOM COLON statement_list •

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 188
    LBRACKET          shift, and go to state 189
    IDENTIFIER        shift, and go to state 191

    KW_CASUS          [reduce using rule 109 (causal_statement)]
    KW_AXIOM          [reduce using rule 109 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 109 (causal_statement)]
    KW_RUPTIO         [reduce using rule 109 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 109 (causal_statement)]
    KW_REDIRE         [reduce using rule 109 (causal_statement)]
    LIT_FACTUM        [reduce using rule 109 (causal_statement)]
    LIT_FICTUM        [reduce using rule 109 (causal_statement)]
    LIT_FLOAT         [reduce using rule 109 (causal_statement)]
    LIT_INT           [reduce using rule 109 (causal_statement)]
    LIT_CHAR          [reduce using rule 109 (causal_statement)]
    LIT_STRING        [reduce using rule 109 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 109 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 109 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 109 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 109 (causal_statement)]
    LPAREN            [reduce using rule 109 (causal_statement)]
    LBRACKET          [reduce using rule 109 (causal_statement)]
    IDENTIFIER        [reduce using rule 109 (causal_statement)]
    $default          reduce using rule 109 (causal_statement)

    statement                  go to state 192
    assignment_statement       go to state 193
    expression_statement       go to state 194
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 195
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 196
    function_call_statement    go to state 197
    jump_statement             go to state 198
    conditional_statement      go to state 199
    causal_statement           go to state 200
    iteration_statement        go to state 201
    io_functions               go to state 202
    function_input_output      go to state 203
    identifier_langle_list     go to state 204
    identifier_rangle_list     go to state 205
    function_magnitudo         go to state 206
    type_define_statement      go to state 207
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 208
    vector_statement           go to state 209
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 236

   39 unary_expression: OP_DEREF_POINTER • unary_expression
   88 type_specifier: OP_DEREF_POINTER • type_specifier
  149 pointer_dereference: OP_DEREF_POINTER • IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    LIT_FACTUM          shift, and go to state 6
    LIT_FICTUM          shift, and go to state 7
    LIT_FLOAT           shift, and go to state 8
    LIT_INT             shift, and go to state 9
    LIT_CHAR            shift, and go to state 10
    LIT_STRING          shift, and go to state 11
    OP_SUBTRACT         shift, and go to state 12
    OP_LOGICAL_NOT      shift, and go to state 13
    OP_ADDR_OF          shift, and go to state 14
    OP_DEREF_POINTER    shift, and go to state 236
    LPAREN              shift, and go to state 16
    IDENTIFIER          shift, and go to state 259

    primary_expression         go to state 21
    unary_expression           go to state 58
    constant                   go to state 24
    string                     go to state 25
    type_specifier             go to state 87
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 237

   31 primary_expression: IDENTIFIER •
   86 type_specifier: IDENTIFIER •
   87               | IDENTIFIER • KW_ENUMERARE
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  149 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  151 member_access_dereference: LPAREN OP_DEREF_POINTER IDENTIFIER • RPAREN OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65
    RPAREN             shift, and go to state 136

    OP_ASSIGN          reduce using rule 31 (primary_expression)
    OP_ASSIGN          [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 31 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 149 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 31 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 149 (pointer_dereference)]
    OP_EQUAL           reduce using rule 31 (primary_expression)
    OP_EQUAL           [reduce using rule 149 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 31 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 149 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 31 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 149 (pointer_dereference)]
    OP_EXP             reduce using rule 31 (primary_expression)
    OP_EXP             [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 31 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 31 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 149 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 31 (primary_expression)
    OP_MULTIPLY        [reduce using rule 149 (pointer_dereference)]
    OP_ADD             reduce using rule 31 (primary_expression)
    OP_ADD             [reduce using rule 149 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 31 (primary_expression)
    OP_SUBTRACT        [reduce using rule 149 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 31 (primary_expression)
    OP_DIVIDE          [reduce using rule 149 (pointer_dereference)]
    OP_MODULUS         reduce using rule 31 (primary_expression)
    OP_MODULUS         [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 31 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 149 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 31 (primary_expression)
    OP_LESS_THAN       [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 31 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 149 (pointer_dereference)]
    RPAREN             [reduce using rule 31 (primary_expression)]
    RPAREN             [reduce using rule 86 (type_specifier)]
    RPAREN             [reduce using rule 149 (pointer_dereference)]
    PIPE               reduce using rule 31 (primary_expression)
    PIPE               [reduce using rule 149 (pointer_dereference)]
    SEMICOLON          reduce using rule 31 (primary_expression)
    SEMICOLON          [reduce using rule 149 (pointer_dereference)]
    $default           reduce using rule 31 (primary_expression)


State 238

  111 iteration_statement: LPAREN expression_statement expression_statement • expression RPAREN KW_ITERARE block
  112                    | LPAREN expression_statement expression_statement • RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 260
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 261
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 239

   30 expression_statement: expression • SEMICOLON
   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    SEMICOLON          shift, and go to state 232


State 240

   34 primary_expression: LPAREN expression RPAREN •
  102 conditional_statement: LPAREN expression RPAREN • KW_SI block
  103                      | LPAREN expression RPAREN • KW_SI block conditional_non_statement
  105                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@3 causal_statement RBRACE
  110 iteration_statement: LPAREN expression RPAREN • KW_PERSISTO block

    KW_VERTERE   shift, and go to state 262
    KW_PERSISTO  shift, and go to state 263
    KW_SI        shift, and go to state 264

    $default  reduce using rule 34 (primary_expression)


State 241

  113 iteration_statement: LPAREN declaration_statement expression_statement • expression RPAREN KW_ITERARE block
  114                    | LPAREN declaration_statement expression_statement • RPAREN KW_ITERARE block

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    RPAREN            shift, and go to state 265
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 266
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 242

   95 function_call_statement: LPAREN argument_list RPAREN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 267


State 243

   97 argument_list: argument_list PIPE • expression

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 268
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 244

  123 function_magnitudo: LPAREN type_expression RPAREN • KW_MAGNITUDO SEMICOLON

    KW_MAGNITUDO  shift, and go to state 269


State 245

  139 vector_statement: LBRACKET argument_list RBRACKET • OP_ASSIGN IDENTIFIER SEMICOLON

    OP_ASSIGN  shift, and go to state 270


State 246

  131 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER • IDENTIFIER KW_ENUMERARE SEMICOLON

    IDENTIFIER  shift, and go to state 271


State 247

  119 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA • SEMICOLON

    SEMICOLON  shift, and go to state 272


State 248

   31 primary_expression: IDENTIFIER •
  119 identifier_langle_list: IDENTIFIER • LANGLE KW_LECTURA SEMICOLON
  120                       | IDENTIFIER • LANGLE identifier_langle_list
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 227

    $default  reduce using rule 31 (primary_expression)


State 249

  120 identifier_langle_list: IDENTIFIER LANGLE identifier_langle_list •

    $default  reduce using rule 120 (identifier_langle_list)


State 250

  121 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE • SEMICOLON

    SEMICOLON  shift, and go to state 273


State 251

  121 identifier_rangle_list: IDENTIFIER • RANGLE KW_REVELARE SEMICOLON
  122                       | IDENTIFIER • RANGLE identifier_rangle_list

    RANGLE  shift, and go to state 228


State 252

  122 identifier_rangle_list: IDENTIFIER RANGLE identifier_rangle_list •

    $default  reduce using rule 122 (identifier_rangle_list)


State 253

  138 vector_statement: IDENTIFIER type_specifier LANGLE • expression RANGLE SEMICOLON

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 274
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 254

  101 jump_statement: expression KW_REDIRE SEMICOLON •

    $default  reduce using rule 101 (jump_statement)


State 255

   25 struct_member_lvalue: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
   27 assignment_statement: expression OP_ASSIGN IDENTIFIER • SEMICOLON
   28                     | expression OP_ASSIGN IDENTIFIER • LANGLE expression RANGLE SEMICOLON
   66 assing_value: IDENTIFIER •
   71 declaration_statement: expression OP_ASSIGN IDENTIFIER • type_specifier opcional_constant SEMICOLON
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  147 pointer_declaration: expression OP_ASSIGN IDENTIFIER • OP_DEREF_POINTER type_specifier SEMICOLON
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_TYPE_ATOMUS      shift, and go to state 39
    KW_TYPE_FRACTIO     shift, and go to state 40
    KW_TYPE_FRAGMENTUM  shift, and go to state 41
    KW_TYPE_MAGNUS      shift, and go to state 42
    KW_TYPE_MINIMUS     shift, and go to state 43
    KW_TYPE_QUANTUM     shift, and go to state 44
    KW_TYPE_SCRIPTUM    shift, and go to state 45
    KW_TYPE_SYMBOLUM    shift, and go to state 46
    KW_TYPE_VACUUM      shift, and go to state 47
    OP_ACCESS_POINTER   shift, and go to state 62
    OP_ACCESS_MEMBER    shift, and go to state 148
    OP_DEREF_POINTER    shift, and go to state 149
    LANGLE              shift, and go to state 275
    SEMICOLON           shift, and go to state 276
    IDENTIFIER          shift, and go to state 68

    SEMICOLON  [reduce using rule 66 (assing_value)]
    $default   reduce using rule 66 (assing_value)

    type_specifier  go to state 150


State 256

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue • SEMICOLON
   69 assing_value: struct_member_lvalue •

    SEMICOLON  shift, and go to state 277

    SEMICOLON  [reduce using rule 69 (assing_value)]
    $default   reduce using rule 69 (assing_value)


State 257

   90 function_declaration_statement: KW_FORMULA LPAREN parameter_list RPAREN IDENTIFIER OP_ASSIGN type_specifier $@2 LBRACE statement_list RBRACE •

    $default  reduce using rule 90 (function_declaration_statement)


State 258

   12 statement_list: statement_list • statement
  108 causal_statement: KW_CASUS expression COLON statement_list •

    KW_CASUS          shift, and go to state 183
    KW_AXIOM          shift, and go to state 184
    KW_CONTINUUM      shift, and go to state 185
    KW_RUPTIO         shift, and go to state 186
    KW_DESIGNARE      shift, and go to state 4
    KW_REDIRE         shift, and go to state 187
    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 188
    LBRACKET          shift, and go to state 189
    IDENTIFIER        shift, and go to state 191

    KW_CASUS          [reduce using rule 108 (causal_statement)]
    KW_AXIOM          [reduce using rule 108 (causal_statement)]
    KW_CONTINUUM      [reduce using rule 108 (causal_statement)]
    KW_RUPTIO         [reduce using rule 108 (causal_statement)]
    KW_DESIGNARE      [reduce using rule 108 (causal_statement)]
    KW_REDIRE         [reduce using rule 108 (causal_statement)]
    LIT_FACTUM        [reduce using rule 108 (causal_statement)]
    LIT_FICTUM        [reduce using rule 108 (causal_statement)]
    LIT_FLOAT         [reduce using rule 108 (causal_statement)]
    LIT_INT           [reduce using rule 108 (causal_statement)]
    LIT_CHAR          [reduce using rule 108 (causal_statement)]
    LIT_STRING        [reduce using rule 108 (causal_statement)]
    OP_SUBTRACT       [reduce using rule 108 (causal_statement)]
    OP_LOGICAL_NOT    [reduce using rule 108 (causal_statement)]
    OP_ADDR_OF        [reduce using rule 108 (causal_statement)]
    OP_DEREF_POINTER  [reduce using rule 108 (causal_statement)]
    LPAREN            [reduce using rule 108 (causal_statement)]
    LBRACKET          [reduce using rule 108 (causal_statement)]
    IDENTIFIER        [reduce using rule 108 (causal_statement)]
    $default          reduce using rule 108 (causal_statement)

    statement                  go to state 192
    assignment_statement       go to state 193
    expression_statement       go to state 194
    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 195
    constant                   go to state 24
    string                     go to state 25
    declaration_statement      go to state 196
    function_call_statement    go to state 197
    jump_statement             go to state 198
    conditional_statement      go to state 199
    causal_statement           go to state 200
    iteration_statement        go to state 201
    io_functions               go to state 202
    function_input_output      go to state 203
    identifier_langle_list     go to state 204
    identifier_rangle_list     go to state 205
    function_magnitudo         go to state 206
    type_define_statement      go to state 207
    type_define_struct         go to state 29
    type_define_enum           go to state 30
    enum_assignment            go to state 208
    vector_statement           go to state 209
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_declaration        go to state 33
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 259

   31 primary_expression: IDENTIFIER •
   86 type_specifier: IDENTIFIER •
   87               | IDENTIFIER • KW_ENUMERARE
  140 vector_access: IDENTIFIER • LANGLE expression RANGLE
  149 pointer_dereference: OP_DEREF_POINTER IDENTIFIER •
  150 member_access_direct: IDENTIFIER • OP_ACCESS_MEMBER IDENTIFIER
  152 member_access_pointer: IDENTIFIER • OP_ACCESS_POINTER IDENTIFIER

    KW_ENUMERARE       shift, and go to state 88
    OP_ACCESS_POINTER  shift, and go to state 62
    OP_ACCESS_MEMBER   shift, and go to state 63
    LANGLE             shift, and go to state 65

    OP_ASSIGN          reduce using rule 31 (primary_expression)
    OP_ASSIGN          [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_EQUAL   reduce using rule 31 (primary_expression)
    OP_GREATER_EQUAL   [reduce using rule 149 (pointer_dereference)]
    OP_LESS_EQUAL      reduce using rule 31 (primary_expression)
    OP_LESS_EQUAL      [reduce using rule 149 (pointer_dereference)]
    OP_EQUAL           reduce using rule 31 (primary_expression)
    OP_EQUAL           [reduce using rule 149 (pointer_dereference)]
    OP_NOT_EQUAL       reduce using rule 31 (primary_expression)
    OP_NOT_EQUAL       [reduce using rule 149 (pointer_dereference)]
    OP_INTEGER_DIVIDE  reduce using rule 31 (primary_expression)
    OP_INTEGER_DIVIDE  [reduce using rule 149 (pointer_dereference)]
    OP_EXP             reduce using rule 31 (primary_expression)
    OP_EXP             [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_AND     reduce using rule 31 (primary_expression)
    OP_LOGICAL_AND     [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_OR      reduce using rule 31 (primary_expression)
    OP_LOGICAL_OR      [reduce using rule 149 (pointer_dereference)]
    OP_MULTIPLY        reduce using rule 31 (primary_expression)
    OP_MULTIPLY        [reduce using rule 149 (pointer_dereference)]
    OP_ADD             reduce using rule 31 (primary_expression)
    OP_ADD             [reduce using rule 149 (pointer_dereference)]
    OP_SUBTRACT        reduce using rule 31 (primary_expression)
    OP_SUBTRACT        [reduce using rule 149 (pointer_dereference)]
    OP_DIVIDE          reduce using rule 31 (primary_expression)
    OP_DIVIDE          [reduce using rule 149 (pointer_dereference)]
    OP_MODULUS         reduce using rule 31 (primary_expression)
    OP_MODULUS         [reduce using rule 149 (pointer_dereference)]
    OP_GREATER_THAN    reduce using rule 31 (primary_expression)
    OP_GREATER_THAN    [reduce using rule 149 (pointer_dereference)]
    OP_LESS_THAN       reduce using rule 31 (primary_expression)
    OP_LESS_THAN       [reduce using rule 149 (pointer_dereference)]
    OP_LOGICAL_XOR     reduce using rule 31 (primary_expression)
    OP_LOGICAL_XOR     [reduce using rule 149 (pointer_dereference)]
    RPAREN             reduce using rule 31 (primary_expression)
    RPAREN             [reduce using rule 86 (type_specifier)]
    RPAREN             [reduce using rule 149 (pointer_dereference)]
    PIPE               reduce using rule 31 (primary_expression)
    PIPE               [reduce using rule 149 (pointer_dereference)]
    SEMICOLON          reduce using rule 31 (primary_expression)
    SEMICOLON          [reduce using rule 149 (pointer_dereference)]
    $default           reduce using rule 31 (primary_expression)


State 260

  112 iteration_statement: LPAREN expression_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 278


State 261

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
  111 iteration_statement: LPAREN expression_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 279


State 262

  105 conditional_statement: LPAREN expression RPAREN KW_VERTERE • LBRACE $@3 causal_statement RBRACE

    LBRACE  shift, and go to state 280


State 263

  110 iteration_statement: LPAREN expression RPAREN KW_PERSISTO • block

    LBRACE  shift, and go to state 157

    block  go to state 281


State 264

  102 conditional_statement: LPAREN expression RPAREN KW_SI • block
  103                      | LPAREN expression RPAREN KW_SI • block conditional_non_statement

    LBRACE  shift, and go to state 157

    block  go to state 282


State 265

  114 iteration_statement: LPAREN declaration_statement expression_statement RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 283


State 266

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
  113 iteration_statement: LPAREN declaration_statement expression_statement expression • RPAREN KW_ITERARE block

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 284


State 267

   95 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 285


State 268

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
   97 argument_list: argument_list PIPE expression •

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86

    $default  reduce using rule 97 (argument_list)


State 269

  123 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO • SEMICOLON

    SEMICOLON  shift, and go to state 286


State 270

  139 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 287


State 271

  131 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER • KW_ENUMERARE SEMICOLON

    KW_ENUMERARE  shift, and go to state 288


State 272

  119 identifier_langle_list: IDENTIFIER LANGLE KW_LECTURA SEMICOLON •

    $default  reduce using rule 119 (identifier_langle_list)


State 273

  121 identifier_rangle_list: IDENTIFIER RANGLE KW_REVELARE SEMICOLON •

    $default  reduce using rule 121 (identifier_rangle_list)


State 274

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
  138 vector_statement: IDENTIFIER type_specifier LANGLE expression • RANGLE SEMICOLON

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 289


State 275

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE • expression RANGLE SEMICOLON
  140 vector_access: IDENTIFIER LANGLE • expression RANGLE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 290
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 276

   27 assignment_statement: expression OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 27 (assignment_statement)


State 277

   26 assignment_statement: expression OP_ASSIGN struct_member_lvalue SEMICOLON •

    $default  reduce using rule 26 (assignment_statement)


State 278

  112 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 291


State 279

  111 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 292


State 280

  105 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE • $@3 causal_statement RBRACE

    $default  reduce using rule 104 ($@3)

    $@3  go to state 293


State 281

  110 iteration_statement: LPAREN expression RPAREN KW_PERSISTO block •

    $default  reduce using rule 110 (iteration_statement)


State 282

  102 conditional_statement: LPAREN expression RPAREN KW_SI block •
  103                      | LPAREN expression RPAREN KW_SI block • conditional_non_statement

    KW_NON  shift, and go to state 294

    $default  reduce using rule 102 (conditional_statement)

    conditional_non_statement  go to state 295


State 283

  114 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 296


State 284

  113 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN • KW_ITERARE block

    KW_ITERARE  shift, and go to state 297


State 285

   95 function_call_statement: LPAREN argument_list RPAREN IDENTIFIER SEMICOLON •

    $default  reduce using rule 95 (function_call_statement)


State 286

  123 function_magnitudo: LPAREN type_expression RPAREN KW_MAGNITUDO SEMICOLON •

    $default  reduce using rule 123 (function_magnitudo)


State 287

  139 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 298


State 288

  131 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE • SEMICOLON

    SEMICOLON  shift, and go to state 299


State 289

  138 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE • SEMICOLON

    SEMICOLON  shift, and go to state 300


State 290

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression • RANGLE SEMICOLON
   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
  140 vector_access: IDENTIFIER LANGLE expression • RANGLE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RANGLE             shift, and go to state 301


State 291

  112 iteration_statement: LPAREN expression_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 112 (iteration_statement)


State 292

  111 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 302


State 293

  105 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@3 • causal_statement RBRACE

    KW_CASUS  shift, and go to state 183
    KW_AXIOM  shift, and go to state 184

    causal_statement  go to state 303


State 294

  106 conditional_non_statement: KW_NON • block
  107                          | KW_NON • conditional_statement

    LPAREN  shift, and go to state 304
    LBRACE  shift, and go to state 157

    block                  go to state 305
    conditional_statement  go to state 306


State 295

  103 conditional_statement: LPAREN expression RPAREN KW_SI block conditional_non_statement •

    $default  reduce using rule 103 (conditional_statement)


State 296

  114 iteration_statement: LPAREN declaration_statement expression_statement RPAREN KW_ITERARE block •

    $default  reduce using rule 114 (iteration_statement)


State 297

  113 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE • block

    LBRACE  shift, and go to state 157

    block  go to state 307


State 298

  139 vector_statement: LBRACKET argument_list RBRACKET OP_ASSIGN IDENTIFIER SEMICOLON •

    $default  reduce using rule 139 (vector_statement)


State 299

  131 enum_assignment: IDENTIFIER OP_ASSIGN IDENTIFIER IDENTIFIER KW_ENUMERARE SEMICOLON •

    $default  reduce using rule 131 (enum_assignment)


State 300

  138 vector_statement: IDENTIFIER type_specifier LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 138 (vector_statement)


State 301

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE • SEMICOLON
  140 vector_access: IDENTIFIER LANGLE expression RANGLE •

    SEMICOLON  shift, and go to state 308

    SEMICOLON  [reduce using rule 140 (vector_access)]
    $default   reduce using rule 140 (vector_access)


State 302

  111 iteration_statement: LPAREN expression_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 111 (iteration_statement)


State 303

  105 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@3 causal_statement • RBRACE

    RBRACE  shift, and go to state 309


State 304

  102 conditional_statement: LPAREN • expression RPAREN KW_SI block
  103                      | LPAREN • expression RPAREN KW_SI block conditional_non_statement
  105                      | LPAREN • expression RPAREN KW_VERTERE LBRACE $@3 causal_statement RBRACE

    LIT_FACTUM        shift, and go to state 6
    LIT_FICTUM        shift, and go to state 7
    LIT_FLOAT         shift, and go to state 8
    LIT_INT           shift, and go to state 9
    LIT_CHAR          shift, and go to state 10
    LIT_STRING        shift, and go to state 11
    OP_SUBTRACT       shift, and go to state 12
    OP_LOGICAL_NOT    shift, and go to state 13
    OP_ADDR_OF        shift, and go to state 14
    OP_DEREF_POINTER  shift, and go to state 15
    LPAREN            shift, and go to state 16
    IDENTIFIER        shift, and go to state 52

    primary_expression         go to state 21
    unary_expression           go to state 22
    expression                 go to state 310
    constant                   go to state 24
    string                     go to state 25
    vector_access              go to state 31
    pointer_statement          go to state 32
    pointer_assignment         go to state 34
    pointer_dereference        go to state 35
    member_access_direct       go to state 36
    member_access_dereference  go to state 37
    member_access_pointer      go to state 38


State 305

  106 conditional_non_statement: KW_NON block •

    $default  reduce using rule 106 (conditional_non_statement)


State 306

  107 conditional_non_statement: KW_NON conditional_statement •

    $default  reduce using rule 107 (conditional_non_statement)


State 307

  113 iteration_statement: LPAREN declaration_statement expression_statement expression RPAREN KW_ITERARE block •

    $default  reduce using rule 113 (iteration_statement)


State 308

   28 assignment_statement: expression OP_ASSIGN IDENTIFIER LANGLE expression RANGLE SEMICOLON •

    $default  reduce using rule 28 (assignment_statement)


State 309

  105 conditional_statement: LPAREN expression RPAREN KW_VERTERE LBRACE $@3 causal_statement RBRACE •

    $default  reduce using rule 105 (conditional_statement)


State 310

   43 expression: expression • OP_ADD unary_expression
   44           | expression • OP_SUBTRACT unary_expression
   45           | expression • OP_MULTIPLY unary_expression
   46           | expression • OP_DIVIDE unary_expression
   47           | expression • OP_MODULUS unary_expression
   48           | expression • OP_EXP unary_expression
   49           | expression • OP_INTEGER_DIVIDE unary_expression
   50           | expression • OP_EQUAL unary_expression
   51           | expression • OP_NOT_EQUAL unary_expression
   52           | expression • OP_LESS_THAN unary_expression
   53           | expression • OP_GREATER_THAN unary_expression
   54           | expression • OP_LESS_EQUAL unary_expression
   55           | expression • OP_GREATER_EQUAL unary_expression
   56           | expression • OP_LOGICAL_AND unary_expression
   57           | expression • OP_LOGICAL_OR unary_expression
   58           | expression • OP_LOGICAL_XOR unary_expression
   59           | expression • OP_ASSIGN assing_value
  102 conditional_statement: LPAREN expression • RPAREN KW_SI block
  103                      | LPAREN expression • RPAREN KW_SI block conditional_non_statement
  105                      | LPAREN expression • RPAREN KW_VERTERE LBRACE $@3 causal_statement RBRACE

    OP_ASSIGN          shift, and go to state 95
    OP_GREATER_EQUAL   shift, and go to state 71
    OP_LESS_EQUAL      shift, and go to state 72
    OP_EQUAL           shift, and go to state 73
    OP_NOT_EQUAL       shift, and go to state 74
    OP_INTEGER_DIVIDE  shift, and go to state 75
    OP_EXP             shift, and go to state 76
    OP_LOGICAL_AND     shift, and go to state 77
    OP_LOGICAL_OR      shift, and go to state 78
    OP_MULTIPLY        shift, and go to state 79
    OP_ADD             shift, and go to state 80
    OP_SUBTRACT        shift, and go to state 81
    OP_DIVIDE          shift, and go to state 82
    OP_MODULUS         shift, and go to state 83
    OP_GREATER_THAN    shift, and go to state 84
    OP_LESS_THAN       shift, and go to state 85
    OP_LOGICAL_XOR     shift, and go to state 86
    RPAREN             shift, and go to state 311


State 311

  102 conditional_statement: LPAREN expression RPAREN • KW_SI block
  103                      | LPAREN expression RPAREN • KW_SI block conditional_non_statement
  105                      | LPAREN expression RPAREN • KW_VERTERE LBRACE $@3 causal_statement RBRACE

    KW_VERTERE  shift, and go to state 262
    KW_SI       shift, and go to state 264
